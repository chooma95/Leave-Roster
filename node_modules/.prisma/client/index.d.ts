
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Staff
 * 
 */
export type Staff = $Result.DefaultSelection<Prisma.$StaffPayload>
/**
 * Model RosterPeriod
 * 
 */
export type RosterPeriod = $Result.DefaultSelection<Prisma.$RosterPeriodPayload>
/**
 * Model Shift
 * 
 */
export type Shift = $Result.DefaultSelection<Prisma.$ShiftPayload>
/**
 * Model LeaveRequest
 * 
 */
export type LeaveRequest = $Result.DefaultSelection<Prisma.$LeaveRequestPayload>
/**
 * Model LeaveDay
 * 
 */
export type LeaveDay = $Result.DefaultSelection<Prisma.$LeaveDayPayload>
/**
 * Model LeavePeriod
 * 
 */
export type LeavePeriod = $Result.DefaultSelection<Prisma.$LeavePeriodPayload>
/**
 * Model ShiftSwap
 * 
 */
export type ShiftSwap = $Result.DefaultSelection<Prisma.$ShiftSwapPayload>
/**
 * Model Skill
 * 
 */
export type Skill = $Result.DefaultSelection<Prisma.$SkillPayload>
/**
 * Model SkillMatrix
 * 
 */
export type SkillMatrix = $Result.DefaultSelection<Prisma.$SkillMatrixPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.staff`: Exposes CRUD operations for the **Staff** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Staff
    * const staff = await prisma.staff.findMany()
    * ```
    */
  get staff(): Prisma.StaffDelegate<ExtArgs>;

  /**
   * `prisma.rosterPeriod`: Exposes CRUD operations for the **RosterPeriod** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RosterPeriods
    * const rosterPeriods = await prisma.rosterPeriod.findMany()
    * ```
    */
  get rosterPeriod(): Prisma.RosterPeriodDelegate<ExtArgs>;

  /**
   * `prisma.shift`: Exposes CRUD operations for the **Shift** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shifts
    * const shifts = await prisma.shift.findMany()
    * ```
    */
  get shift(): Prisma.ShiftDelegate<ExtArgs>;

  /**
   * `prisma.leaveRequest`: Exposes CRUD operations for the **LeaveRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeaveRequests
    * const leaveRequests = await prisma.leaveRequest.findMany()
    * ```
    */
  get leaveRequest(): Prisma.LeaveRequestDelegate<ExtArgs>;

  /**
   * `prisma.leaveDay`: Exposes CRUD operations for the **LeaveDay** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeaveDays
    * const leaveDays = await prisma.leaveDay.findMany()
    * ```
    */
  get leaveDay(): Prisma.LeaveDayDelegate<ExtArgs>;

  /**
   * `prisma.leavePeriod`: Exposes CRUD operations for the **LeavePeriod** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeavePeriods
    * const leavePeriods = await prisma.leavePeriod.findMany()
    * ```
    */
  get leavePeriod(): Prisma.LeavePeriodDelegate<ExtArgs>;

  /**
   * `prisma.shiftSwap`: Exposes CRUD operations for the **ShiftSwap** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShiftSwaps
    * const shiftSwaps = await prisma.shiftSwap.findMany()
    * ```
    */
  get shiftSwap(): Prisma.ShiftSwapDelegate<ExtArgs>;

  /**
   * `prisma.skill`: Exposes CRUD operations for the **Skill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skills
    * const skills = await prisma.skill.findMany()
    * ```
    */
  get skill(): Prisma.SkillDelegate<ExtArgs>;

  /**
   * `prisma.skillMatrix`: Exposes CRUD operations for the **SkillMatrix** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SkillMatrices
    * const skillMatrices = await prisma.skillMatrix.findMany()
    * ```
    */
  get skillMatrix(): Prisma.SkillMatrixDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Staff: 'Staff',
    RosterPeriod: 'RosterPeriod',
    Shift: 'Shift',
    LeaveRequest: 'LeaveRequest',
    LeaveDay: 'LeaveDay',
    LeavePeriod: 'LeavePeriod',
    ShiftSwap: 'ShiftSwap',
    Skill: 'Skill',
    SkillMatrix: 'SkillMatrix'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "staff" | "rosterPeriod" | "shift" | "leaveRequest" | "leaveDay" | "leavePeriod" | "shiftSwap" | "skill" | "skillMatrix"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Staff: {
        payload: Prisma.$StaffPayload<ExtArgs>
        fields: Prisma.StaffFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          findFirst: {
            args: Prisma.StaffFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          findMany: {
            args: Prisma.StaffFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>[]
          }
          create: {
            args: Prisma.StaffCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          createMany: {
            args: Prisma.StaffCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StaffCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>[]
          }
          delete: {
            args: Prisma.StaffDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          update: {
            args: Prisma.StaffUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          deleteMany: {
            args: Prisma.StaffDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StaffUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          aggregate: {
            args: Prisma.StaffAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaff>
          }
          groupBy: {
            args: Prisma.StaffGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffCountArgs<ExtArgs>
            result: $Utils.Optional<StaffCountAggregateOutputType> | number
          }
        }
      }
      RosterPeriod: {
        payload: Prisma.$RosterPeriodPayload<ExtArgs>
        fields: Prisma.RosterPeriodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RosterPeriodFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RosterPeriodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RosterPeriodFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RosterPeriodPayload>
          }
          findFirst: {
            args: Prisma.RosterPeriodFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RosterPeriodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RosterPeriodFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RosterPeriodPayload>
          }
          findMany: {
            args: Prisma.RosterPeriodFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RosterPeriodPayload>[]
          }
          create: {
            args: Prisma.RosterPeriodCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RosterPeriodPayload>
          }
          createMany: {
            args: Prisma.RosterPeriodCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RosterPeriodCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RosterPeriodPayload>[]
          }
          delete: {
            args: Prisma.RosterPeriodDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RosterPeriodPayload>
          }
          update: {
            args: Prisma.RosterPeriodUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RosterPeriodPayload>
          }
          deleteMany: {
            args: Prisma.RosterPeriodDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RosterPeriodUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RosterPeriodUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RosterPeriodPayload>
          }
          aggregate: {
            args: Prisma.RosterPeriodAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRosterPeriod>
          }
          groupBy: {
            args: Prisma.RosterPeriodGroupByArgs<ExtArgs>
            result: $Utils.Optional<RosterPeriodGroupByOutputType>[]
          }
          count: {
            args: Prisma.RosterPeriodCountArgs<ExtArgs>
            result: $Utils.Optional<RosterPeriodCountAggregateOutputType> | number
          }
        }
      }
      Shift: {
        payload: Prisma.$ShiftPayload<ExtArgs>
        fields: Prisma.ShiftFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShiftFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShiftFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload>
          }
          findFirst: {
            args: Prisma.ShiftFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShiftFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload>
          }
          findMany: {
            args: Prisma.ShiftFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload>[]
          }
          create: {
            args: Prisma.ShiftCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload>
          }
          createMany: {
            args: Prisma.ShiftCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShiftCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload>[]
          }
          delete: {
            args: Prisma.ShiftDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload>
          }
          update: {
            args: Prisma.ShiftUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload>
          }
          deleteMany: {
            args: Prisma.ShiftDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShiftUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShiftUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPayload>
          }
          aggregate: {
            args: Prisma.ShiftAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShift>
          }
          groupBy: {
            args: Prisma.ShiftGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShiftGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShiftCountArgs<ExtArgs>
            result: $Utils.Optional<ShiftCountAggregateOutputType> | number
          }
        }
      }
      LeaveRequest: {
        payload: Prisma.$LeaveRequestPayload<ExtArgs>
        fields: Prisma.LeaveRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeaveRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeaveRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          findFirst: {
            args: Prisma.LeaveRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeaveRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          findMany: {
            args: Prisma.LeaveRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>[]
          }
          create: {
            args: Prisma.LeaveRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          createMany: {
            args: Prisma.LeaveRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeaveRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>[]
          }
          delete: {
            args: Prisma.LeaveRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          update: {
            args: Prisma.LeaveRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          deleteMany: {
            args: Prisma.LeaveRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeaveRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeaveRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          aggregate: {
            args: Prisma.LeaveRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeaveRequest>
          }
          groupBy: {
            args: Prisma.LeaveRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeaveRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeaveRequestCountArgs<ExtArgs>
            result: $Utils.Optional<LeaveRequestCountAggregateOutputType> | number
          }
        }
      }
      LeaveDay: {
        payload: Prisma.$LeaveDayPayload<ExtArgs>
        fields: Prisma.LeaveDayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeaveDayFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveDayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeaveDayFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveDayPayload>
          }
          findFirst: {
            args: Prisma.LeaveDayFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveDayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeaveDayFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveDayPayload>
          }
          findMany: {
            args: Prisma.LeaveDayFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveDayPayload>[]
          }
          create: {
            args: Prisma.LeaveDayCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveDayPayload>
          }
          createMany: {
            args: Prisma.LeaveDayCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeaveDayCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveDayPayload>[]
          }
          delete: {
            args: Prisma.LeaveDayDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveDayPayload>
          }
          update: {
            args: Prisma.LeaveDayUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveDayPayload>
          }
          deleteMany: {
            args: Prisma.LeaveDayDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeaveDayUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeaveDayUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveDayPayload>
          }
          aggregate: {
            args: Prisma.LeaveDayAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeaveDay>
          }
          groupBy: {
            args: Prisma.LeaveDayGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeaveDayGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeaveDayCountArgs<ExtArgs>
            result: $Utils.Optional<LeaveDayCountAggregateOutputType> | number
          }
        }
      }
      LeavePeriod: {
        payload: Prisma.$LeavePeriodPayload<ExtArgs>
        fields: Prisma.LeavePeriodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeavePeriodFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePeriodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeavePeriodFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePeriodPayload>
          }
          findFirst: {
            args: Prisma.LeavePeriodFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePeriodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeavePeriodFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePeriodPayload>
          }
          findMany: {
            args: Prisma.LeavePeriodFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePeriodPayload>[]
          }
          create: {
            args: Prisma.LeavePeriodCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePeriodPayload>
          }
          createMany: {
            args: Prisma.LeavePeriodCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeavePeriodCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePeriodPayload>[]
          }
          delete: {
            args: Prisma.LeavePeriodDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePeriodPayload>
          }
          update: {
            args: Prisma.LeavePeriodUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePeriodPayload>
          }
          deleteMany: {
            args: Prisma.LeavePeriodDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeavePeriodUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeavePeriodUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePeriodPayload>
          }
          aggregate: {
            args: Prisma.LeavePeriodAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeavePeriod>
          }
          groupBy: {
            args: Prisma.LeavePeriodGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeavePeriodGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeavePeriodCountArgs<ExtArgs>
            result: $Utils.Optional<LeavePeriodCountAggregateOutputType> | number
          }
        }
      }
      ShiftSwap: {
        payload: Prisma.$ShiftSwapPayload<ExtArgs>
        fields: Prisma.ShiftSwapFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShiftSwapFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSwapPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShiftSwapFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSwapPayload>
          }
          findFirst: {
            args: Prisma.ShiftSwapFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSwapPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShiftSwapFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSwapPayload>
          }
          findMany: {
            args: Prisma.ShiftSwapFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSwapPayload>[]
          }
          create: {
            args: Prisma.ShiftSwapCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSwapPayload>
          }
          createMany: {
            args: Prisma.ShiftSwapCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShiftSwapCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSwapPayload>[]
          }
          delete: {
            args: Prisma.ShiftSwapDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSwapPayload>
          }
          update: {
            args: Prisma.ShiftSwapUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSwapPayload>
          }
          deleteMany: {
            args: Prisma.ShiftSwapDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShiftSwapUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShiftSwapUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftSwapPayload>
          }
          aggregate: {
            args: Prisma.ShiftSwapAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShiftSwap>
          }
          groupBy: {
            args: Prisma.ShiftSwapGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShiftSwapGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShiftSwapCountArgs<ExtArgs>
            result: $Utils.Optional<ShiftSwapCountAggregateOutputType> | number
          }
        }
      }
      Skill: {
        payload: Prisma.$SkillPayload<ExtArgs>
        fields: Prisma.SkillFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkillFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkillFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          findFirst: {
            args: Prisma.SkillFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkillFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          findMany: {
            args: Prisma.SkillFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          create: {
            args: Prisma.SkillCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          createMany: {
            args: Prisma.SkillCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkillCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          delete: {
            args: Prisma.SkillDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          update: {
            args: Prisma.SkillUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          deleteMany: {
            args: Prisma.SkillDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkillUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SkillUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          aggregate: {
            args: Prisma.SkillAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkill>
          }
          groupBy: {
            args: Prisma.SkillGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkillGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkillCountArgs<ExtArgs>
            result: $Utils.Optional<SkillCountAggregateOutputType> | number
          }
        }
      }
      SkillMatrix: {
        payload: Prisma.$SkillMatrixPayload<ExtArgs>
        fields: Prisma.SkillMatrixFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkillMatrixFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMatrixPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkillMatrixFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMatrixPayload>
          }
          findFirst: {
            args: Prisma.SkillMatrixFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMatrixPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkillMatrixFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMatrixPayload>
          }
          findMany: {
            args: Prisma.SkillMatrixFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMatrixPayload>[]
          }
          create: {
            args: Prisma.SkillMatrixCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMatrixPayload>
          }
          createMany: {
            args: Prisma.SkillMatrixCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkillMatrixCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMatrixPayload>[]
          }
          delete: {
            args: Prisma.SkillMatrixDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMatrixPayload>
          }
          update: {
            args: Prisma.SkillMatrixUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMatrixPayload>
          }
          deleteMany: {
            args: Prisma.SkillMatrixDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkillMatrixUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SkillMatrixUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMatrixPayload>
          }
          aggregate: {
            args: Prisma.SkillMatrixAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkillMatrix>
          }
          groupBy: {
            args: Prisma.SkillMatrixGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkillMatrixGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkillMatrixCountArgs<ExtArgs>
            result: $Utils.Optional<SkillMatrixCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StaffCountOutputType
   */

  export type StaffCountOutputType = {
    shifts: number
    leaveRequests: number
    leaveDays: number
    leavePeriods: number
    skillsMatrix: number
    swapsProposed: number
    swapsReceived: number
  }

  export type StaffCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shifts?: boolean | StaffCountOutputTypeCountShiftsArgs
    leaveRequests?: boolean | StaffCountOutputTypeCountLeaveRequestsArgs
    leaveDays?: boolean | StaffCountOutputTypeCountLeaveDaysArgs
    leavePeriods?: boolean | StaffCountOutputTypeCountLeavePeriodsArgs
    skillsMatrix?: boolean | StaffCountOutputTypeCountSkillsMatrixArgs
    swapsProposed?: boolean | StaffCountOutputTypeCountSwapsProposedArgs
    swapsReceived?: boolean | StaffCountOutputTypeCountSwapsReceivedArgs
  }

  // Custom InputTypes
  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCountOutputType
     */
    select?: StaffCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountShiftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftWhereInput
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountLeaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveRequestWhereInput
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountLeaveDaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveDayWhereInput
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountLeavePeriodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeavePeriodWhereInput
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountSkillsMatrixArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillMatrixWhereInput
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountSwapsProposedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftSwapWhereInput
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountSwapsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftSwapWhereInput
  }


  /**
   * Count Type RosterPeriodCountOutputType
   */

  export type RosterPeriodCountOutputType = {
    shifts: number
  }

  export type RosterPeriodCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shifts?: boolean | RosterPeriodCountOutputTypeCountShiftsArgs
  }

  // Custom InputTypes
  /**
   * RosterPeriodCountOutputType without action
   */
  export type RosterPeriodCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RosterPeriodCountOutputType
     */
    select?: RosterPeriodCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RosterPeriodCountOutputType without action
   */
  export type RosterPeriodCountOutputTypeCountShiftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftWhereInput
  }


  /**
   * Count Type ShiftCountOutputType
   */

  export type ShiftCountOutputType = {
    swaps: number
  }

  export type ShiftCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    swaps?: boolean | ShiftCountOutputTypeCountSwapsArgs
  }

  // Custom InputTypes
  /**
   * ShiftCountOutputType without action
   */
  export type ShiftCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftCountOutputType
     */
    select?: ShiftCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShiftCountOutputType without action
   */
  export type ShiftCountOutputTypeCountSwapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftSwapWhereInput
  }


  /**
   * Count Type SkillCountOutputType
   */

  export type SkillCountOutputType = {
    skillsMatrix: number
  }

  export type SkillCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skillsMatrix?: boolean | SkillCountOutputTypeCountSkillsMatrixArgs
  }

  // Custom InputTypes
  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillCountOutputType
     */
    select?: SkillCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeCountSkillsMatrixArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillMatrixWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    role: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staff?: boolean | User$staffArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | User$staffArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      staff: Prisma.$StaffPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    staff<T extends User$staffArgs<ExtArgs> = {}>(args?: Subset<T, User$staffArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.staff
   */
  export type User$staffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Staff
   */

  export type AggregateStaff = {
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  export type StaffAvgAggregateOutputType = {
    weekOffNum: number | null
  }

  export type StaffSumAggregateOutputType = {
    weekOffNum: number | null
  }

  export type StaffMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    status: string | null
    scheduleType: string | null
    workDays: string | null
    week1Days: string | null
    week2Days: string | null
    weekOffNum: number | null
    weekOffShiftType: string | null
    inactiveDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    status: string | null
    scheduleType: string | null
    workDays: string | null
    week1Days: string | null
    week2Days: string | null
    weekOffNum: number | null
    weekOffShiftType: string | null
    inactiveDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    status: number
    scheduleType: number
    workDays: number
    week1Days: number
    week2Days: number
    weekOffNum: number
    weekOffShiftType: number
    inactiveDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StaffAvgAggregateInputType = {
    weekOffNum?: true
  }

  export type StaffSumAggregateInputType = {
    weekOffNum?: true
  }

  export type StaffMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    status?: true
    scheduleType?: true
    workDays?: true
    week1Days?: true
    week2Days?: true
    weekOffNum?: true
    weekOffShiftType?: true
    inactiveDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    status?: true
    scheduleType?: true
    workDays?: true
    week1Days?: true
    week2Days?: true
    weekOffNum?: true
    weekOffShiftType?: true
    inactiveDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    status?: true
    scheduleType?: true
    workDays?: true
    week1Days?: true
    week2Days?: true
    weekOffNum?: true
    weekOffShiftType?: true
    inactiveDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StaffAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Staff to aggregate.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Staff
    **/
    _count?: true | StaffCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StaffAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StaffSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffMaxAggregateInputType
  }

  export type GetStaffAggregateType<T extends StaffAggregateArgs> = {
        [P in keyof T & keyof AggregateStaff]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaff[P]>
      : GetScalarType<T[P], AggregateStaff[P]>
  }




  export type StaffGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffWhereInput
    orderBy?: StaffOrderByWithAggregationInput | StaffOrderByWithAggregationInput[]
    by: StaffScalarFieldEnum[] | StaffScalarFieldEnum
    having?: StaffScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffCountAggregateInputType | true
    _avg?: StaffAvgAggregateInputType
    _sum?: StaffSumAggregateInputType
    _min?: StaffMinAggregateInputType
    _max?: StaffMaxAggregateInputType
  }

  export type StaffGroupByOutputType = {
    id: string
    userId: string
    name: string
    status: string
    scheduleType: string
    workDays: string | null
    week1Days: string | null
    week2Days: string | null
    weekOffNum: number | null
    weekOffShiftType: string | null
    inactiveDate: Date | null
    createdAt: Date
    updatedAt: Date
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  type GetStaffGroupByPayload<T extends StaffGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffGroupByOutputType[P]>
            : GetScalarType<T[P], StaffGroupByOutputType[P]>
        }
      >
    >


  export type StaffSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    status?: boolean
    scheduleType?: boolean
    workDays?: boolean
    week1Days?: boolean
    week2Days?: boolean
    weekOffNum?: boolean
    weekOffShiftType?: boolean
    inactiveDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    shifts?: boolean | Staff$shiftsArgs<ExtArgs>
    leaveRequests?: boolean | Staff$leaveRequestsArgs<ExtArgs>
    leaveDays?: boolean | Staff$leaveDaysArgs<ExtArgs>
    leavePeriods?: boolean | Staff$leavePeriodsArgs<ExtArgs>
    skillsMatrix?: boolean | Staff$skillsMatrixArgs<ExtArgs>
    swapsProposed?: boolean | Staff$swapsProposedArgs<ExtArgs>
    swapsReceived?: boolean | Staff$swapsReceivedArgs<ExtArgs>
    _count?: boolean | StaffCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type StaffSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    status?: boolean
    scheduleType?: boolean
    workDays?: boolean
    week1Days?: boolean
    week2Days?: boolean
    weekOffNum?: boolean
    weekOffShiftType?: boolean
    inactiveDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type StaffSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    status?: boolean
    scheduleType?: boolean
    workDays?: boolean
    week1Days?: boolean
    week2Days?: boolean
    weekOffNum?: boolean
    weekOffShiftType?: boolean
    inactiveDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StaffInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    shifts?: boolean | Staff$shiftsArgs<ExtArgs>
    leaveRequests?: boolean | Staff$leaveRequestsArgs<ExtArgs>
    leaveDays?: boolean | Staff$leaveDaysArgs<ExtArgs>
    leavePeriods?: boolean | Staff$leavePeriodsArgs<ExtArgs>
    skillsMatrix?: boolean | Staff$skillsMatrixArgs<ExtArgs>
    swapsProposed?: boolean | Staff$swapsProposedArgs<ExtArgs>
    swapsReceived?: boolean | Staff$swapsReceivedArgs<ExtArgs>
    _count?: boolean | StaffCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StaffIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StaffPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Staff"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      shifts: Prisma.$ShiftPayload<ExtArgs>[]
      leaveRequests: Prisma.$LeaveRequestPayload<ExtArgs>[]
      leaveDays: Prisma.$LeaveDayPayload<ExtArgs>[]
      leavePeriods: Prisma.$LeavePeriodPayload<ExtArgs>[]
      skillsMatrix: Prisma.$SkillMatrixPayload<ExtArgs>[]
      swapsProposed: Prisma.$ShiftSwapPayload<ExtArgs>[]
      swapsReceived: Prisma.$ShiftSwapPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      status: string
      scheduleType: string
      workDays: string | null
      week1Days: string | null
      week2Days: string | null
      weekOffNum: number | null
      weekOffShiftType: string | null
      inactiveDate: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["staff"]>
    composites: {}
  }

  type StaffGetPayload<S extends boolean | null | undefined | StaffDefaultArgs> = $Result.GetResult<Prisma.$StaffPayload, S>

  type StaffCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StaffFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StaffCountAggregateInputType | true
    }

  export interface StaffDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Staff'], meta: { name: 'Staff' } }
    /**
     * Find zero or one Staff that matches the filter.
     * @param {StaffFindUniqueArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffFindUniqueArgs>(args: SelectSubset<T, StaffFindUniqueArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Staff that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StaffFindUniqueOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffFindFirstArgs>(args?: SelectSubset<T, StaffFindFirstArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Staff that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Staff
     * const staff = await prisma.staff.findMany()
     * 
     * // Get first 10 Staff
     * const staff = await prisma.staff.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffWithIdOnly = await prisma.staff.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffFindManyArgs>(args?: SelectSubset<T, StaffFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Staff.
     * @param {StaffCreateArgs} args - Arguments to create a Staff.
     * @example
     * // Create one Staff
     * const Staff = await prisma.staff.create({
     *   data: {
     *     // ... data to create a Staff
     *   }
     * })
     * 
     */
    create<T extends StaffCreateArgs>(args: SelectSubset<T, StaffCreateArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Staff.
     * @param {StaffCreateManyArgs} args - Arguments to create many Staff.
     * @example
     * // Create many Staff
     * const staff = await prisma.staff.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffCreateManyArgs>(args?: SelectSubset<T, StaffCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Staff and returns the data saved in the database.
     * @param {StaffCreateManyAndReturnArgs} args - Arguments to create many Staff.
     * @example
     * // Create many Staff
     * const staff = await prisma.staff.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Staff and only return the `id`
     * const staffWithIdOnly = await prisma.staff.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StaffCreateManyAndReturnArgs>(args?: SelectSubset<T, StaffCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Staff.
     * @param {StaffDeleteArgs} args - Arguments to delete one Staff.
     * @example
     * // Delete one Staff
     * const Staff = await prisma.staff.delete({
     *   where: {
     *     // ... filter to delete one Staff
     *   }
     * })
     * 
     */
    delete<T extends StaffDeleteArgs>(args: SelectSubset<T, StaffDeleteArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Staff.
     * @param {StaffUpdateArgs} args - Arguments to update one Staff.
     * @example
     * // Update one Staff
     * const staff = await prisma.staff.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffUpdateArgs>(args: SelectSubset<T, StaffUpdateArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Staff.
     * @param {StaffDeleteManyArgs} args - Arguments to filter Staff to delete.
     * @example
     * // Delete a few Staff
     * const { count } = await prisma.staff.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffDeleteManyArgs>(args?: SelectSubset<T, StaffDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Staff
     * const staff = await prisma.staff.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffUpdateManyArgs>(args: SelectSubset<T, StaffUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Staff.
     * @param {StaffUpsertArgs} args - Arguments to update or create a Staff.
     * @example
     * // Update or create a Staff
     * const staff = await prisma.staff.upsert({
     *   create: {
     *     // ... data to create a Staff
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Staff we want to update
     *   }
     * })
     */
    upsert<T extends StaffUpsertArgs>(args: SelectSubset<T, StaffUpsertArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffCountArgs} args - Arguments to filter Staff to count.
     * @example
     * // Count the number of Staff
     * const count = await prisma.staff.count({
     *   where: {
     *     // ... the filter for the Staff we want to count
     *   }
     * })
    **/
    count<T extends StaffCountArgs>(
      args?: Subset<T, StaffCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffAggregateArgs>(args: Subset<T, StaffAggregateArgs>): Prisma.PrismaPromise<GetStaffAggregateType<T>>

    /**
     * Group by Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffGroupByArgs['orderBy'] }
        : { orderBy?: StaffGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Staff model
   */
  readonly fields: StaffFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Staff.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    shifts<T extends Staff$shiftsArgs<ExtArgs> = {}>(args?: Subset<T, Staff$shiftsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findMany"> | Null>
    leaveRequests<T extends Staff$leaveRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Staff$leaveRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findMany"> | Null>
    leaveDays<T extends Staff$leaveDaysArgs<ExtArgs> = {}>(args?: Subset<T, Staff$leaveDaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveDayPayload<ExtArgs>, T, "findMany"> | Null>
    leavePeriods<T extends Staff$leavePeriodsArgs<ExtArgs> = {}>(args?: Subset<T, Staff$leavePeriodsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeavePeriodPayload<ExtArgs>, T, "findMany"> | Null>
    skillsMatrix<T extends Staff$skillsMatrixArgs<ExtArgs> = {}>(args?: Subset<T, Staff$skillsMatrixArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillMatrixPayload<ExtArgs>, T, "findMany"> | Null>
    swapsProposed<T extends Staff$swapsProposedArgs<ExtArgs> = {}>(args?: Subset<T, Staff$swapsProposedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftSwapPayload<ExtArgs>, T, "findMany"> | Null>
    swapsReceived<T extends Staff$swapsReceivedArgs<ExtArgs> = {}>(args?: Subset<T, Staff$swapsReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftSwapPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Staff model
   */ 
  interface StaffFieldRefs {
    readonly id: FieldRef<"Staff", 'String'>
    readonly userId: FieldRef<"Staff", 'String'>
    readonly name: FieldRef<"Staff", 'String'>
    readonly status: FieldRef<"Staff", 'String'>
    readonly scheduleType: FieldRef<"Staff", 'String'>
    readonly workDays: FieldRef<"Staff", 'String'>
    readonly week1Days: FieldRef<"Staff", 'String'>
    readonly week2Days: FieldRef<"Staff", 'String'>
    readonly weekOffNum: FieldRef<"Staff", 'Int'>
    readonly weekOffShiftType: FieldRef<"Staff", 'String'>
    readonly inactiveDate: FieldRef<"Staff", 'DateTime'>
    readonly createdAt: FieldRef<"Staff", 'DateTime'>
    readonly updatedAt: FieldRef<"Staff", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Staff findUnique
   */
  export type StaffFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff findUniqueOrThrow
   */
  export type StaffFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff findFirst
   */
  export type StaffFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff findFirstOrThrow
   */
  export type StaffFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff findMany
   */
  export type StaffFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff create
   */
  export type StaffCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The data needed to create a Staff.
     */
    data: XOR<StaffCreateInput, StaffUncheckedCreateInput>
  }

  /**
   * Staff createMany
   */
  export type StaffCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Staff.
     */
    data: StaffCreateManyInput | StaffCreateManyInput[]
  }

  /**
   * Staff createManyAndReturn
   */
  export type StaffCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Staff.
     */
    data: StaffCreateManyInput | StaffCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Staff update
   */
  export type StaffUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The data needed to update a Staff.
     */
    data: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
    /**
     * Choose, which Staff to update.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff updateMany
   */
  export type StaffUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Staff.
     */
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyInput>
    /**
     * Filter which Staff to update
     */
    where?: StaffWhereInput
  }

  /**
   * Staff upsert
   */
  export type StaffUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The filter to search for the Staff to update in case it exists.
     */
    where: StaffWhereUniqueInput
    /**
     * In case the Staff found by the `where` argument doesn't exist, create a new Staff with this data.
     */
    create: XOR<StaffCreateInput, StaffUncheckedCreateInput>
    /**
     * In case the Staff was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
  }

  /**
   * Staff delete
   */
  export type StaffDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter which Staff to delete.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff deleteMany
   */
  export type StaffDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Staff to delete
     */
    where?: StaffWhereInput
  }

  /**
   * Staff.shifts
   */
  export type Staff$shiftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    where?: ShiftWhereInput
    orderBy?: ShiftOrderByWithRelationInput | ShiftOrderByWithRelationInput[]
    cursor?: ShiftWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShiftScalarFieldEnum | ShiftScalarFieldEnum[]
  }

  /**
   * Staff.leaveRequests
   */
  export type Staff$leaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    where?: LeaveRequestWhereInput
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    cursor?: LeaveRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * Staff.leaveDays
   */
  export type Staff$leaveDaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveDay
     */
    select?: LeaveDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveDayInclude<ExtArgs> | null
    where?: LeaveDayWhereInput
    orderBy?: LeaveDayOrderByWithRelationInput | LeaveDayOrderByWithRelationInput[]
    cursor?: LeaveDayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveDayScalarFieldEnum | LeaveDayScalarFieldEnum[]
  }

  /**
   * Staff.leavePeriods
   */
  export type Staff$leavePeriodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePeriod
     */
    select?: LeavePeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePeriodInclude<ExtArgs> | null
    where?: LeavePeriodWhereInput
    orderBy?: LeavePeriodOrderByWithRelationInput | LeavePeriodOrderByWithRelationInput[]
    cursor?: LeavePeriodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeavePeriodScalarFieldEnum | LeavePeriodScalarFieldEnum[]
  }

  /**
   * Staff.skillsMatrix
   */
  export type Staff$skillsMatrixArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMatrix
     */
    select?: SkillMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMatrixInclude<ExtArgs> | null
    where?: SkillMatrixWhereInput
    orderBy?: SkillMatrixOrderByWithRelationInput | SkillMatrixOrderByWithRelationInput[]
    cursor?: SkillMatrixWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillMatrixScalarFieldEnum | SkillMatrixScalarFieldEnum[]
  }

  /**
   * Staff.swapsProposed
   */
  export type Staff$swapsProposedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSwap
     */
    select?: ShiftSwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftSwapInclude<ExtArgs> | null
    where?: ShiftSwapWhereInput
    orderBy?: ShiftSwapOrderByWithRelationInput | ShiftSwapOrderByWithRelationInput[]
    cursor?: ShiftSwapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShiftSwapScalarFieldEnum | ShiftSwapScalarFieldEnum[]
  }

  /**
   * Staff.swapsReceived
   */
  export type Staff$swapsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSwap
     */
    select?: ShiftSwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftSwapInclude<ExtArgs> | null
    where?: ShiftSwapWhereInput
    orderBy?: ShiftSwapOrderByWithRelationInput | ShiftSwapOrderByWithRelationInput[]
    cursor?: ShiftSwapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShiftSwapScalarFieldEnum | ShiftSwapScalarFieldEnum[]
  }

  /**
   * Staff without action
   */
  export type StaffDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
  }


  /**
   * Model RosterPeriod
   */

  export type AggregateRosterPeriod = {
    _count: RosterPeriodCountAggregateOutputType | null
    _avg: RosterPeriodAvgAggregateOutputType | null
    _sum: RosterPeriodSumAggregateOutputType | null
    _min: RosterPeriodMinAggregateOutputType | null
    _max: RosterPeriodMaxAggregateOutputType | null
  }

  export type RosterPeriodAvgAggregateOutputType = {
    weeks: number | null
  }

  export type RosterPeriodSumAggregateOutputType = {
    weeks: number | null
  }

  export type RosterPeriodMinAggregateOutputType = {
    id: string | null
    startDate: Date | null
    endDate: Date | null
    weeks: number | null
    weekMetadata: string | null
    staffSnapshot: string | null
    stats: string | null
    generatedAt: Date | null
    generatedBy: string | null
  }

  export type RosterPeriodMaxAggregateOutputType = {
    id: string | null
    startDate: Date | null
    endDate: Date | null
    weeks: number | null
    weekMetadata: string | null
    staffSnapshot: string | null
    stats: string | null
    generatedAt: Date | null
    generatedBy: string | null
  }

  export type RosterPeriodCountAggregateOutputType = {
    id: number
    startDate: number
    endDate: number
    weeks: number
    weekMetadata: number
    staffSnapshot: number
    stats: number
    generatedAt: number
    generatedBy: number
    _all: number
  }


  export type RosterPeriodAvgAggregateInputType = {
    weeks?: true
  }

  export type RosterPeriodSumAggregateInputType = {
    weeks?: true
  }

  export type RosterPeriodMinAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
    weeks?: true
    weekMetadata?: true
    staffSnapshot?: true
    stats?: true
    generatedAt?: true
    generatedBy?: true
  }

  export type RosterPeriodMaxAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
    weeks?: true
    weekMetadata?: true
    staffSnapshot?: true
    stats?: true
    generatedAt?: true
    generatedBy?: true
  }

  export type RosterPeriodCountAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
    weeks?: true
    weekMetadata?: true
    staffSnapshot?: true
    stats?: true
    generatedAt?: true
    generatedBy?: true
    _all?: true
  }

  export type RosterPeriodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RosterPeriod to aggregate.
     */
    where?: RosterPeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RosterPeriods to fetch.
     */
    orderBy?: RosterPeriodOrderByWithRelationInput | RosterPeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RosterPeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RosterPeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RosterPeriods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RosterPeriods
    **/
    _count?: true | RosterPeriodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RosterPeriodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RosterPeriodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RosterPeriodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RosterPeriodMaxAggregateInputType
  }

  export type GetRosterPeriodAggregateType<T extends RosterPeriodAggregateArgs> = {
        [P in keyof T & keyof AggregateRosterPeriod]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRosterPeriod[P]>
      : GetScalarType<T[P], AggregateRosterPeriod[P]>
  }




  export type RosterPeriodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RosterPeriodWhereInput
    orderBy?: RosterPeriodOrderByWithAggregationInput | RosterPeriodOrderByWithAggregationInput[]
    by: RosterPeriodScalarFieldEnum[] | RosterPeriodScalarFieldEnum
    having?: RosterPeriodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RosterPeriodCountAggregateInputType | true
    _avg?: RosterPeriodAvgAggregateInputType
    _sum?: RosterPeriodSumAggregateInputType
    _min?: RosterPeriodMinAggregateInputType
    _max?: RosterPeriodMaxAggregateInputType
  }

  export type RosterPeriodGroupByOutputType = {
    id: string
    startDate: Date
    endDate: Date
    weeks: number
    weekMetadata: string
    staffSnapshot: string
    stats: string
    generatedAt: Date
    generatedBy: string | null
    _count: RosterPeriodCountAggregateOutputType | null
    _avg: RosterPeriodAvgAggregateOutputType | null
    _sum: RosterPeriodSumAggregateOutputType | null
    _min: RosterPeriodMinAggregateOutputType | null
    _max: RosterPeriodMaxAggregateOutputType | null
  }

  type GetRosterPeriodGroupByPayload<T extends RosterPeriodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RosterPeriodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RosterPeriodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RosterPeriodGroupByOutputType[P]>
            : GetScalarType<T[P], RosterPeriodGroupByOutputType[P]>
        }
      >
    >


  export type RosterPeriodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    startDate?: boolean
    endDate?: boolean
    weeks?: boolean
    weekMetadata?: boolean
    staffSnapshot?: boolean
    stats?: boolean
    generatedAt?: boolean
    generatedBy?: boolean
    shifts?: boolean | RosterPeriod$shiftsArgs<ExtArgs>
    _count?: boolean | RosterPeriodCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rosterPeriod"]>

  export type RosterPeriodSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    startDate?: boolean
    endDate?: boolean
    weeks?: boolean
    weekMetadata?: boolean
    staffSnapshot?: boolean
    stats?: boolean
    generatedAt?: boolean
    generatedBy?: boolean
  }, ExtArgs["result"]["rosterPeriod"]>

  export type RosterPeriodSelectScalar = {
    id?: boolean
    startDate?: boolean
    endDate?: boolean
    weeks?: boolean
    weekMetadata?: boolean
    staffSnapshot?: boolean
    stats?: boolean
    generatedAt?: boolean
    generatedBy?: boolean
  }

  export type RosterPeriodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shifts?: boolean | RosterPeriod$shiftsArgs<ExtArgs>
    _count?: boolean | RosterPeriodCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RosterPeriodIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RosterPeriodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RosterPeriod"
    objects: {
      shifts: Prisma.$ShiftPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      startDate: Date
      endDate: Date
      weeks: number
      weekMetadata: string
      staffSnapshot: string
      stats: string
      generatedAt: Date
      generatedBy: string | null
    }, ExtArgs["result"]["rosterPeriod"]>
    composites: {}
  }

  type RosterPeriodGetPayload<S extends boolean | null | undefined | RosterPeriodDefaultArgs> = $Result.GetResult<Prisma.$RosterPeriodPayload, S>

  type RosterPeriodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RosterPeriodFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RosterPeriodCountAggregateInputType | true
    }

  export interface RosterPeriodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RosterPeriod'], meta: { name: 'RosterPeriod' } }
    /**
     * Find zero or one RosterPeriod that matches the filter.
     * @param {RosterPeriodFindUniqueArgs} args - Arguments to find a RosterPeriod
     * @example
     * // Get one RosterPeriod
     * const rosterPeriod = await prisma.rosterPeriod.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RosterPeriodFindUniqueArgs>(args: SelectSubset<T, RosterPeriodFindUniqueArgs<ExtArgs>>): Prisma__RosterPeriodClient<$Result.GetResult<Prisma.$RosterPeriodPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RosterPeriod that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RosterPeriodFindUniqueOrThrowArgs} args - Arguments to find a RosterPeriod
     * @example
     * // Get one RosterPeriod
     * const rosterPeriod = await prisma.rosterPeriod.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RosterPeriodFindUniqueOrThrowArgs>(args: SelectSubset<T, RosterPeriodFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RosterPeriodClient<$Result.GetResult<Prisma.$RosterPeriodPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RosterPeriod that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RosterPeriodFindFirstArgs} args - Arguments to find a RosterPeriod
     * @example
     * // Get one RosterPeriod
     * const rosterPeriod = await prisma.rosterPeriod.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RosterPeriodFindFirstArgs>(args?: SelectSubset<T, RosterPeriodFindFirstArgs<ExtArgs>>): Prisma__RosterPeriodClient<$Result.GetResult<Prisma.$RosterPeriodPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RosterPeriod that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RosterPeriodFindFirstOrThrowArgs} args - Arguments to find a RosterPeriod
     * @example
     * // Get one RosterPeriod
     * const rosterPeriod = await prisma.rosterPeriod.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RosterPeriodFindFirstOrThrowArgs>(args?: SelectSubset<T, RosterPeriodFindFirstOrThrowArgs<ExtArgs>>): Prisma__RosterPeriodClient<$Result.GetResult<Prisma.$RosterPeriodPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RosterPeriods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RosterPeriodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RosterPeriods
     * const rosterPeriods = await prisma.rosterPeriod.findMany()
     * 
     * // Get first 10 RosterPeriods
     * const rosterPeriods = await prisma.rosterPeriod.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rosterPeriodWithIdOnly = await prisma.rosterPeriod.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RosterPeriodFindManyArgs>(args?: SelectSubset<T, RosterPeriodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RosterPeriodPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RosterPeriod.
     * @param {RosterPeriodCreateArgs} args - Arguments to create a RosterPeriod.
     * @example
     * // Create one RosterPeriod
     * const RosterPeriod = await prisma.rosterPeriod.create({
     *   data: {
     *     // ... data to create a RosterPeriod
     *   }
     * })
     * 
     */
    create<T extends RosterPeriodCreateArgs>(args: SelectSubset<T, RosterPeriodCreateArgs<ExtArgs>>): Prisma__RosterPeriodClient<$Result.GetResult<Prisma.$RosterPeriodPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RosterPeriods.
     * @param {RosterPeriodCreateManyArgs} args - Arguments to create many RosterPeriods.
     * @example
     * // Create many RosterPeriods
     * const rosterPeriod = await prisma.rosterPeriod.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RosterPeriodCreateManyArgs>(args?: SelectSubset<T, RosterPeriodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RosterPeriods and returns the data saved in the database.
     * @param {RosterPeriodCreateManyAndReturnArgs} args - Arguments to create many RosterPeriods.
     * @example
     * // Create many RosterPeriods
     * const rosterPeriod = await prisma.rosterPeriod.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RosterPeriods and only return the `id`
     * const rosterPeriodWithIdOnly = await prisma.rosterPeriod.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RosterPeriodCreateManyAndReturnArgs>(args?: SelectSubset<T, RosterPeriodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RosterPeriodPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RosterPeriod.
     * @param {RosterPeriodDeleteArgs} args - Arguments to delete one RosterPeriod.
     * @example
     * // Delete one RosterPeriod
     * const RosterPeriod = await prisma.rosterPeriod.delete({
     *   where: {
     *     // ... filter to delete one RosterPeriod
     *   }
     * })
     * 
     */
    delete<T extends RosterPeriodDeleteArgs>(args: SelectSubset<T, RosterPeriodDeleteArgs<ExtArgs>>): Prisma__RosterPeriodClient<$Result.GetResult<Prisma.$RosterPeriodPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RosterPeriod.
     * @param {RosterPeriodUpdateArgs} args - Arguments to update one RosterPeriod.
     * @example
     * // Update one RosterPeriod
     * const rosterPeriod = await prisma.rosterPeriod.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RosterPeriodUpdateArgs>(args: SelectSubset<T, RosterPeriodUpdateArgs<ExtArgs>>): Prisma__RosterPeriodClient<$Result.GetResult<Prisma.$RosterPeriodPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RosterPeriods.
     * @param {RosterPeriodDeleteManyArgs} args - Arguments to filter RosterPeriods to delete.
     * @example
     * // Delete a few RosterPeriods
     * const { count } = await prisma.rosterPeriod.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RosterPeriodDeleteManyArgs>(args?: SelectSubset<T, RosterPeriodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RosterPeriods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RosterPeriodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RosterPeriods
     * const rosterPeriod = await prisma.rosterPeriod.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RosterPeriodUpdateManyArgs>(args: SelectSubset<T, RosterPeriodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RosterPeriod.
     * @param {RosterPeriodUpsertArgs} args - Arguments to update or create a RosterPeriod.
     * @example
     * // Update or create a RosterPeriod
     * const rosterPeriod = await prisma.rosterPeriod.upsert({
     *   create: {
     *     // ... data to create a RosterPeriod
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RosterPeriod we want to update
     *   }
     * })
     */
    upsert<T extends RosterPeriodUpsertArgs>(args: SelectSubset<T, RosterPeriodUpsertArgs<ExtArgs>>): Prisma__RosterPeriodClient<$Result.GetResult<Prisma.$RosterPeriodPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RosterPeriods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RosterPeriodCountArgs} args - Arguments to filter RosterPeriods to count.
     * @example
     * // Count the number of RosterPeriods
     * const count = await prisma.rosterPeriod.count({
     *   where: {
     *     // ... the filter for the RosterPeriods we want to count
     *   }
     * })
    **/
    count<T extends RosterPeriodCountArgs>(
      args?: Subset<T, RosterPeriodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RosterPeriodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RosterPeriod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RosterPeriodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RosterPeriodAggregateArgs>(args: Subset<T, RosterPeriodAggregateArgs>): Prisma.PrismaPromise<GetRosterPeriodAggregateType<T>>

    /**
     * Group by RosterPeriod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RosterPeriodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RosterPeriodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RosterPeriodGroupByArgs['orderBy'] }
        : { orderBy?: RosterPeriodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RosterPeriodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRosterPeriodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RosterPeriod model
   */
  readonly fields: RosterPeriodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RosterPeriod.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RosterPeriodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shifts<T extends RosterPeriod$shiftsArgs<ExtArgs> = {}>(args?: Subset<T, RosterPeriod$shiftsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RosterPeriod model
   */ 
  interface RosterPeriodFieldRefs {
    readonly id: FieldRef<"RosterPeriod", 'String'>
    readonly startDate: FieldRef<"RosterPeriod", 'DateTime'>
    readonly endDate: FieldRef<"RosterPeriod", 'DateTime'>
    readonly weeks: FieldRef<"RosterPeriod", 'Int'>
    readonly weekMetadata: FieldRef<"RosterPeriod", 'String'>
    readonly staffSnapshot: FieldRef<"RosterPeriod", 'String'>
    readonly stats: FieldRef<"RosterPeriod", 'String'>
    readonly generatedAt: FieldRef<"RosterPeriod", 'DateTime'>
    readonly generatedBy: FieldRef<"RosterPeriod", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RosterPeriod findUnique
   */
  export type RosterPeriodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RosterPeriod
     */
    select?: RosterPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RosterPeriodInclude<ExtArgs> | null
    /**
     * Filter, which RosterPeriod to fetch.
     */
    where: RosterPeriodWhereUniqueInput
  }

  /**
   * RosterPeriod findUniqueOrThrow
   */
  export type RosterPeriodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RosterPeriod
     */
    select?: RosterPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RosterPeriodInclude<ExtArgs> | null
    /**
     * Filter, which RosterPeriod to fetch.
     */
    where: RosterPeriodWhereUniqueInput
  }

  /**
   * RosterPeriod findFirst
   */
  export type RosterPeriodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RosterPeriod
     */
    select?: RosterPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RosterPeriodInclude<ExtArgs> | null
    /**
     * Filter, which RosterPeriod to fetch.
     */
    where?: RosterPeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RosterPeriods to fetch.
     */
    orderBy?: RosterPeriodOrderByWithRelationInput | RosterPeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RosterPeriods.
     */
    cursor?: RosterPeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RosterPeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RosterPeriods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RosterPeriods.
     */
    distinct?: RosterPeriodScalarFieldEnum | RosterPeriodScalarFieldEnum[]
  }

  /**
   * RosterPeriod findFirstOrThrow
   */
  export type RosterPeriodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RosterPeriod
     */
    select?: RosterPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RosterPeriodInclude<ExtArgs> | null
    /**
     * Filter, which RosterPeriod to fetch.
     */
    where?: RosterPeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RosterPeriods to fetch.
     */
    orderBy?: RosterPeriodOrderByWithRelationInput | RosterPeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RosterPeriods.
     */
    cursor?: RosterPeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RosterPeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RosterPeriods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RosterPeriods.
     */
    distinct?: RosterPeriodScalarFieldEnum | RosterPeriodScalarFieldEnum[]
  }

  /**
   * RosterPeriod findMany
   */
  export type RosterPeriodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RosterPeriod
     */
    select?: RosterPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RosterPeriodInclude<ExtArgs> | null
    /**
     * Filter, which RosterPeriods to fetch.
     */
    where?: RosterPeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RosterPeriods to fetch.
     */
    orderBy?: RosterPeriodOrderByWithRelationInput | RosterPeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RosterPeriods.
     */
    cursor?: RosterPeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RosterPeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RosterPeriods.
     */
    skip?: number
    distinct?: RosterPeriodScalarFieldEnum | RosterPeriodScalarFieldEnum[]
  }

  /**
   * RosterPeriod create
   */
  export type RosterPeriodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RosterPeriod
     */
    select?: RosterPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RosterPeriodInclude<ExtArgs> | null
    /**
     * The data needed to create a RosterPeriod.
     */
    data: XOR<RosterPeriodCreateInput, RosterPeriodUncheckedCreateInput>
  }

  /**
   * RosterPeriod createMany
   */
  export type RosterPeriodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RosterPeriods.
     */
    data: RosterPeriodCreateManyInput | RosterPeriodCreateManyInput[]
  }

  /**
   * RosterPeriod createManyAndReturn
   */
  export type RosterPeriodCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RosterPeriod
     */
    select?: RosterPeriodSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RosterPeriods.
     */
    data: RosterPeriodCreateManyInput | RosterPeriodCreateManyInput[]
  }

  /**
   * RosterPeriod update
   */
  export type RosterPeriodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RosterPeriod
     */
    select?: RosterPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RosterPeriodInclude<ExtArgs> | null
    /**
     * The data needed to update a RosterPeriod.
     */
    data: XOR<RosterPeriodUpdateInput, RosterPeriodUncheckedUpdateInput>
    /**
     * Choose, which RosterPeriod to update.
     */
    where: RosterPeriodWhereUniqueInput
  }

  /**
   * RosterPeriod updateMany
   */
  export type RosterPeriodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RosterPeriods.
     */
    data: XOR<RosterPeriodUpdateManyMutationInput, RosterPeriodUncheckedUpdateManyInput>
    /**
     * Filter which RosterPeriods to update
     */
    where?: RosterPeriodWhereInput
  }

  /**
   * RosterPeriod upsert
   */
  export type RosterPeriodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RosterPeriod
     */
    select?: RosterPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RosterPeriodInclude<ExtArgs> | null
    /**
     * The filter to search for the RosterPeriod to update in case it exists.
     */
    where: RosterPeriodWhereUniqueInput
    /**
     * In case the RosterPeriod found by the `where` argument doesn't exist, create a new RosterPeriod with this data.
     */
    create: XOR<RosterPeriodCreateInput, RosterPeriodUncheckedCreateInput>
    /**
     * In case the RosterPeriod was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RosterPeriodUpdateInput, RosterPeriodUncheckedUpdateInput>
  }

  /**
   * RosterPeriod delete
   */
  export type RosterPeriodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RosterPeriod
     */
    select?: RosterPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RosterPeriodInclude<ExtArgs> | null
    /**
     * Filter which RosterPeriod to delete.
     */
    where: RosterPeriodWhereUniqueInput
  }

  /**
   * RosterPeriod deleteMany
   */
  export type RosterPeriodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RosterPeriods to delete
     */
    where?: RosterPeriodWhereInput
  }

  /**
   * RosterPeriod.shifts
   */
  export type RosterPeriod$shiftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    where?: ShiftWhereInput
    orderBy?: ShiftOrderByWithRelationInput | ShiftOrderByWithRelationInput[]
    cursor?: ShiftWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShiftScalarFieldEnum | ShiftScalarFieldEnum[]
  }

  /**
   * RosterPeriod without action
   */
  export type RosterPeriodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RosterPeriod
     */
    select?: RosterPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RosterPeriodInclude<ExtArgs> | null
  }


  /**
   * Model Shift
   */

  export type AggregateShift = {
    _count: ShiftCountAggregateOutputType | null
    _avg: ShiftAvgAggregateOutputType | null
    _sum: ShiftSumAggregateOutputType | null
    _min: ShiftMinAggregateOutputType | null
    _max: ShiftMaxAggregateOutputType | null
  }

  export type ShiftAvgAggregateOutputType = {
    week: number | null
  }

  export type ShiftSumAggregateOutputType = {
    week: number | null
  }

  export type ShiftMinAggregateOutputType = {
    id: string | null
    periodId: string | null
    staffId: string | null
    week: number | null
    day: string | null
    shiftType: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShiftMaxAggregateOutputType = {
    id: string | null
    periodId: string | null
    staffId: string | null
    week: number | null
    day: string | null
    shiftType: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShiftCountAggregateOutputType = {
    id: number
    periodId: number
    staffId: number
    week: number
    day: number
    shiftType: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShiftAvgAggregateInputType = {
    week?: true
  }

  export type ShiftSumAggregateInputType = {
    week?: true
  }

  export type ShiftMinAggregateInputType = {
    id?: true
    periodId?: true
    staffId?: true
    week?: true
    day?: true
    shiftType?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShiftMaxAggregateInputType = {
    id?: true
    periodId?: true
    staffId?: true
    week?: true
    day?: true
    shiftType?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShiftCountAggregateInputType = {
    id?: true
    periodId?: true
    staffId?: true
    week?: true
    day?: true
    shiftType?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShiftAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shift to aggregate.
     */
    where?: ShiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shifts to fetch.
     */
    orderBy?: ShiftOrderByWithRelationInput | ShiftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shifts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shifts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shifts
    **/
    _count?: true | ShiftCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShiftAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShiftSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShiftMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShiftMaxAggregateInputType
  }

  export type GetShiftAggregateType<T extends ShiftAggregateArgs> = {
        [P in keyof T & keyof AggregateShift]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShift[P]>
      : GetScalarType<T[P], AggregateShift[P]>
  }




  export type ShiftGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftWhereInput
    orderBy?: ShiftOrderByWithAggregationInput | ShiftOrderByWithAggregationInput[]
    by: ShiftScalarFieldEnum[] | ShiftScalarFieldEnum
    having?: ShiftScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShiftCountAggregateInputType | true
    _avg?: ShiftAvgAggregateInputType
    _sum?: ShiftSumAggregateInputType
    _min?: ShiftMinAggregateInputType
    _max?: ShiftMaxAggregateInputType
  }

  export type ShiftGroupByOutputType = {
    id: string
    periodId: string
    staffId: string
    week: number
    day: string
    shiftType: string
    status: string
    createdAt: Date
    updatedAt: Date
    _count: ShiftCountAggregateOutputType | null
    _avg: ShiftAvgAggregateOutputType | null
    _sum: ShiftSumAggregateOutputType | null
    _min: ShiftMinAggregateOutputType | null
    _max: ShiftMaxAggregateOutputType | null
  }

  type GetShiftGroupByPayload<T extends ShiftGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShiftGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShiftGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShiftGroupByOutputType[P]>
            : GetScalarType<T[P], ShiftGroupByOutputType[P]>
        }
      >
    >


  export type ShiftSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    periodId?: boolean
    staffId?: boolean
    week?: boolean
    day?: boolean
    shiftType?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    period?: boolean | RosterPeriodDefaultArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
    swaps?: boolean | Shift$swapsArgs<ExtArgs>
    _count?: boolean | ShiftCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shift"]>

  export type ShiftSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    periodId?: boolean
    staffId?: boolean
    week?: boolean
    day?: boolean
    shiftType?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    period?: boolean | RosterPeriodDefaultArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shift"]>

  export type ShiftSelectScalar = {
    id?: boolean
    periodId?: boolean
    staffId?: boolean
    week?: boolean
    day?: boolean
    shiftType?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ShiftInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    period?: boolean | RosterPeriodDefaultArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
    swaps?: boolean | Shift$swapsArgs<ExtArgs>
    _count?: boolean | ShiftCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ShiftIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    period?: boolean | RosterPeriodDefaultArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }

  export type $ShiftPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Shift"
    objects: {
      period: Prisma.$RosterPeriodPayload<ExtArgs>
      staff: Prisma.$StaffPayload<ExtArgs>
      swaps: Prisma.$ShiftSwapPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      periodId: string
      staffId: string
      week: number
      day: string
      shiftType: string
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["shift"]>
    composites: {}
  }

  type ShiftGetPayload<S extends boolean | null | undefined | ShiftDefaultArgs> = $Result.GetResult<Prisma.$ShiftPayload, S>

  type ShiftCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShiftFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShiftCountAggregateInputType | true
    }

  export interface ShiftDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shift'], meta: { name: 'Shift' } }
    /**
     * Find zero or one Shift that matches the filter.
     * @param {ShiftFindUniqueArgs} args - Arguments to find a Shift
     * @example
     * // Get one Shift
     * const shift = await prisma.shift.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShiftFindUniqueArgs>(args: SelectSubset<T, ShiftFindUniqueArgs<ExtArgs>>): Prisma__ShiftClient<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Shift that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShiftFindUniqueOrThrowArgs} args - Arguments to find a Shift
     * @example
     * // Get one Shift
     * const shift = await prisma.shift.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShiftFindUniqueOrThrowArgs>(args: SelectSubset<T, ShiftFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShiftClient<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Shift that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftFindFirstArgs} args - Arguments to find a Shift
     * @example
     * // Get one Shift
     * const shift = await prisma.shift.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShiftFindFirstArgs>(args?: SelectSubset<T, ShiftFindFirstArgs<ExtArgs>>): Prisma__ShiftClient<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Shift that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftFindFirstOrThrowArgs} args - Arguments to find a Shift
     * @example
     * // Get one Shift
     * const shift = await prisma.shift.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShiftFindFirstOrThrowArgs>(args?: SelectSubset<T, ShiftFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShiftClient<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Shifts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shifts
     * const shifts = await prisma.shift.findMany()
     * 
     * // Get first 10 Shifts
     * const shifts = await prisma.shift.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shiftWithIdOnly = await prisma.shift.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShiftFindManyArgs>(args?: SelectSubset<T, ShiftFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Shift.
     * @param {ShiftCreateArgs} args - Arguments to create a Shift.
     * @example
     * // Create one Shift
     * const Shift = await prisma.shift.create({
     *   data: {
     *     // ... data to create a Shift
     *   }
     * })
     * 
     */
    create<T extends ShiftCreateArgs>(args: SelectSubset<T, ShiftCreateArgs<ExtArgs>>): Prisma__ShiftClient<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Shifts.
     * @param {ShiftCreateManyArgs} args - Arguments to create many Shifts.
     * @example
     * // Create many Shifts
     * const shift = await prisma.shift.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShiftCreateManyArgs>(args?: SelectSubset<T, ShiftCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Shifts and returns the data saved in the database.
     * @param {ShiftCreateManyAndReturnArgs} args - Arguments to create many Shifts.
     * @example
     * // Create many Shifts
     * const shift = await prisma.shift.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Shifts and only return the `id`
     * const shiftWithIdOnly = await prisma.shift.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShiftCreateManyAndReturnArgs>(args?: SelectSubset<T, ShiftCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Shift.
     * @param {ShiftDeleteArgs} args - Arguments to delete one Shift.
     * @example
     * // Delete one Shift
     * const Shift = await prisma.shift.delete({
     *   where: {
     *     // ... filter to delete one Shift
     *   }
     * })
     * 
     */
    delete<T extends ShiftDeleteArgs>(args: SelectSubset<T, ShiftDeleteArgs<ExtArgs>>): Prisma__ShiftClient<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Shift.
     * @param {ShiftUpdateArgs} args - Arguments to update one Shift.
     * @example
     * // Update one Shift
     * const shift = await prisma.shift.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShiftUpdateArgs>(args: SelectSubset<T, ShiftUpdateArgs<ExtArgs>>): Prisma__ShiftClient<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Shifts.
     * @param {ShiftDeleteManyArgs} args - Arguments to filter Shifts to delete.
     * @example
     * // Delete a few Shifts
     * const { count } = await prisma.shift.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShiftDeleteManyArgs>(args?: SelectSubset<T, ShiftDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shifts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shifts
     * const shift = await prisma.shift.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShiftUpdateManyArgs>(args: SelectSubset<T, ShiftUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Shift.
     * @param {ShiftUpsertArgs} args - Arguments to update or create a Shift.
     * @example
     * // Update or create a Shift
     * const shift = await prisma.shift.upsert({
     *   create: {
     *     // ... data to create a Shift
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shift we want to update
     *   }
     * })
     */
    upsert<T extends ShiftUpsertArgs>(args: SelectSubset<T, ShiftUpsertArgs<ExtArgs>>): Prisma__ShiftClient<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Shifts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftCountArgs} args - Arguments to filter Shifts to count.
     * @example
     * // Count the number of Shifts
     * const count = await prisma.shift.count({
     *   where: {
     *     // ... the filter for the Shifts we want to count
     *   }
     * })
    **/
    count<T extends ShiftCountArgs>(
      args?: Subset<T, ShiftCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShiftCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shift.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShiftAggregateArgs>(args: Subset<T, ShiftAggregateArgs>): Prisma.PrismaPromise<GetShiftAggregateType<T>>

    /**
     * Group by Shift.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShiftGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShiftGroupByArgs['orderBy'] }
        : { orderBy?: ShiftGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShiftGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShiftGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Shift model
   */
  readonly fields: ShiftFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shift.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShiftClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    period<T extends RosterPeriodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RosterPeriodDefaultArgs<ExtArgs>>): Prisma__RosterPeriodClient<$Result.GetResult<Prisma.$RosterPeriodPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    staff<T extends StaffDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffDefaultArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    swaps<T extends Shift$swapsArgs<ExtArgs> = {}>(args?: Subset<T, Shift$swapsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftSwapPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Shift model
   */ 
  interface ShiftFieldRefs {
    readonly id: FieldRef<"Shift", 'String'>
    readonly periodId: FieldRef<"Shift", 'String'>
    readonly staffId: FieldRef<"Shift", 'String'>
    readonly week: FieldRef<"Shift", 'Int'>
    readonly day: FieldRef<"Shift", 'String'>
    readonly shiftType: FieldRef<"Shift", 'String'>
    readonly status: FieldRef<"Shift", 'String'>
    readonly createdAt: FieldRef<"Shift", 'DateTime'>
    readonly updatedAt: FieldRef<"Shift", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Shift findUnique
   */
  export type ShiftFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * Filter, which Shift to fetch.
     */
    where: ShiftWhereUniqueInput
  }

  /**
   * Shift findUniqueOrThrow
   */
  export type ShiftFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * Filter, which Shift to fetch.
     */
    where: ShiftWhereUniqueInput
  }

  /**
   * Shift findFirst
   */
  export type ShiftFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * Filter, which Shift to fetch.
     */
    where?: ShiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shifts to fetch.
     */
    orderBy?: ShiftOrderByWithRelationInput | ShiftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shifts.
     */
    cursor?: ShiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shifts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shifts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shifts.
     */
    distinct?: ShiftScalarFieldEnum | ShiftScalarFieldEnum[]
  }

  /**
   * Shift findFirstOrThrow
   */
  export type ShiftFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * Filter, which Shift to fetch.
     */
    where?: ShiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shifts to fetch.
     */
    orderBy?: ShiftOrderByWithRelationInput | ShiftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shifts.
     */
    cursor?: ShiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shifts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shifts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shifts.
     */
    distinct?: ShiftScalarFieldEnum | ShiftScalarFieldEnum[]
  }

  /**
   * Shift findMany
   */
  export type ShiftFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * Filter, which Shifts to fetch.
     */
    where?: ShiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shifts to fetch.
     */
    orderBy?: ShiftOrderByWithRelationInput | ShiftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shifts.
     */
    cursor?: ShiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shifts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shifts.
     */
    skip?: number
    distinct?: ShiftScalarFieldEnum | ShiftScalarFieldEnum[]
  }

  /**
   * Shift create
   */
  export type ShiftCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * The data needed to create a Shift.
     */
    data: XOR<ShiftCreateInput, ShiftUncheckedCreateInput>
  }

  /**
   * Shift createMany
   */
  export type ShiftCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Shifts.
     */
    data: ShiftCreateManyInput | ShiftCreateManyInput[]
  }

  /**
   * Shift createManyAndReturn
   */
  export type ShiftCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Shifts.
     */
    data: ShiftCreateManyInput | ShiftCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Shift update
   */
  export type ShiftUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * The data needed to update a Shift.
     */
    data: XOR<ShiftUpdateInput, ShiftUncheckedUpdateInput>
    /**
     * Choose, which Shift to update.
     */
    where: ShiftWhereUniqueInput
  }

  /**
   * Shift updateMany
   */
  export type ShiftUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Shifts.
     */
    data: XOR<ShiftUpdateManyMutationInput, ShiftUncheckedUpdateManyInput>
    /**
     * Filter which Shifts to update
     */
    where?: ShiftWhereInput
  }

  /**
   * Shift upsert
   */
  export type ShiftUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * The filter to search for the Shift to update in case it exists.
     */
    where: ShiftWhereUniqueInput
    /**
     * In case the Shift found by the `where` argument doesn't exist, create a new Shift with this data.
     */
    create: XOR<ShiftCreateInput, ShiftUncheckedCreateInput>
    /**
     * In case the Shift was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShiftUpdateInput, ShiftUncheckedUpdateInput>
  }

  /**
   * Shift delete
   */
  export type ShiftDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
    /**
     * Filter which Shift to delete.
     */
    where: ShiftWhereUniqueInput
  }

  /**
   * Shift deleteMany
   */
  export type ShiftDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shifts to delete
     */
    where?: ShiftWhereInput
  }

  /**
   * Shift.swaps
   */
  export type Shift$swapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSwap
     */
    select?: ShiftSwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftSwapInclude<ExtArgs> | null
    where?: ShiftSwapWhereInput
    orderBy?: ShiftSwapOrderByWithRelationInput | ShiftSwapOrderByWithRelationInput[]
    cursor?: ShiftSwapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShiftSwapScalarFieldEnum | ShiftSwapScalarFieldEnum[]
  }

  /**
   * Shift without action
   */
  export type ShiftDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shift
     */
    select?: ShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftInclude<ExtArgs> | null
  }


  /**
   * Model LeaveRequest
   */

  export type AggregateLeaveRequest = {
    _count: LeaveRequestCountAggregateOutputType | null
    _min: LeaveRequestMinAggregateOutputType | null
    _max: LeaveRequestMaxAggregateOutputType | null
  }

  export type LeaveRequestMinAggregateOutputType = {
    id: string | null
    staffId: string | null
    type: string | null
    startDate: Date | null
    endDate: Date | null
    reason: string | null
    status: string | null
    submittedAt: Date | null
    reviewedAt: Date | null
    reviewedBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LeaveRequestMaxAggregateOutputType = {
    id: string | null
    staffId: string | null
    type: string | null
    startDate: Date | null
    endDate: Date | null
    reason: string | null
    status: string | null
    submittedAt: Date | null
    reviewedAt: Date | null
    reviewedBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LeaveRequestCountAggregateOutputType = {
    id: number
    staffId: number
    type: number
    startDate: number
    endDate: number
    reason: number
    status: number
    submittedAt: number
    reviewedAt: number
    reviewedBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LeaveRequestMinAggregateInputType = {
    id?: true
    staffId?: true
    type?: true
    startDate?: true
    endDate?: true
    reason?: true
    status?: true
    submittedAt?: true
    reviewedAt?: true
    reviewedBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LeaveRequestMaxAggregateInputType = {
    id?: true
    staffId?: true
    type?: true
    startDate?: true
    endDate?: true
    reason?: true
    status?: true
    submittedAt?: true
    reviewedAt?: true
    reviewedBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LeaveRequestCountAggregateInputType = {
    id?: true
    staffId?: true
    type?: true
    startDate?: true
    endDate?: true
    reason?: true
    status?: true
    submittedAt?: true
    reviewedAt?: true
    reviewedBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LeaveRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveRequest to aggregate.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeaveRequests
    **/
    _count?: true | LeaveRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeaveRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeaveRequestMaxAggregateInputType
  }

  export type GetLeaveRequestAggregateType<T extends LeaveRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateLeaveRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeaveRequest[P]>
      : GetScalarType<T[P], AggregateLeaveRequest[P]>
  }




  export type LeaveRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveRequestWhereInput
    orderBy?: LeaveRequestOrderByWithAggregationInput | LeaveRequestOrderByWithAggregationInput[]
    by: LeaveRequestScalarFieldEnum[] | LeaveRequestScalarFieldEnum
    having?: LeaveRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeaveRequestCountAggregateInputType | true
    _min?: LeaveRequestMinAggregateInputType
    _max?: LeaveRequestMaxAggregateInputType
  }

  export type LeaveRequestGroupByOutputType = {
    id: string
    staffId: string
    type: string
    startDate: Date
    endDate: Date
    reason: string | null
    status: string
    submittedAt: Date
    reviewedAt: Date | null
    reviewedBy: string | null
    createdAt: Date
    updatedAt: Date
    _count: LeaveRequestCountAggregateOutputType | null
    _min: LeaveRequestMinAggregateOutputType | null
    _max: LeaveRequestMaxAggregateOutputType | null
  }

  type GetLeaveRequestGroupByPayload<T extends LeaveRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeaveRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeaveRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeaveRequestGroupByOutputType[P]>
            : GetScalarType<T[P], LeaveRequestGroupByOutputType[P]>
        }
      >
    >


  export type LeaveRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    type?: boolean
    startDate?: boolean
    endDate?: boolean
    reason?: boolean
    status?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveRequest"]>

  export type LeaveRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    type?: boolean
    startDate?: boolean
    endDate?: boolean
    reason?: boolean
    status?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveRequest"]>

  export type LeaveRequestSelectScalar = {
    id?: boolean
    staffId?: boolean
    type?: boolean
    startDate?: boolean
    endDate?: boolean
    reason?: boolean
    status?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LeaveRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }
  export type LeaveRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }

  export type $LeaveRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeaveRequest"
    objects: {
      staff: Prisma.$StaffPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      staffId: string
      type: string
      startDate: Date
      endDate: Date
      reason: string | null
      status: string
      submittedAt: Date
      reviewedAt: Date | null
      reviewedBy: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["leaveRequest"]>
    composites: {}
  }

  type LeaveRequestGetPayload<S extends boolean | null | undefined | LeaveRequestDefaultArgs> = $Result.GetResult<Prisma.$LeaveRequestPayload, S>

  type LeaveRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeaveRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeaveRequestCountAggregateInputType | true
    }

  export interface LeaveRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeaveRequest'], meta: { name: 'LeaveRequest' } }
    /**
     * Find zero or one LeaveRequest that matches the filter.
     * @param {LeaveRequestFindUniqueArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeaveRequestFindUniqueArgs>(args: SelectSubset<T, LeaveRequestFindUniqueArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LeaveRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeaveRequestFindUniqueOrThrowArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeaveRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, LeaveRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LeaveRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestFindFirstArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeaveRequestFindFirstArgs>(args?: SelectSubset<T, LeaveRequestFindFirstArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LeaveRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestFindFirstOrThrowArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeaveRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, LeaveRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LeaveRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeaveRequests
     * const leaveRequests = await prisma.leaveRequest.findMany()
     * 
     * // Get first 10 LeaveRequests
     * const leaveRequests = await prisma.leaveRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaveRequestWithIdOnly = await prisma.leaveRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeaveRequestFindManyArgs>(args?: SelectSubset<T, LeaveRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LeaveRequest.
     * @param {LeaveRequestCreateArgs} args - Arguments to create a LeaveRequest.
     * @example
     * // Create one LeaveRequest
     * const LeaveRequest = await prisma.leaveRequest.create({
     *   data: {
     *     // ... data to create a LeaveRequest
     *   }
     * })
     * 
     */
    create<T extends LeaveRequestCreateArgs>(args: SelectSubset<T, LeaveRequestCreateArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LeaveRequests.
     * @param {LeaveRequestCreateManyArgs} args - Arguments to create many LeaveRequests.
     * @example
     * // Create many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeaveRequestCreateManyArgs>(args?: SelectSubset<T, LeaveRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeaveRequests and returns the data saved in the database.
     * @param {LeaveRequestCreateManyAndReturnArgs} args - Arguments to create many LeaveRequests.
     * @example
     * // Create many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeaveRequests and only return the `id`
     * const leaveRequestWithIdOnly = await prisma.leaveRequest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeaveRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, LeaveRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LeaveRequest.
     * @param {LeaveRequestDeleteArgs} args - Arguments to delete one LeaveRequest.
     * @example
     * // Delete one LeaveRequest
     * const LeaveRequest = await prisma.leaveRequest.delete({
     *   where: {
     *     // ... filter to delete one LeaveRequest
     *   }
     * })
     * 
     */
    delete<T extends LeaveRequestDeleteArgs>(args: SelectSubset<T, LeaveRequestDeleteArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LeaveRequest.
     * @param {LeaveRequestUpdateArgs} args - Arguments to update one LeaveRequest.
     * @example
     * // Update one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeaveRequestUpdateArgs>(args: SelectSubset<T, LeaveRequestUpdateArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LeaveRequests.
     * @param {LeaveRequestDeleteManyArgs} args - Arguments to filter LeaveRequests to delete.
     * @example
     * // Delete a few LeaveRequests
     * const { count } = await prisma.leaveRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeaveRequestDeleteManyArgs>(args?: SelectSubset<T, LeaveRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaveRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeaveRequestUpdateManyArgs>(args: SelectSubset<T, LeaveRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LeaveRequest.
     * @param {LeaveRequestUpsertArgs} args - Arguments to update or create a LeaveRequest.
     * @example
     * // Update or create a LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.upsert({
     *   create: {
     *     // ... data to create a LeaveRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeaveRequest we want to update
     *   }
     * })
     */
    upsert<T extends LeaveRequestUpsertArgs>(args: SelectSubset<T, LeaveRequestUpsertArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LeaveRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestCountArgs} args - Arguments to filter LeaveRequests to count.
     * @example
     * // Count the number of LeaveRequests
     * const count = await prisma.leaveRequest.count({
     *   where: {
     *     // ... the filter for the LeaveRequests we want to count
     *   }
     * })
    **/
    count<T extends LeaveRequestCountArgs>(
      args?: Subset<T, LeaveRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaveRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeaveRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaveRequestAggregateArgs>(args: Subset<T, LeaveRequestAggregateArgs>): Prisma.PrismaPromise<GetLeaveRequestAggregateType<T>>

    /**
     * Group by LeaveRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeaveRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeaveRequestGroupByArgs['orderBy'] }
        : { orderBy?: LeaveRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeaveRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaveRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeaveRequest model
   */
  readonly fields: LeaveRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeaveRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeaveRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    staff<T extends StaffDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffDefaultArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeaveRequest model
   */ 
  interface LeaveRequestFieldRefs {
    readonly id: FieldRef<"LeaveRequest", 'String'>
    readonly staffId: FieldRef<"LeaveRequest", 'String'>
    readonly type: FieldRef<"LeaveRequest", 'String'>
    readonly startDate: FieldRef<"LeaveRequest", 'DateTime'>
    readonly endDate: FieldRef<"LeaveRequest", 'DateTime'>
    readonly reason: FieldRef<"LeaveRequest", 'String'>
    readonly status: FieldRef<"LeaveRequest", 'String'>
    readonly submittedAt: FieldRef<"LeaveRequest", 'DateTime'>
    readonly reviewedAt: FieldRef<"LeaveRequest", 'DateTime'>
    readonly reviewedBy: FieldRef<"LeaveRequest", 'String'>
    readonly createdAt: FieldRef<"LeaveRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"LeaveRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LeaveRequest findUnique
   */
  export type LeaveRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest findUniqueOrThrow
   */
  export type LeaveRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest findFirst
   */
  export type LeaveRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveRequests.
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveRequests.
     */
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * LeaveRequest findFirstOrThrow
   */
  export type LeaveRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveRequests.
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveRequests.
     */
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * LeaveRequest findMany
   */
  export type LeaveRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequests to fetch.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeaveRequests.
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * LeaveRequest create
   */
  export type LeaveRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a LeaveRequest.
     */
    data: XOR<LeaveRequestCreateInput, LeaveRequestUncheckedCreateInput>
  }

  /**
   * LeaveRequest createMany
   */
  export type LeaveRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeaveRequests.
     */
    data: LeaveRequestCreateManyInput | LeaveRequestCreateManyInput[]
  }

  /**
   * LeaveRequest createManyAndReturn
   */
  export type LeaveRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LeaveRequests.
     */
    data: LeaveRequestCreateManyInput | LeaveRequestCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeaveRequest update
   */
  export type LeaveRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a LeaveRequest.
     */
    data: XOR<LeaveRequestUpdateInput, LeaveRequestUncheckedUpdateInput>
    /**
     * Choose, which LeaveRequest to update.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest updateMany
   */
  export type LeaveRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeaveRequests.
     */
    data: XOR<LeaveRequestUpdateManyMutationInput, LeaveRequestUncheckedUpdateManyInput>
    /**
     * Filter which LeaveRequests to update
     */
    where?: LeaveRequestWhereInput
  }

  /**
   * LeaveRequest upsert
   */
  export type LeaveRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the LeaveRequest to update in case it exists.
     */
    where: LeaveRequestWhereUniqueInput
    /**
     * In case the LeaveRequest found by the `where` argument doesn't exist, create a new LeaveRequest with this data.
     */
    create: XOR<LeaveRequestCreateInput, LeaveRequestUncheckedCreateInput>
    /**
     * In case the LeaveRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeaveRequestUpdateInput, LeaveRequestUncheckedUpdateInput>
  }

  /**
   * LeaveRequest delete
   */
  export type LeaveRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter which LeaveRequest to delete.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest deleteMany
   */
  export type LeaveRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveRequests to delete
     */
    where?: LeaveRequestWhereInput
  }

  /**
   * LeaveRequest without action
   */
  export type LeaveRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
  }


  /**
   * Model LeaveDay
   */

  export type AggregateLeaveDay = {
    _count: LeaveDayCountAggregateOutputType | null
    _min: LeaveDayMinAggregateOutputType | null
    _max: LeaveDayMaxAggregateOutputType | null
  }

  export type LeaveDayMinAggregateOutputType = {
    id: string | null
    staffId: string | null
    date: Date | null
    reason: string | null
    createdAt: Date | null
  }

  export type LeaveDayMaxAggregateOutputType = {
    id: string | null
    staffId: string | null
    date: Date | null
    reason: string | null
    createdAt: Date | null
  }

  export type LeaveDayCountAggregateOutputType = {
    id: number
    staffId: number
    date: number
    reason: number
    createdAt: number
    _all: number
  }


  export type LeaveDayMinAggregateInputType = {
    id?: true
    staffId?: true
    date?: true
    reason?: true
    createdAt?: true
  }

  export type LeaveDayMaxAggregateInputType = {
    id?: true
    staffId?: true
    date?: true
    reason?: true
    createdAt?: true
  }

  export type LeaveDayCountAggregateInputType = {
    id?: true
    staffId?: true
    date?: true
    reason?: true
    createdAt?: true
    _all?: true
  }

  export type LeaveDayAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveDay to aggregate.
     */
    where?: LeaveDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveDays to fetch.
     */
    orderBy?: LeaveDayOrderByWithRelationInput | LeaveDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeaveDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeaveDays
    **/
    _count?: true | LeaveDayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeaveDayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeaveDayMaxAggregateInputType
  }

  export type GetLeaveDayAggregateType<T extends LeaveDayAggregateArgs> = {
        [P in keyof T & keyof AggregateLeaveDay]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeaveDay[P]>
      : GetScalarType<T[P], AggregateLeaveDay[P]>
  }




  export type LeaveDayGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveDayWhereInput
    orderBy?: LeaveDayOrderByWithAggregationInput | LeaveDayOrderByWithAggregationInput[]
    by: LeaveDayScalarFieldEnum[] | LeaveDayScalarFieldEnum
    having?: LeaveDayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeaveDayCountAggregateInputType | true
    _min?: LeaveDayMinAggregateInputType
    _max?: LeaveDayMaxAggregateInputType
  }

  export type LeaveDayGroupByOutputType = {
    id: string
    staffId: string
    date: Date
    reason: string | null
    createdAt: Date
    _count: LeaveDayCountAggregateOutputType | null
    _min: LeaveDayMinAggregateOutputType | null
    _max: LeaveDayMaxAggregateOutputType | null
  }

  type GetLeaveDayGroupByPayload<T extends LeaveDayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeaveDayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeaveDayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeaveDayGroupByOutputType[P]>
            : GetScalarType<T[P], LeaveDayGroupByOutputType[P]>
        }
      >
    >


  export type LeaveDaySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    date?: boolean
    reason?: boolean
    createdAt?: boolean
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveDay"]>

  export type LeaveDaySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    date?: boolean
    reason?: boolean
    createdAt?: boolean
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveDay"]>

  export type LeaveDaySelectScalar = {
    id?: boolean
    staffId?: boolean
    date?: boolean
    reason?: boolean
    createdAt?: boolean
  }

  export type LeaveDayInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }
  export type LeaveDayIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }

  export type $LeaveDayPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeaveDay"
    objects: {
      staff: Prisma.$StaffPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      staffId: string
      date: Date
      reason: string | null
      createdAt: Date
    }, ExtArgs["result"]["leaveDay"]>
    composites: {}
  }

  type LeaveDayGetPayload<S extends boolean | null | undefined | LeaveDayDefaultArgs> = $Result.GetResult<Prisma.$LeaveDayPayload, S>

  type LeaveDayCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeaveDayFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeaveDayCountAggregateInputType | true
    }

  export interface LeaveDayDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeaveDay'], meta: { name: 'LeaveDay' } }
    /**
     * Find zero or one LeaveDay that matches the filter.
     * @param {LeaveDayFindUniqueArgs} args - Arguments to find a LeaveDay
     * @example
     * // Get one LeaveDay
     * const leaveDay = await prisma.leaveDay.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeaveDayFindUniqueArgs>(args: SelectSubset<T, LeaveDayFindUniqueArgs<ExtArgs>>): Prisma__LeaveDayClient<$Result.GetResult<Prisma.$LeaveDayPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LeaveDay that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeaveDayFindUniqueOrThrowArgs} args - Arguments to find a LeaveDay
     * @example
     * // Get one LeaveDay
     * const leaveDay = await prisma.leaveDay.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeaveDayFindUniqueOrThrowArgs>(args: SelectSubset<T, LeaveDayFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeaveDayClient<$Result.GetResult<Prisma.$LeaveDayPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LeaveDay that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveDayFindFirstArgs} args - Arguments to find a LeaveDay
     * @example
     * // Get one LeaveDay
     * const leaveDay = await prisma.leaveDay.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeaveDayFindFirstArgs>(args?: SelectSubset<T, LeaveDayFindFirstArgs<ExtArgs>>): Prisma__LeaveDayClient<$Result.GetResult<Prisma.$LeaveDayPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LeaveDay that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveDayFindFirstOrThrowArgs} args - Arguments to find a LeaveDay
     * @example
     * // Get one LeaveDay
     * const leaveDay = await prisma.leaveDay.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeaveDayFindFirstOrThrowArgs>(args?: SelectSubset<T, LeaveDayFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeaveDayClient<$Result.GetResult<Prisma.$LeaveDayPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LeaveDays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveDayFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeaveDays
     * const leaveDays = await prisma.leaveDay.findMany()
     * 
     * // Get first 10 LeaveDays
     * const leaveDays = await prisma.leaveDay.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaveDayWithIdOnly = await prisma.leaveDay.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeaveDayFindManyArgs>(args?: SelectSubset<T, LeaveDayFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveDayPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LeaveDay.
     * @param {LeaveDayCreateArgs} args - Arguments to create a LeaveDay.
     * @example
     * // Create one LeaveDay
     * const LeaveDay = await prisma.leaveDay.create({
     *   data: {
     *     // ... data to create a LeaveDay
     *   }
     * })
     * 
     */
    create<T extends LeaveDayCreateArgs>(args: SelectSubset<T, LeaveDayCreateArgs<ExtArgs>>): Prisma__LeaveDayClient<$Result.GetResult<Prisma.$LeaveDayPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LeaveDays.
     * @param {LeaveDayCreateManyArgs} args - Arguments to create many LeaveDays.
     * @example
     * // Create many LeaveDays
     * const leaveDay = await prisma.leaveDay.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeaveDayCreateManyArgs>(args?: SelectSubset<T, LeaveDayCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeaveDays and returns the data saved in the database.
     * @param {LeaveDayCreateManyAndReturnArgs} args - Arguments to create many LeaveDays.
     * @example
     * // Create many LeaveDays
     * const leaveDay = await prisma.leaveDay.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeaveDays and only return the `id`
     * const leaveDayWithIdOnly = await prisma.leaveDay.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeaveDayCreateManyAndReturnArgs>(args?: SelectSubset<T, LeaveDayCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveDayPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LeaveDay.
     * @param {LeaveDayDeleteArgs} args - Arguments to delete one LeaveDay.
     * @example
     * // Delete one LeaveDay
     * const LeaveDay = await prisma.leaveDay.delete({
     *   where: {
     *     // ... filter to delete one LeaveDay
     *   }
     * })
     * 
     */
    delete<T extends LeaveDayDeleteArgs>(args: SelectSubset<T, LeaveDayDeleteArgs<ExtArgs>>): Prisma__LeaveDayClient<$Result.GetResult<Prisma.$LeaveDayPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LeaveDay.
     * @param {LeaveDayUpdateArgs} args - Arguments to update one LeaveDay.
     * @example
     * // Update one LeaveDay
     * const leaveDay = await prisma.leaveDay.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeaveDayUpdateArgs>(args: SelectSubset<T, LeaveDayUpdateArgs<ExtArgs>>): Prisma__LeaveDayClient<$Result.GetResult<Prisma.$LeaveDayPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LeaveDays.
     * @param {LeaveDayDeleteManyArgs} args - Arguments to filter LeaveDays to delete.
     * @example
     * // Delete a few LeaveDays
     * const { count } = await prisma.leaveDay.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeaveDayDeleteManyArgs>(args?: SelectSubset<T, LeaveDayDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaveDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveDayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeaveDays
     * const leaveDay = await prisma.leaveDay.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeaveDayUpdateManyArgs>(args: SelectSubset<T, LeaveDayUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LeaveDay.
     * @param {LeaveDayUpsertArgs} args - Arguments to update or create a LeaveDay.
     * @example
     * // Update or create a LeaveDay
     * const leaveDay = await prisma.leaveDay.upsert({
     *   create: {
     *     // ... data to create a LeaveDay
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeaveDay we want to update
     *   }
     * })
     */
    upsert<T extends LeaveDayUpsertArgs>(args: SelectSubset<T, LeaveDayUpsertArgs<ExtArgs>>): Prisma__LeaveDayClient<$Result.GetResult<Prisma.$LeaveDayPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LeaveDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveDayCountArgs} args - Arguments to filter LeaveDays to count.
     * @example
     * // Count the number of LeaveDays
     * const count = await prisma.leaveDay.count({
     *   where: {
     *     // ... the filter for the LeaveDays we want to count
     *   }
     * })
    **/
    count<T extends LeaveDayCountArgs>(
      args?: Subset<T, LeaveDayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaveDayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeaveDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveDayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaveDayAggregateArgs>(args: Subset<T, LeaveDayAggregateArgs>): Prisma.PrismaPromise<GetLeaveDayAggregateType<T>>

    /**
     * Group by LeaveDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveDayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeaveDayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeaveDayGroupByArgs['orderBy'] }
        : { orderBy?: LeaveDayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeaveDayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaveDayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeaveDay model
   */
  readonly fields: LeaveDayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeaveDay.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeaveDayClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    staff<T extends StaffDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffDefaultArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeaveDay model
   */ 
  interface LeaveDayFieldRefs {
    readonly id: FieldRef<"LeaveDay", 'String'>
    readonly staffId: FieldRef<"LeaveDay", 'String'>
    readonly date: FieldRef<"LeaveDay", 'DateTime'>
    readonly reason: FieldRef<"LeaveDay", 'String'>
    readonly createdAt: FieldRef<"LeaveDay", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LeaveDay findUnique
   */
  export type LeaveDayFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveDay
     */
    select?: LeaveDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveDayInclude<ExtArgs> | null
    /**
     * Filter, which LeaveDay to fetch.
     */
    where: LeaveDayWhereUniqueInput
  }

  /**
   * LeaveDay findUniqueOrThrow
   */
  export type LeaveDayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveDay
     */
    select?: LeaveDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveDayInclude<ExtArgs> | null
    /**
     * Filter, which LeaveDay to fetch.
     */
    where: LeaveDayWhereUniqueInput
  }

  /**
   * LeaveDay findFirst
   */
  export type LeaveDayFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveDay
     */
    select?: LeaveDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveDayInclude<ExtArgs> | null
    /**
     * Filter, which LeaveDay to fetch.
     */
    where?: LeaveDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveDays to fetch.
     */
    orderBy?: LeaveDayOrderByWithRelationInput | LeaveDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveDays.
     */
    cursor?: LeaveDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveDays.
     */
    distinct?: LeaveDayScalarFieldEnum | LeaveDayScalarFieldEnum[]
  }

  /**
   * LeaveDay findFirstOrThrow
   */
  export type LeaveDayFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveDay
     */
    select?: LeaveDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveDayInclude<ExtArgs> | null
    /**
     * Filter, which LeaveDay to fetch.
     */
    where?: LeaveDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveDays to fetch.
     */
    orderBy?: LeaveDayOrderByWithRelationInput | LeaveDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveDays.
     */
    cursor?: LeaveDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveDays.
     */
    distinct?: LeaveDayScalarFieldEnum | LeaveDayScalarFieldEnum[]
  }

  /**
   * LeaveDay findMany
   */
  export type LeaveDayFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveDay
     */
    select?: LeaveDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveDayInclude<ExtArgs> | null
    /**
     * Filter, which LeaveDays to fetch.
     */
    where?: LeaveDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveDays to fetch.
     */
    orderBy?: LeaveDayOrderByWithRelationInput | LeaveDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeaveDays.
     */
    cursor?: LeaveDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveDays.
     */
    skip?: number
    distinct?: LeaveDayScalarFieldEnum | LeaveDayScalarFieldEnum[]
  }

  /**
   * LeaveDay create
   */
  export type LeaveDayCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveDay
     */
    select?: LeaveDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveDayInclude<ExtArgs> | null
    /**
     * The data needed to create a LeaveDay.
     */
    data: XOR<LeaveDayCreateInput, LeaveDayUncheckedCreateInput>
  }

  /**
   * LeaveDay createMany
   */
  export type LeaveDayCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeaveDays.
     */
    data: LeaveDayCreateManyInput | LeaveDayCreateManyInput[]
  }

  /**
   * LeaveDay createManyAndReturn
   */
  export type LeaveDayCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveDay
     */
    select?: LeaveDaySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LeaveDays.
     */
    data: LeaveDayCreateManyInput | LeaveDayCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveDayIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeaveDay update
   */
  export type LeaveDayUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveDay
     */
    select?: LeaveDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveDayInclude<ExtArgs> | null
    /**
     * The data needed to update a LeaveDay.
     */
    data: XOR<LeaveDayUpdateInput, LeaveDayUncheckedUpdateInput>
    /**
     * Choose, which LeaveDay to update.
     */
    where: LeaveDayWhereUniqueInput
  }

  /**
   * LeaveDay updateMany
   */
  export type LeaveDayUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeaveDays.
     */
    data: XOR<LeaveDayUpdateManyMutationInput, LeaveDayUncheckedUpdateManyInput>
    /**
     * Filter which LeaveDays to update
     */
    where?: LeaveDayWhereInput
  }

  /**
   * LeaveDay upsert
   */
  export type LeaveDayUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveDay
     */
    select?: LeaveDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveDayInclude<ExtArgs> | null
    /**
     * The filter to search for the LeaveDay to update in case it exists.
     */
    where: LeaveDayWhereUniqueInput
    /**
     * In case the LeaveDay found by the `where` argument doesn't exist, create a new LeaveDay with this data.
     */
    create: XOR<LeaveDayCreateInput, LeaveDayUncheckedCreateInput>
    /**
     * In case the LeaveDay was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeaveDayUpdateInput, LeaveDayUncheckedUpdateInput>
  }

  /**
   * LeaveDay delete
   */
  export type LeaveDayDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveDay
     */
    select?: LeaveDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveDayInclude<ExtArgs> | null
    /**
     * Filter which LeaveDay to delete.
     */
    where: LeaveDayWhereUniqueInput
  }

  /**
   * LeaveDay deleteMany
   */
  export type LeaveDayDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveDays to delete
     */
    where?: LeaveDayWhereInput
  }

  /**
   * LeaveDay without action
   */
  export type LeaveDayDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveDay
     */
    select?: LeaveDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveDayInclude<ExtArgs> | null
  }


  /**
   * Model LeavePeriod
   */

  export type AggregateLeavePeriod = {
    _count: LeavePeriodCountAggregateOutputType | null
    _min: LeavePeriodMinAggregateOutputType | null
    _max: LeavePeriodMaxAggregateOutputType | null
  }

  export type LeavePeriodMinAggregateOutputType = {
    id: string | null
    staffId: string | null
    startDate: Date | null
    endDate: Date | null
    reason: string | null
    createdAt: Date | null
  }

  export type LeavePeriodMaxAggregateOutputType = {
    id: string | null
    staffId: string | null
    startDate: Date | null
    endDate: Date | null
    reason: string | null
    createdAt: Date | null
  }

  export type LeavePeriodCountAggregateOutputType = {
    id: number
    staffId: number
    startDate: number
    endDate: number
    reason: number
    createdAt: number
    _all: number
  }


  export type LeavePeriodMinAggregateInputType = {
    id?: true
    staffId?: true
    startDate?: true
    endDate?: true
    reason?: true
    createdAt?: true
  }

  export type LeavePeriodMaxAggregateInputType = {
    id?: true
    staffId?: true
    startDate?: true
    endDate?: true
    reason?: true
    createdAt?: true
  }

  export type LeavePeriodCountAggregateInputType = {
    id?: true
    staffId?: true
    startDate?: true
    endDate?: true
    reason?: true
    createdAt?: true
    _all?: true
  }

  export type LeavePeriodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeavePeriod to aggregate.
     */
    where?: LeavePeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeavePeriods to fetch.
     */
    orderBy?: LeavePeriodOrderByWithRelationInput | LeavePeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeavePeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeavePeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeavePeriods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeavePeriods
    **/
    _count?: true | LeavePeriodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeavePeriodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeavePeriodMaxAggregateInputType
  }

  export type GetLeavePeriodAggregateType<T extends LeavePeriodAggregateArgs> = {
        [P in keyof T & keyof AggregateLeavePeriod]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeavePeriod[P]>
      : GetScalarType<T[P], AggregateLeavePeriod[P]>
  }




  export type LeavePeriodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeavePeriodWhereInput
    orderBy?: LeavePeriodOrderByWithAggregationInput | LeavePeriodOrderByWithAggregationInput[]
    by: LeavePeriodScalarFieldEnum[] | LeavePeriodScalarFieldEnum
    having?: LeavePeriodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeavePeriodCountAggregateInputType | true
    _min?: LeavePeriodMinAggregateInputType
    _max?: LeavePeriodMaxAggregateInputType
  }

  export type LeavePeriodGroupByOutputType = {
    id: string
    staffId: string
    startDate: Date
    endDate: Date
    reason: string | null
    createdAt: Date
    _count: LeavePeriodCountAggregateOutputType | null
    _min: LeavePeriodMinAggregateOutputType | null
    _max: LeavePeriodMaxAggregateOutputType | null
  }

  type GetLeavePeriodGroupByPayload<T extends LeavePeriodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeavePeriodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeavePeriodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeavePeriodGroupByOutputType[P]>
            : GetScalarType<T[P], LeavePeriodGroupByOutputType[P]>
        }
      >
    >


  export type LeavePeriodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    startDate?: boolean
    endDate?: boolean
    reason?: boolean
    createdAt?: boolean
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leavePeriod"]>

  export type LeavePeriodSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    startDate?: boolean
    endDate?: boolean
    reason?: boolean
    createdAt?: boolean
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leavePeriod"]>

  export type LeavePeriodSelectScalar = {
    id?: boolean
    staffId?: boolean
    startDate?: boolean
    endDate?: boolean
    reason?: boolean
    createdAt?: boolean
  }

  export type LeavePeriodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }
  export type LeavePeriodIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }

  export type $LeavePeriodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeavePeriod"
    objects: {
      staff: Prisma.$StaffPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      staffId: string
      startDate: Date
      endDate: Date
      reason: string | null
      createdAt: Date
    }, ExtArgs["result"]["leavePeriod"]>
    composites: {}
  }

  type LeavePeriodGetPayload<S extends boolean | null | undefined | LeavePeriodDefaultArgs> = $Result.GetResult<Prisma.$LeavePeriodPayload, S>

  type LeavePeriodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeavePeriodFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeavePeriodCountAggregateInputType | true
    }

  export interface LeavePeriodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeavePeriod'], meta: { name: 'LeavePeriod' } }
    /**
     * Find zero or one LeavePeriod that matches the filter.
     * @param {LeavePeriodFindUniqueArgs} args - Arguments to find a LeavePeriod
     * @example
     * // Get one LeavePeriod
     * const leavePeriod = await prisma.leavePeriod.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeavePeriodFindUniqueArgs>(args: SelectSubset<T, LeavePeriodFindUniqueArgs<ExtArgs>>): Prisma__LeavePeriodClient<$Result.GetResult<Prisma.$LeavePeriodPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LeavePeriod that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeavePeriodFindUniqueOrThrowArgs} args - Arguments to find a LeavePeriod
     * @example
     * // Get one LeavePeriod
     * const leavePeriod = await prisma.leavePeriod.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeavePeriodFindUniqueOrThrowArgs>(args: SelectSubset<T, LeavePeriodFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeavePeriodClient<$Result.GetResult<Prisma.$LeavePeriodPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LeavePeriod that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeavePeriodFindFirstArgs} args - Arguments to find a LeavePeriod
     * @example
     * // Get one LeavePeriod
     * const leavePeriod = await prisma.leavePeriod.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeavePeriodFindFirstArgs>(args?: SelectSubset<T, LeavePeriodFindFirstArgs<ExtArgs>>): Prisma__LeavePeriodClient<$Result.GetResult<Prisma.$LeavePeriodPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LeavePeriod that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeavePeriodFindFirstOrThrowArgs} args - Arguments to find a LeavePeriod
     * @example
     * // Get one LeavePeriod
     * const leavePeriod = await prisma.leavePeriod.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeavePeriodFindFirstOrThrowArgs>(args?: SelectSubset<T, LeavePeriodFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeavePeriodClient<$Result.GetResult<Prisma.$LeavePeriodPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LeavePeriods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeavePeriodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeavePeriods
     * const leavePeriods = await prisma.leavePeriod.findMany()
     * 
     * // Get first 10 LeavePeriods
     * const leavePeriods = await prisma.leavePeriod.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leavePeriodWithIdOnly = await prisma.leavePeriod.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeavePeriodFindManyArgs>(args?: SelectSubset<T, LeavePeriodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeavePeriodPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LeavePeriod.
     * @param {LeavePeriodCreateArgs} args - Arguments to create a LeavePeriod.
     * @example
     * // Create one LeavePeriod
     * const LeavePeriod = await prisma.leavePeriod.create({
     *   data: {
     *     // ... data to create a LeavePeriod
     *   }
     * })
     * 
     */
    create<T extends LeavePeriodCreateArgs>(args: SelectSubset<T, LeavePeriodCreateArgs<ExtArgs>>): Prisma__LeavePeriodClient<$Result.GetResult<Prisma.$LeavePeriodPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LeavePeriods.
     * @param {LeavePeriodCreateManyArgs} args - Arguments to create many LeavePeriods.
     * @example
     * // Create many LeavePeriods
     * const leavePeriod = await prisma.leavePeriod.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeavePeriodCreateManyArgs>(args?: SelectSubset<T, LeavePeriodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeavePeriods and returns the data saved in the database.
     * @param {LeavePeriodCreateManyAndReturnArgs} args - Arguments to create many LeavePeriods.
     * @example
     * // Create many LeavePeriods
     * const leavePeriod = await prisma.leavePeriod.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeavePeriods and only return the `id`
     * const leavePeriodWithIdOnly = await prisma.leavePeriod.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeavePeriodCreateManyAndReturnArgs>(args?: SelectSubset<T, LeavePeriodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeavePeriodPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LeavePeriod.
     * @param {LeavePeriodDeleteArgs} args - Arguments to delete one LeavePeriod.
     * @example
     * // Delete one LeavePeriod
     * const LeavePeriod = await prisma.leavePeriod.delete({
     *   where: {
     *     // ... filter to delete one LeavePeriod
     *   }
     * })
     * 
     */
    delete<T extends LeavePeriodDeleteArgs>(args: SelectSubset<T, LeavePeriodDeleteArgs<ExtArgs>>): Prisma__LeavePeriodClient<$Result.GetResult<Prisma.$LeavePeriodPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LeavePeriod.
     * @param {LeavePeriodUpdateArgs} args - Arguments to update one LeavePeriod.
     * @example
     * // Update one LeavePeriod
     * const leavePeriod = await prisma.leavePeriod.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeavePeriodUpdateArgs>(args: SelectSubset<T, LeavePeriodUpdateArgs<ExtArgs>>): Prisma__LeavePeriodClient<$Result.GetResult<Prisma.$LeavePeriodPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LeavePeriods.
     * @param {LeavePeriodDeleteManyArgs} args - Arguments to filter LeavePeriods to delete.
     * @example
     * // Delete a few LeavePeriods
     * const { count } = await prisma.leavePeriod.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeavePeriodDeleteManyArgs>(args?: SelectSubset<T, LeavePeriodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeavePeriods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeavePeriodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeavePeriods
     * const leavePeriod = await prisma.leavePeriod.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeavePeriodUpdateManyArgs>(args: SelectSubset<T, LeavePeriodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LeavePeriod.
     * @param {LeavePeriodUpsertArgs} args - Arguments to update or create a LeavePeriod.
     * @example
     * // Update or create a LeavePeriod
     * const leavePeriod = await prisma.leavePeriod.upsert({
     *   create: {
     *     // ... data to create a LeavePeriod
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeavePeriod we want to update
     *   }
     * })
     */
    upsert<T extends LeavePeriodUpsertArgs>(args: SelectSubset<T, LeavePeriodUpsertArgs<ExtArgs>>): Prisma__LeavePeriodClient<$Result.GetResult<Prisma.$LeavePeriodPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LeavePeriods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeavePeriodCountArgs} args - Arguments to filter LeavePeriods to count.
     * @example
     * // Count the number of LeavePeriods
     * const count = await prisma.leavePeriod.count({
     *   where: {
     *     // ... the filter for the LeavePeriods we want to count
     *   }
     * })
    **/
    count<T extends LeavePeriodCountArgs>(
      args?: Subset<T, LeavePeriodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeavePeriodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeavePeriod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeavePeriodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeavePeriodAggregateArgs>(args: Subset<T, LeavePeriodAggregateArgs>): Prisma.PrismaPromise<GetLeavePeriodAggregateType<T>>

    /**
     * Group by LeavePeriod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeavePeriodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeavePeriodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeavePeriodGroupByArgs['orderBy'] }
        : { orderBy?: LeavePeriodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeavePeriodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeavePeriodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeavePeriod model
   */
  readonly fields: LeavePeriodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeavePeriod.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeavePeriodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    staff<T extends StaffDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffDefaultArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeavePeriod model
   */ 
  interface LeavePeriodFieldRefs {
    readonly id: FieldRef<"LeavePeriod", 'String'>
    readonly staffId: FieldRef<"LeavePeriod", 'String'>
    readonly startDate: FieldRef<"LeavePeriod", 'DateTime'>
    readonly endDate: FieldRef<"LeavePeriod", 'DateTime'>
    readonly reason: FieldRef<"LeavePeriod", 'String'>
    readonly createdAt: FieldRef<"LeavePeriod", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LeavePeriod findUnique
   */
  export type LeavePeriodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePeriod
     */
    select?: LeavePeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePeriodInclude<ExtArgs> | null
    /**
     * Filter, which LeavePeriod to fetch.
     */
    where: LeavePeriodWhereUniqueInput
  }

  /**
   * LeavePeriod findUniqueOrThrow
   */
  export type LeavePeriodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePeriod
     */
    select?: LeavePeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePeriodInclude<ExtArgs> | null
    /**
     * Filter, which LeavePeriod to fetch.
     */
    where: LeavePeriodWhereUniqueInput
  }

  /**
   * LeavePeriod findFirst
   */
  export type LeavePeriodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePeriod
     */
    select?: LeavePeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePeriodInclude<ExtArgs> | null
    /**
     * Filter, which LeavePeriod to fetch.
     */
    where?: LeavePeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeavePeriods to fetch.
     */
    orderBy?: LeavePeriodOrderByWithRelationInput | LeavePeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeavePeriods.
     */
    cursor?: LeavePeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeavePeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeavePeriods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeavePeriods.
     */
    distinct?: LeavePeriodScalarFieldEnum | LeavePeriodScalarFieldEnum[]
  }

  /**
   * LeavePeriod findFirstOrThrow
   */
  export type LeavePeriodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePeriod
     */
    select?: LeavePeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePeriodInclude<ExtArgs> | null
    /**
     * Filter, which LeavePeriod to fetch.
     */
    where?: LeavePeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeavePeriods to fetch.
     */
    orderBy?: LeavePeriodOrderByWithRelationInput | LeavePeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeavePeriods.
     */
    cursor?: LeavePeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeavePeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeavePeriods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeavePeriods.
     */
    distinct?: LeavePeriodScalarFieldEnum | LeavePeriodScalarFieldEnum[]
  }

  /**
   * LeavePeriod findMany
   */
  export type LeavePeriodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePeriod
     */
    select?: LeavePeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePeriodInclude<ExtArgs> | null
    /**
     * Filter, which LeavePeriods to fetch.
     */
    where?: LeavePeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeavePeriods to fetch.
     */
    orderBy?: LeavePeriodOrderByWithRelationInput | LeavePeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeavePeriods.
     */
    cursor?: LeavePeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeavePeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeavePeriods.
     */
    skip?: number
    distinct?: LeavePeriodScalarFieldEnum | LeavePeriodScalarFieldEnum[]
  }

  /**
   * LeavePeriod create
   */
  export type LeavePeriodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePeriod
     */
    select?: LeavePeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePeriodInclude<ExtArgs> | null
    /**
     * The data needed to create a LeavePeriod.
     */
    data: XOR<LeavePeriodCreateInput, LeavePeriodUncheckedCreateInput>
  }

  /**
   * LeavePeriod createMany
   */
  export type LeavePeriodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeavePeriods.
     */
    data: LeavePeriodCreateManyInput | LeavePeriodCreateManyInput[]
  }

  /**
   * LeavePeriod createManyAndReturn
   */
  export type LeavePeriodCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePeriod
     */
    select?: LeavePeriodSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LeavePeriods.
     */
    data: LeavePeriodCreateManyInput | LeavePeriodCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePeriodIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeavePeriod update
   */
  export type LeavePeriodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePeriod
     */
    select?: LeavePeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePeriodInclude<ExtArgs> | null
    /**
     * The data needed to update a LeavePeriod.
     */
    data: XOR<LeavePeriodUpdateInput, LeavePeriodUncheckedUpdateInput>
    /**
     * Choose, which LeavePeriod to update.
     */
    where: LeavePeriodWhereUniqueInput
  }

  /**
   * LeavePeriod updateMany
   */
  export type LeavePeriodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeavePeriods.
     */
    data: XOR<LeavePeriodUpdateManyMutationInput, LeavePeriodUncheckedUpdateManyInput>
    /**
     * Filter which LeavePeriods to update
     */
    where?: LeavePeriodWhereInput
  }

  /**
   * LeavePeriod upsert
   */
  export type LeavePeriodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePeriod
     */
    select?: LeavePeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePeriodInclude<ExtArgs> | null
    /**
     * The filter to search for the LeavePeriod to update in case it exists.
     */
    where: LeavePeriodWhereUniqueInput
    /**
     * In case the LeavePeriod found by the `where` argument doesn't exist, create a new LeavePeriod with this data.
     */
    create: XOR<LeavePeriodCreateInput, LeavePeriodUncheckedCreateInput>
    /**
     * In case the LeavePeriod was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeavePeriodUpdateInput, LeavePeriodUncheckedUpdateInput>
  }

  /**
   * LeavePeriod delete
   */
  export type LeavePeriodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePeriod
     */
    select?: LeavePeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePeriodInclude<ExtArgs> | null
    /**
     * Filter which LeavePeriod to delete.
     */
    where: LeavePeriodWhereUniqueInput
  }

  /**
   * LeavePeriod deleteMany
   */
  export type LeavePeriodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeavePeriods to delete
     */
    where?: LeavePeriodWhereInput
  }

  /**
   * LeavePeriod without action
   */
  export type LeavePeriodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePeriod
     */
    select?: LeavePeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePeriodInclude<ExtArgs> | null
  }


  /**
   * Model ShiftSwap
   */

  export type AggregateShiftSwap = {
    _count: ShiftSwapCountAggregateOutputType | null
    _min: ShiftSwapMinAggregateOutputType | null
    _max: ShiftSwapMaxAggregateOutputType | null
  }

  export type ShiftSwapMinAggregateOutputType = {
    id: string | null
    proposedShiftId: string | null
    targetShiftId: string | null
    proposerId: string | null
    receiverId: string | null
    status: string | null
    proposerNote: string | null
    receiverNote: string | null
    proposedAt: Date | null
    respondedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShiftSwapMaxAggregateOutputType = {
    id: string | null
    proposedShiftId: string | null
    targetShiftId: string | null
    proposerId: string | null
    receiverId: string | null
    status: string | null
    proposerNote: string | null
    receiverNote: string | null
    proposedAt: Date | null
    respondedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShiftSwapCountAggregateOutputType = {
    id: number
    proposedShiftId: number
    targetShiftId: number
    proposerId: number
    receiverId: number
    status: number
    proposerNote: number
    receiverNote: number
    proposedAt: number
    respondedAt: number
    completedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShiftSwapMinAggregateInputType = {
    id?: true
    proposedShiftId?: true
    targetShiftId?: true
    proposerId?: true
    receiverId?: true
    status?: true
    proposerNote?: true
    receiverNote?: true
    proposedAt?: true
    respondedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShiftSwapMaxAggregateInputType = {
    id?: true
    proposedShiftId?: true
    targetShiftId?: true
    proposerId?: true
    receiverId?: true
    status?: true
    proposerNote?: true
    receiverNote?: true
    proposedAt?: true
    respondedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShiftSwapCountAggregateInputType = {
    id?: true
    proposedShiftId?: true
    targetShiftId?: true
    proposerId?: true
    receiverId?: true
    status?: true
    proposerNote?: true
    receiverNote?: true
    proposedAt?: true
    respondedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShiftSwapAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShiftSwap to aggregate.
     */
    where?: ShiftSwapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftSwaps to fetch.
     */
    orderBy?: ShiftSwapOrderByWithRelationInput | ShiftSwapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShiftSwapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftSwaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftSwaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShiftSwaps
    **/
    _count?: true | ShiftSwapCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShiftSwapMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShiftSwapMaxAggregateInputType
  }

  export type GetShiftSwapAggregateType<T extends ShiftSwapAggregateArgs> = {
        [P in keyof T & keyof AggregateShiftSwap]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShiftSwap[P]>
      : GetScalarType<T[P], AggregateShiftSwap[P]>
  }




  export type ShiftSwapGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftSwapWhereInput
    orderBy?: ShiftSwapOrderByWithAggregationInput | ShiftSwapOrderByWithAggregationInput[]
    by: ShiftSwapScalarFieldEnum[] | ShiftSwapScalarFieldEnum
    having?: ShiftSwapScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShiftSwapCountAggregateInputType | true
    _min?: ShiftSwapMinAggregateInputType
    _max?: ShiftSwapMaxAggregateInputType
  }

  export type ShiftSwapGroupByOutputType = {
    id: string
    proposedShiftId: string
    targetShiftId: string
    proposerId: string
    receiverId: string
    status: string
    proposerNote: string | null
    receiverNote: string | null
    proposedAt: Date
    respondedAt: Date | null
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ShiftSwapCountAggregateOutputType | null
    _min: ShiftSwapMinAggregateOutputType | null
    _max: ShiftSwapMaxAggregateOutputType | null
  }

  type GetShiftSwapGroupByPayload<T extends ShiftSwapGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShiftSwapGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShiftSwapGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShiftSwapGroupByOutputType[P]>
            : GetScalarType<T[P], ShiftSwapGroupByOutputType[P]>
        }
      >
    >


  export type ShiftSwapSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proposedShiftId?: boolean
    targetShiftId?: boolean
    proposerId?: boolean
    receiverId?: boolean
    status?: boolean
    proposerNote?: boolean
    receiverNote?: boolean
    proposedAt?: boolean
    respondedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    proposedShift?: boolean | ShiftDefaultArgs<ExtArgs>
    proposer?: boolean | StaffDefaultArgs<ExtArgs>
    receiver?: boolean | StaffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shiftSwap"]>

  export type ShiftSwapSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proposedShiftId?: boolean
    targetShiftId?: boolean
    proposerId?: boolean
    receiverId?: boolean
    status?: boolean
    proposerNote?: boolean
    receiverNote?: boolean
    proposedAt?: boolean
    respondedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    proposedShift?: boolean | ShiftDefaultArgs<ExtArgs>
    proposer?: boolean | StaffDefaultArgs<ExtArgs>
    receiver?: boolean | StaffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shiftSwap"]>

  export type ShiftSwapSelectScalar = {
    id?: boolean
    proposedShiftId?: boolean
    targetShiftId?: boolean
    proposerId?: boolean
    receiverId?: boolean
    status?: boolean
    proposerNote?: boolean
    receiverNote?: boolean
    proposedAt?: boolean
    respondedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ShiftSwapInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proposedShift?: boolean | ShiftDefaultArgs<ExtArgs>
    proposer?: boolean | StaffDefaultArgs<ExtArgs>
    receiver?: boolean | StaffDefaultArgs<ExtArgs>
  }
  export type ShiftSwapIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proposedShift?: boolean | ShiftDefaultArgs<ExtArgs>
    proposer?: boolean | StaffDefaultArgs<ExtArgs>
    receiver?: boolean | StaffDefaultArgs<ExtArgs>
  }

  export type $ShiftSwapPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShiftSwap"
    objects: {
      proposedShift: Prisma.$ShiftPayload<ExtArgs>
      proposer: Prisma.$StaffPayload<ExtArgs>
      receiver: Prisma.$StaffPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      proposedShiftId: string
      targetShiftId: string
      proposerId: string
      receiverId: string
      status: string
      proposerNote: string | null
      receiverNote: string | null
      proposedAt: Date
      respondedAt: Date | null
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["shiftSwap"]>
    composites: {}
  }

  type ShiftSwapGetPayload<S extends boolean | null | undefined | ShiftSwapDefaultArgs> = $Result.GetResult<Prisma.$ShiftSwapPayload, S>

  type ShiftSwapCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShiftSwapFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShiftSwapCountAggregateInputType | true
    }

  export interface ShiftSwapDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShiftSwap'], meta: { name: 'ShiftSwap' } }
    /**
     * Find zero or one ShiftSwap that matches the filter.
     * @param {ShiftSwapFindUniqueArgs} args - Arguments to find a ShiftSwap
     * @example
     * // Get one ShiftSwap
     * const shiftSwap = await prisma.shiftSwap.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShiftSwapFindUniqueArgs>(args: SelectSubset<T, ShiftSwapFindUniqueArgs<ExtArgs>>): Prisma__ShiftSwapClient<$Result.GetResult<Prisma.$ShiftSwapPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ShiftSwap that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShiftSwapFindUniqueOrThrowArgs} args - Arguments to find a ShiftSwap
     * @example
     * // Get one ShiftSwap
     * const shiftSwap = await prisma.shiftSwap.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShiftSwapFindUniqueOrThrowArgs>(args: SelectSubset<T, ShiftSwapFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShiftSwapClient<$Result.GetResult<Prisma.$ShiftSwapPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ShiftSwap that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftSwapFindFirstArgs} args - Arguments to find a ShiftSwap
     * @example
     * // Get one ShiftSwap
     * const shiftSwap = await prisma.shiftSwap.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShiftSwapFindFirstArgs>(args?: SelectSubset<T, ShiftSwapFindFirstArgs<ExtArgs>>): Prisma__ShiftSwapClient<$Result.GetResult<Prisma.$ShiftSwapPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ShiftSwap that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftSwapFindFirstOrThrowArgs} args - Arguments to find a ShiftSwap
     * @example
     * // Get one ShiftSwap
     * const shiftSwap = await prisma.shiftSwap.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShiftSwapFindFirstOrThrowArgs>(args?: SelectSubset<T, ShiftSwapFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShiftSwapClient<$Result.GetResult<Prisma.$ShiftSwapPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ShiftSwaps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftSwapFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShiftSwaps
     * const shiftSwaps = await prisma.shiftSwap.findMany()
     * 
     * // Get first 10 ShiftSwaps
     * const shiftSwaps = await prisma.shiftSwap.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shiftSwapWithIdOnly = await prisma.shiftSwap.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShiftSwapFindManyArgs>(args?: SelectSubset<T, ShiftSwapFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftSwapPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ShiftSwap.
     * @param {ShiftSwapCreateArgs} args - Arguments to create a ShiftSwap.
     * @example
     * // Create one ShiftSwap
     * const ShiftSwap = await prisma.shiftSwap.create({
     *   data: {
     *     // ... data to create a ShiftSwap
     *   }
     * })
     * 
     */
    create<T extends ShiftSwapCreateArgs>(args: SelectSubset<T, ShiftSwapCreateArgs<ExtArgs>>): Prisma__ShiftSwapClient<$Result.GetResult<Prisma.$ShiftSwapPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ShiftSwaps.
     * @param {ShiftSwapCreateManyArgs} args - Arguments to create many ShiftSwaps.
     * @example
     * // Create many ShiftSwaps
     * const shiftSwap = await prisma.shiftSwap.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShiftSwapCreateManyArgs>(args?: SelectSubset<T, ShiftSwapCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShiftSwaps and returns the data saved in the database.
     * @param {ShiftSwapCreateManyAndReturnArgs} args - Arguments to create many ShiftSwaps.
     * @example
     * // Create many ShiftSwaps
     * const shiftSwap = await prisma.shiftSwap.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShiftSwaps and only return the `id`
     * const shiftSwapWithIdOnly = await prisma.shiftSwap.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShiftSwapCreateManyAndReturnArgs>(args?: SelectSubset<T, ShiftSwapCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftSwapPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ShiftSwap.
     * @param {ShiftSwapDeleteArgs} args - Arguments to delete one ShiftSwap.
     * @example
     * // Delete one ShiftSwap
     * const ShiftSwap = await prisma.shiftSwap.delete({
     *   where: {
     *     // ... filter to delete one ShiftSwap
     *   }
     * })
     * 
     */
    delete<T extends ShiftSwapDeleteArgs>(args: SelectSubset<T, ShiftSwapDeleteArgs<ExtArgs>>): Prisma__ShiftSwapClient<$Result.GetResult<Prisma.$ShiftSwapPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ShiftSwap.
     * @param {ShiftSwapUpdateArgs} args - Arguments to update one ShiftSwap.
     * @example
     * // Update one ShiftSwap
     * const shiftSwap = await prisma.shiftSwap.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShiftSwapUpdateArgs>(args: SelectSubset<T, ShiftSwapUpdateArgs<ExtArgs>>): Prisma__ShiftSwapClient<$Result.GetResult<Prisma.$ShiftSwapPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ShiftSwaps.
     * @param {ShiftSwapDeleteManyArgs} args - Arguments to filter ShiftSwaps to delete.
     * @example
     * // Delete a few ShiftSwaps
     * const { count } = await prisma.shiftSwap.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShiftSwapDeleteManyArgs>(args?: SelectSubset<T, ShiftSwapDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShiftSwaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftSwapUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShiftSwaps
     * const shiftSwap = await prisma.shiftSwap.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShiftSwapUpdateManyArgs>(args: SelectSubset<T, ShiftSwapUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ShiftSwap.
     * @param {ShiftSwapUpsertArgs} args - Arguments to update or create a ShiftSwap.
     * @example
     * // Update or create a ShiftSwap
     * const shiftSwap = await prisma.shiftSwap.upsert({
     *   create: {
     *     // ... data to create a ShiftSwap
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShiftSwap we want to update
     *   }
     * })
     */
    upsert<T extends ShiftSwapUpsertArgs>(args: SelectSubset<T, ShiftSwapUpsertArgs<ExtArgs>>): Prisma__ShiftSwapClient<$Result.GetResult<Prisma.$ShiftSwapPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ShiftSwaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftSwapCountArgs} args - Arguments to filter ShiftSwaps to count.
     * @example
     * // Count the number of ShiftSwaps
     * const count = await prisma.shiftSwap.count({
     *   where: {
     *     // ... the filter for the ShiftSwaps we want to count
     *   }
     * })
    **/
    count<T extends ShiftSwapCountArgs>(
      args?: Subset<T, ShiftSwapCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShiftSwapCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShiftSwap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftSwapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShiftSwapAggregateArgs>(args: Subset<T, ShiftSwapAggregateArgs>): Prisma.PrismaPromise<GetShiftSwapAggregateType<T>>

    /**
     * Group by ShiftSwap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftSwapGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShiftSwapGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShiftSwapGroupByArgs['orderBy'] }
        : { orderBy?: ShiftSwapGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShiftSwapGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShiftSwapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShiftSwap model
   */
  readonly fields: ShiftSwapFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShiftSwap.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShiftSwapClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    proposedShift<T extends ShiftDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShiftDefaultArgs<ExtArgs>>): Prisma__ShiftClient<$Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    proposer<T extends StaffDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffDefaultArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    receiver<T extends StaffDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffDefaultArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShiftSwap model
   */ 
  interface ShiftSwapFieldRefs {
    readonly id: FieldRef<"ShiftSwap", 'String'>
    readonly proposedShiftId: FieldRef<"ShiftSwap", 'String'>
    readonly targetShiftId: FieldRef<"ShiftSwap", 'String'>
    readonly proposerId: FieldRef<"ShiftSwap", 'String'>
    readonly receiverId: FieldRef<"ShiftSwap", 'String'>
    readonly status: FieldRef<"ShiftSwap", 'String'>
    readonly proposerNote: FieldRef<"ShiftSwap", 'String'>
    readonly receiverNote: FieldRef<"ShiftSwap", 'String'>
    readonly proposedAt: FieldRef<"ShiftSwap", 'DateTime'>
    readonly respondedAt: FieldRef<"ShiftSwap", 'DateTime'>
    readonly completedAt: FieldRef<"ShiftSwap", 'DateTime'>
    readonly createdAt: FieldRef<"ShiftSwap", 'DateTime'>
    readonly updatedAt: FieldRef<"ShiftSwap", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ShiftSwap findUnique
   */
  export type ShiftSwapFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSwap
     */
    select?: ShiftSwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftSwapInclude<ExtArgs> | null
    /**
     * Filter, which ShiftSwap to fetch.
     */
    where: ShiftSwapWhereUniqueInput
  }

  /**
   * ShiftSwap findUniqueOrThrow
   */
  export type ShiftSwapFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSwap
     */
    select?: ShiftSwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftSwapInclude<ExtArgs> | null
    /**
     * Filter, which ShiftSwap to fetch.
     */
    where: ShiftSwapWhereUniqueInput
  }

  /**
   * ShiftSwap findFirst
   */
  export type ShiftSwapFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSwap
     */
    select?: ShiftSwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftSwapInclude<ExtArgs> | null
    /**
     * Filter, which ShiftSwap to fetch.
     */
    where?: ShiftSwapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftSwaps to fetch.
     */
    orderBy?: ShiftSwapOrderByWithRelationInput | ShiftSwapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShiftSwaps.
     */
    cursor?: ShiftSwapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftSwaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftSwaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShiftSwaps.
     */
    distinct?: ShiftSwapScalarFieldEnum | ShiftSwapScalarFieldEnum[]
  }

  /**
   * ShiftSwap findFirstOrThrow
   */
  export type ShiftSwapFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSwap
     */
    select?: ShiftSwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftSwapInclude<ExtArgs> | null
    /**
     * Filter, which ShiftSwap to fetch.
     */
    where?: ShiftSwapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftSwaps to fetch.
     */
    orderBy?: ShiftSwapOrderByWithRelationInput | ShiftSwapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShiftSwaps.
     */
    cursor?: ShiftSwapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftSwaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftSwaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShiftSwaps.
     */
    distinct?: ShiftSwapScalarFieldEnum | ShiftSwapScalarFieldEnum[]
  }

  /**
   * ShiftSwap findMany
   */
  export type ShiftSwapFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSwap
     */
    select?: ShiftSwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftSwapInclude<ExtArgs> | null
    /**
     * Filter, which ShiftSwaps to fetch.
     */
    where?: ShiftSwapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftSwaps to fetch.
     */
    orderBy?: ShiftSwapOrderByWithRelationInput | ShiftSwapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShiftSwaps.
     */
    cursor?: ShiftSwapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftSwaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftSwaps.
     */
    skip?: number
    distinct?: ShiftSwapScalarFieldEnum | ShiftSwapScalarFieldEnum[]
  }

  /**
   * ShiftSwap create
   */
  export type ShiftSwapCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSwap
     */
    select?: ShiftSwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftSwapInclude<ExtArgs> | null
    /**
     * The data needed to create a ShiftSwap.
     */
    data: XOR<ShiftSwapCreateInput, ShiftSwapUncheckedCreateInput>
  }

  /**
   * ShiftSwap createMany
   */
  export type ShiftSwapCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShiftSwaps.
     */
    data: ShiftSwapCreateManyInput | ShiftSwapCreateManyInput[]
  }

  /**
   * ShiftSwap createManyAndReturn
   */
  export type ShiftSwapCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSwap
     */
    select?: ShiftSwapSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ShiftSwaps.
     */
    data: ShiftSwapCreateManyInput | ShiftSwapCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftSwapIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShiftSwap update
   */
  export type ShiftSwapUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSwap
     */
    select?: ShiftSwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftSwapInclude<ExtArgs> | null
    /**
     * The data needed to update a ShiftSwap.
     */
    data: XOR<ShiftSwapUpdateInput, ShiftSwapUncheckedUpdateInput>
    /**
     * Choose, which ShiftSwap to update.
     */
    where: ShiftSwapWhereUniqueInput
  }

  /**
   * ShiftSwap updateMany
   */
  export type ShiftSwapUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShiftSwaps.
     */
    data: XOR<ShiftSwapUpdateManyMutationInput, ShiftSwapUncheckedUpdateManyInput>
    /**
     * Filter which ShiftSwaps to update
     */
    where?: ShiftSwapWhereInput
  }

  /**
   * ShiftSwap upsert
   */
  export type ShiftSwapUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSwap
     */
    select?: ShiftSwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftSwapInclude<ExtArgs> | null
    /**
     * The filter to search for the ShiftSwap to update in case it exists.
     */
    where: ShiftSwapWhereUniqueInput
    /**
     * In case the ShiftSwap found by the `where` argument doesn't exist, create a new ShiftSwap with this data.
     */
    create: XOR<ShiftSwapCreateInput, ShiftSwapUncheckedCreateInput>
    /**
     * In case the ShiftSwap was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShiftSwapUpdateInput, ShiftSwapUncheckedUpdateInput>
  }

  /**
   * ShiftSwap delete
   */
  export type ShiftSwapDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSwap
     */
    select?: ShiftSwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftSwapInclude<ExtArgs> | null
    /**
     * Filter which ShiftSwap to delete.
     */
    where: ShiftSwapWhereUniqueInput
  }

  /**
   * ShiftSwap deleteMany
   */
  export type ShiftSwapDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShiftSwaps to delete
     */
    where?: ShiftSwapWhereInput
  }

  /**
   * ShiftSwap without action
   */
  export type ShiftSwapDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftSwap
     */
    select?: ShiftSwapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftSwapInclude<ExtArgs> | null
  }


  /**
   * Model Skill
   */

  export type AggregateSkill = {
    _count: SkillCountAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  export type SkillMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SkillMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SkillCountAggregateOutputType = {
    id: number
    name: number
    description: number
    category: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SkillMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SkillMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SkillCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SkillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skill to aggregate.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skills
    **/
    _count?: true | SkillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillMaxAggregateInputType
  }

  export type GetSkillAggregateType<T extends SkillAggregateArgs> = {
        [P in keyof T & keyof AggregateSkill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkill[P]>
      : GetScalarType<T[P], AggregateSkill[P]>
  }




  export type SkillGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithAggregationInput | SkillOrderByWithAggregationInput[]
    by: SkillScalarFieldEnum[] | SkillScalarFieldEnum
    having?: SkillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillCountAggregateInputType | true
    _min?: SkillMinAggregateInputType
    _max?: SkillMaxAggregateInputType
  }

  export type SkillGroupByOutputType = {
    id: string
    name: string
    description: string | null
    category: string | null
    createdAt: Date
    updatedAt: Date
    _count: SkillCountAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  type GetSkillGroupByPayload<T extends SkillGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillGroupByOutputType[P]>
            : GetScalarType<T[P], SkillGroupByOutputType[P]>
        }
      >
    >


  export type SkillSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    skillsMatrix?: boolean | Skill$skillsMatrixArgs<ExtArgs>
    _count?: boolean | SkillCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SkillInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skillsMatrix?: boolean | Skill$skillsMatrixArgs<ExtArgs>
    _count?: boolean | SkillCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SkillIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SkillPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Skill"
    objects: {
      skillsMatrix: Prisma.$SkillMatrixPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      category: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["skill"]>
    composites: {}
  }

  type SkillGetPayload<S extends boolean | null | undefined | SkillDefaultArgs> = $Result.GetResult<Prisma.$SkillPayload, S>

  type SkillCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SkillFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SkillCountAggregateInputType | true
    }

  export interface SkillDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Skill'], meta: { name: 'Skill' } }
    /**
     * Find zero or one Skill that matches the filter.
     * @param {SkillFindUniqueArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkillFindUniqueArgs>(args: SelectSubset<T, SkillFindUniqueArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Skill that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SkillFindUniqueOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkillFindUniqueOrThrowArgs>(args: SelectSubset<T, SkillFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Skill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkillFindFirstArgs>(args?: SelectSubset<T, SkillFindFirstArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Skill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkillFindFirstOrThrowArgs>(args?: SelectSubset<T, SkillFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skills
     * const skills = await prisma.skill.findMany()
     * 
     * // Get first 10 Skills
     * const skills = await prisma.skill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillWithIdOnly = await prisma.skill.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkillFindManyArgs>(args?: SelectSubset<T, SkillFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Skill.
     * @param {SkillCreateArgs} args - Arguments to create a Skill.
     * @example
     * // Create one Skill
     * const Skill = await prisma.skill.create({
     *   data: {
     *     // ... data to create a Skill
     *   }
     * })
     * 
     */
    create<T extends SkillCreateArgs>(args: SelectSubset<T, SkillCreateArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Skills.
     * @param {SkillCreateManyArgs} args - Arguments to create many Skills.
     * @example
     * // Create many Skills
     * const skill = await prisma.skill.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkillCreateManyArgs>(args?: SelectSubset<T, SkillCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Skills and returns the data saved in the database.
     * @param {SkillCreateManyAndReturnArgs} args - Arguments to create many Skills.
     * @example
     * // Create many Skills
     * const skill = await prisma.skill.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Skills and only return the `id`
     * const skillWithIdOnly = await prisma.skill.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkillCreateManyAndReturnArgs>(args?: SelectSubset<T, SkillCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Skill.
     * @param {SkillDeleteArgs} args - Arguments to delete one Skill.
     * @example
     * // Delete one Skill
     * const Skill = await prisma.skill.delete({
     *   where: {
     *     // ... filter to delete one Skill
     *   }
     * })
     * 
     */
    delete<T extends SkillDeleteArgs>(args: SelectSubset<T, SkillDeleteArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Skill.
     * @param {SkillUpdateArgs} args - Arguments to update one Skill.
     * @example
     * // Update one Skill
     * const skill = await prisma.skill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkillUpdateArgs>(args: SelectSubset<T, SkillUpdateArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Skills.
     * @param {SkillDeleteManyArgs} args - Arguments to filter Skills to delete.
     * @example
     * // Delete a few Skills
     * const { count } = await prisma.skill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkillDeleteManyArgs>(args?: SelectSubset<T, SkillDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skills
     * const skill = await prisma.skill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkillUpdateManyArgs>(args: SelectSubset<T, SkillUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Skill.
     * @param {SkillUpsertArgs} args - Arguments to update or create a Skill.
     * @example
     * // Update or create a Skill
     * const skill = await prisma.skill.upsert({
     *   create: {
     *     // ... data to create a Skill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Skill we want to update
     *   }
     * })
     */
    upsert<T extends SkillUpsertArgs>(args: SelectSubset<T, SkillUpsertArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillCountArgs} args - Arguments to filter Skills to count.
     * @example
     * // Count the number of Skills
     * const count = await prisma.skill.count({
     *   where: {
     *     // ... the filter for the Skills we want to count
     *   }
     * })
    **/
    count<T extends SkillCountArgs>(
      args?: Subset<T, SkillCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillAggregateArgs>(args: Subset<T, SkillAggregateArgs>): Prisma.PrismaPromise<GetSkillAggregateType<T>>

    /**
     * Group by Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillGroupByArgs['orderBy'] }
        : { orderBy?: SkillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Skill model
   */
  readonly fields: SkillFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Skill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkillClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    skillsMatrix<T extends Skill$skillsMatrixArgs<ExtArgs> = {}>(args?: Subset<T, Skill$skillsMatrixArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillMatrixPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Skill model
   */ 
  interface SkillFieldRefs {
    readonly id: FieldRef<"Skill", 'String'>
    readonly name: FieldRef<"Skill", 'String'>
    readonly description: FieldRef<"Skill", 'String'>
    readonly category: FieldRef<"Skill", 'String'>
    readonly createdAt: FieldRef<"Skill", 'DateTime'>
    readonly updatedAt: FieldRef<"Skill", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Skill findUnique
   */
  export type SkillFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill findUniqueOrThrow
   */
  export type SkillFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill findFirst
   */
  export type SkillFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill findFirstOrThrow
   */
  export type SkillFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill findMany
   */
  export type SkillFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skills to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill create
   */
  export type SkillCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The data needed to create a Skill.
     */
    data: XOR<SkillCreateInput, SkillUncheckedCreateInput>
  }

  /**
   * Skill createMany
   */
  export type SkillCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Skills.
     */
    data: SkillCreateManyInput | SkillCreateManyInput[]
  }

  /**
   * Skill createManyAndReturn
   */
  export type SkillCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Skills.
     */
    data: SkillCreateManyInput | SkillCreateManyInput[]
  }

  /**
   * Skill update
   */
  export type SkillUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The data needed to update a Skill.
     */
    data: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
    /**
     * Choose, which Skill to update.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill updateMany
   */
  export type SkillUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Skills.
     */
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     */
    where?: SkillWhereInput
  }

  /**
   * Skill upsert
   */
  export type SkillUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The filter to search for the Skill to update in case it exists.
     */
    where: SkillWhereUniqueInput
    /**
     * In case the Skill found by the `where` argument doesn't exist, create a new Skill with this data.
     */
    create: XOR<SkillCreateInput, SkillUncheckedCreateInput>
    /**
     * In case the Skill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
  }

  /**
   * Skill delete
   */
  export type SkillDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter which Skill to delete.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill deleteMany
   */
  export type SkillDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skills to delete
     */
    where?: SkillWhereInput
  }

  /**
   * Skill.skillsMatrix
   */
  export type Skill$skillsMatrixArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMatrix
     */
    select?: SkillMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMatrixInclude<ExtArgs> | null
    where?: SkillMatrixWhereInput
    orderBy?: SkillMatrixOrderByWithRelationInput | SkillMatrixOrderByWithRelationInput[]
    cursor?: SkillMatrixWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillMatrixScalarFieldEnum | SkillMatrixScalarFieldEnum[]
  }

  /**
   * Skill without action
   */
  export type SkillDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
  }


  /**
   * Model SkillMatrix
   */

  export type AggregateSkillMatrix = {
    _count: SkillMatrixCountAggregateOutputType | null
    _min: SkillMatrixMinAggregateOutputType | null
    _max: SkillMatrixMaxAggregateOutputType | null
  }

  export type SkillMatrixMinAggregateOutputType = {
    id: string | null
    staffId: string | null
    skillId: string | null
    level: string | null
    certificationDate: Date | null
    expiryDate: Date | null
    lastAssessed: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SkillMatrixMaxAggregateOutputType = {
    id: string | null
    staffId: string | null
    skillId: string | null
    level: string | null
    certificationDate: Date | null
    expiryDate: Date | null
    lastAssessed: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SkillMatrixCountAggregateOutputType = {
    id: number
    staffId: number
    skillId: number
    level: number
    certificationDate: number
    expiryDate: number
    lastAssessed: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SkillMatrixMinAggregateInputType = {
    id?: true
    staffId?: true
    skillId?: true
    level?: true
    certificationDate?: true
    expiryDate?: true
    lastAssessed?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SkillMatrixMaxAggregateInputType = {
    id?: true
    staffId?: true
    skillId?: true
    level?: true
    certificationDate?: true
    expiryDate?: true
    lastAssessed?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SkillMatrixCountAggregateInputType = {
    id?: true
    staffId?: true
    skillId?: true
    level?: true
    certificationDate?: true
    expiryDate?: true
    lastAssessed?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SkillMatrixAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkillMatrix to aggregate.
     */
    where?: SkillMatrixWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillMatrices to fetch.
     */
    orderBy?: SkillMatrixOrderByWithRelationInput | SkillMatrixOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillMatrixWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillMatrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillMatrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SkillMatrices
    **/
    _count?: true | SkillMatrixCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillMatrixMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillMatrixMaxAggregateInputType
  }

  export type GetSkillMatrixAggregateType<T extends SkillMatrixAggregateArgs> = {
        [P in keyof T & keyof AggregateSkillMatrix]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkillMatrix[P]>
      : GetScalarType<T[P], AggregateSkillMatrix[P]>
  }




  export type SkillMatrixGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillMatrixWhereInput
    orderBy?: SkillMatrixOrderByWithAggregationInput | SkillMatrixOrderByWithAggregationInput[]
    by: SkillMatrixScalarFieldEnum[] | SkillMatrixScalarFieldEnum
    having?: SkillMatrixScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillMatrixCountAggregateInputType | true
    _min?: SkillMatrixMinAggregateInputType
    _max?: SkillMatrixMaxAggregateInputType
  }

  export type SkillMatrixGroupByOutputType = {
    id: string
    staffId: string
    skillId: string
    level: string
    certificationDate: Date | null
    expiryDate: Date | null
    lastAssessed: Date | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: SkillMatrixCountAggregateOutputType | null
    _min: SkillMatrixMinAggregateOutputType | null
    _max: SkillMatrixMaxAggregateOutputType | null
  }

  type GetSkillMatrixGroupByPayload<T extends SkillMatrixGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkillMatrixGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillMatrixGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillMatrixGroupByOutputType[P]>
            : GetScalarType<T[P], SkillMatrixGroupByOutputType[P]>
        }
      >
    >


  export type SkillMatrixSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    skillId?: boolean
    level?: boolean
    certificationDate?: boolean
    expiryDate?: boolean
    lastAssessed?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staff?: boolean | StaffDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skillMatrix"]>

  export type SkillMatrixSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    skillId?: boolean
    level?: boolean
    certificationDate?: boolean
    expiryDate?: boolean
    lastAssessed?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staff?: boolean | StaffDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skillMatrix"]>

  export type SkillMatrixSelectScalar = {
    id?: boolean
    staffId?: boolean
    skillId?: boolean
    level?: boolean
    certificationDate?: boolean
    expiryDate?: boolean
    lastAssessed?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SkillMatrixInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | StaffDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }
  export type SkillMatrixIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | StaffDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }

  export type $SkillMatrixPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SkillMatrix"
    objects: {
      staff: Prisma.$StaffPayload<ExtArgs>
      skill: Prisma.$SkillPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      staffId: string
      skillId: string
      level: string
      certificationDate: Date | null
      expiryDate: Date | null
      lastAssessed: Date | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["skillMatrix"]>
    composites: {}
  }

  type SkillMatrixGetPayload<S extends boolean | null | undefined | SkillMatrixDefaultArgs> = $Result.GetResult<Prisma.$SkillMatrixPayload, S>

  type SkillMatrixCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SkillMatrixFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SkillMatrixCountAggregateInputType | true
    }

  export interface SkillMatrixDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SkillMatrix'], meta: { name: 'SkillMatrix' } }
    /**
     * Find zero or one SkillMatrix that matches the filter.
     * @param {SkillMatrixFindUniqueArgs} args - Arguments to find a SkillMatrix
     * @example
     * // Get one SkillMatrix
     * const skillMatrix = await prisma.skillMatrix.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkillMatrixFindUniqueArgs>(args: SelectSubset<T, SkillMatrixFindUniqueArgs<ExtArgs>>): Prisma__SkillMatrixClient<$Result.GetResult<Prisma.$SkillMatrixPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SkillMatrix that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SkillMatrixFindUniqueOrThrowArgs} args - Arguments to find a SkillMatrix
     * @example
     * // Get one SkillMatrix
     * const skillMatrix = await prisma.skillMatrix.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkillMatrixFindUniqueOrThrowArgs>(args: SelectSubset<T, SkillMatrixFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkillMatrixClient<$Result.GetResult<Prisma.$SkillMatrixPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SkillMatrix that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillMatrixFindFirstArgs} args - Arguments to find a SkillMatrix
     * @example
     * // Get one SkillMatrix
     * const skillMatrix = await prisma.skillMatrix.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkillMatrixFindFirstArgs>(args?: SelectSubset<T, SkillMatrixFindFirstArgs<ExtArgs>>): Prisma__SkillMatrixClient<$Result.GetResult<Prisma.$SkillMatrixPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SkillMatrix that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillMatrixFindFirstOrThrowArgs} args - Arguments to find a SkillMatrix
     * @example
     * // Get one SkillMatrix
     * const skillMatrix = await prisma.skillMatrix.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkillMatrixFindFirstOrThrowArgs>(args?: SelectSubset<T, SkillMatrixFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkillMatrixClient<$Result.GetResult<Prisma.$SkillMatrixPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SkillMatrices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillMatrixFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SkillMatrices
     * const skillMatrices = await prisma.skillMatrix.findMany()
     * 
     * // Get first 10 SkillMatrices
     * const skillMatrices = await prisma.skillMatrix.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillMatrixWithIdOnly = await prisma.skillMatrix.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkillMatrixFindManyArgs>(args?: SelectSubset<T, SkillMatrixFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillMatrixPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SkillMatrix.
     * @param {SkillMatrixCreateArgs} args - Arguments to create a SkillMatrix.
     * @example
     * // Create one SkillMatrix
     * const SkillMatrix = await prisma.skillMatrix.create({
     *   data: {
     *     // ... data to create a SkillMatrix
     *   }
     * })
     * 
     */
    create<T extends SkillMatrixCreateArgs>(args: SelectSubset<T, SkillMatrixCreateArgs<ExtArgs>>): Prisma__SkillMatrixClient<$Result.GetResult<Prisma.$SkillMatrixPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SkillMatrices.
     * @param {SkillMatrixCreateManyArgs} args - Arguments to create many SkillMatrices.
     * @example
     * // Create many SkillMatrices
     * const skillMatrix = await prisma.skillMatrix.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkillMatrixCreateManyArgs>(args?: SelectSubset<T, SkillMatrixCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SkillMatrices and returns the data saved in the database.
     * @param {SkillMatrixCreateManyAndReturnArgs} args - Arguments to create many SkillMatrices.
     * @example
     * // Create many SkillMatrices
     * const skillMatrix = await prisma.skillMatrix.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SkillMatrices and only return the `id`
     * const skillMatrixWithIdOnly = await prisma.skillMatrix.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkillMatrixCreateManyAndReturnArgs>(args?: SelectSubset<T, SkillMatrixCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillMatrixPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SkillMatrix.
     * @param {SkillMatrixDeleteArgs} args - Arguments to delete one SkillMatrix.
     * @example
     * // Delete one SkillMatrix
     * const SkillMatrix = await prisma.skillMatrix.delete({
     *   where: {
     *     // ... filter to delete one SkillMatrix
     *   }
     * })
     * 
     */
    delete<T extends SkillMatrixDeleteArgs>(args: SelectSubset<T, SkillMatrixDeleteArgs<ExtArgs>>): Prisma__SkillMatrixClient<$Result.GetResult<Prisma.$SkillMatrixPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SkillMatrix.
     * @param {SkillMatrixUpdateArgs} args - Arguments to update one SkillMatrix.
     * @example
     * // Update one SkillMatrix
     * const skillMatrix = await prisma.skillMatrix.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkillMatrixUpdateArgs>(args: SelectSubset<T, SkillMatrixUpdateArgs<ExtArgs>>): Prisma__SkillMatrixClient<$Result.GetResult<Prisma.$SkillMatrixPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SkillMatrices.
     * @param {SkillMatrixDeleteManyArgs} args - Arguments to filter SkillMatrices to delete.
     * @example
     * // Delete a few SkillMatrices
     * const { count } = await prisma.skillMatrix.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkillMatrixDeleteManyArgs>(args?: SelectSubset<T, SkillMatrixDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkillMatrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillMatrixUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SkillMatrices
     * const skillMatrix = await prisma.skillMatrix.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkillMatrixUpdateManyArgs>(args: SelectSubset<T, SkillMatrixUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SkillMatrix.
     * @param {SkillMatrixUpsertArgs} args - Arguments to update or create a SkillMatrix.
     * @example
     * // Update or create a SkillMatrix
     * const skillMatrix = await prisma.skillMatrix.upsert({
     *   create: {
     *     // ... data to create a SkillMatrix
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SkillMatrix we want to update
     *   }
     * })
     */
    upsert<T extends SkillMatrixUpsertArgs>(args: SelectSubset<T, SkillMatrixUpsertArgs<ExtArgs>>): Prisma__SkillMatrixClient<$Result.GetResult<Prisma.$SkillMatrixPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SkillMatrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillMatrixCountArgs} args - Arguments to filter SkillMatrices to count.
     * @example
     * // Count the number of SkillMatrices
     * const count = await prisma.skillMatrix.count({
     *   where: {
     *     // ... the filter for the SkillMatrices we want to count
     *   }
     * })
    **/
    count<T extends SkillMatrixCountArgs>(
      args?: Subset<T, SkillMatrixCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillMatrixCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SkillMatrix.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillMatrixAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillMatrixAggregateArgs>(args: Subset<T, SkillMatrixAggregateArgs>): Prisma.PrismaPromise<GetSkillMatrixAggregateType<T>>

    /**
     * Group by SkillMatrix.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillMatrixGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillMatrixGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillMatrixGroupByArgs['orderBy'] }
        : { orderBy?: SkillMatrixGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillMatrixGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillMatrixGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SkillMatrix model
   */
  readonly fields: SkillMatrixFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SkillMatrix.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkillMatrixClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    staff<T extends StaffDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffDefaultArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    skill<T extends SkillDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkillDefaultArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SkillMatrix model
   */ 
  interface SkillMatrixFieldRefs {
    readonly id: FieldRef<"SkillMatrix", 'String'>
    readonly staffId: FieldRef<"SkillMatrix", 'String'>
    readonly skillId: FieldRef<"SkillMatrix", 'String'>
    readonly level: FieldRef<"SkillMatrix", 'String'>
    readonly certificationDate: FieldRef<"SkillMatrix", 'DateTime'>
    readonly expiryDate: FieldRef<"SkillMatrix", 'DateTime'>
    readonly lastAssessed: FieldRef<"SkillMatrix", 'DateTime'>
    readonly notes: FieldRef<"SkillMatrix", 'String'>
    readonly createdAt: FieldRef<"SkillMatrix", 'DateTime'>
    readonly updatedAt: FieldRef<"SkillMatrix", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SkillMatrix findUnique
   */
  export type SkillMatrixFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMatrix
     */
    select?: SkillMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMatrixInclude<ExtArgs> | null
    /**
     * Filter, which SkillMatrix to fetch.
     */
    where: SkillMatrixWhereUniqueInput
  }

  /**
   * SkillMatrix findUniqueOrThrow
   */
  export type SkillMatrixFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMatrix
     */
    select?: SkillMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMatrixInclude<ExtArgs> | null
    /**
     * Filter, which SkillMatrix to fetch.
     */
    where: SkillMatrixWhereUniqueInput
  }

  /**
   * SkillMatrix findFirst
   */
  export type SkillMatrixFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMatrix
     */
    select?: SkillMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMatrixInclude<ExtArgs> | null
    /**
     * Filter, which SkillMatrix to fetch.
     */
    where?: SkillMatrixWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillMatrices to fetch.
     */
    orderBy?: SkillMatrixOrderByWithRelationInput | SkillMatrixOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkillMatrices.
     */
    cursor?: SkillMatrixWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillMatrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillMatrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkillMatrices.
     */
    distinct?: SkillMatrixScalarFieldEnum | SkillMatrixScalarFieldEnum[]
  }

  /**
   * SkillMatrix findFirstOrThrow
   */
  export type SkillMatrixFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMatrix
     */
    select?: SkillMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMatrixInclude<ExtArgs> | null
    /**
     * Filter, which SkillMatrix to fetch.
     */
    where?: SkillMatrixWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillMatrices to fetch.
     */
    orderBy?: SkillMatrixOrderByWithRelationInput | SkillMatrixOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkillMatrices.
     */
    cursor?: SkillMatrixWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillMatrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillMatrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkillMatrices.
     */
    distinct?: SkillMatrixScalarFieldEnum | SkillMatrixScalarFieldEnum[]
  }

  /**
   * SkillMatrix findMany
   */
  export type SkillMatrixFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMatrix
     */
    select?: SkillMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMatrixInclude<ExtArgs> | null
    /**
     * Filter, which SkillMatrices to fetch.
     */
    where?: SkillMatrixWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillMatrices to fetch.
     */
    orderBy?: SkillMatrixOrderByWithRelationInput | SkillMatrixOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SkillMatrices.
     */
    cursor?: SkillMatrixWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillMatrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillMatrices.
     */
    skip?: number
    distinct?: SkillMatrixScalarFieldEnum | SkillMatrixScalarFieldEnum[]
  }

  /**
   * SkillMatrix create
   */
  export type SkillMatrixCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMatrix
     */
    select?: SkillMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMatrixInclude<ExtArgs> | null
    /**
     * The data needed to create a SkillMatrix.
     */
    data: XOR<SkillMatrixCreateInput, SkillMatrixUncheckedCreateInput>
  }

  /**
   * SkillMatrix createMany
   */
  export type SkillMatrixCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SkillMatrices.
     */
    data: SkillMatrixCreateManyInput | SkillMatrixCreateManyInput[]
  }

  /**
   * SkillMatrix createManyAndReturn
   */
  export type SkillMatrixCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMatrix
     */
    select?: SkillMatrixSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SkillMatrices.
     */
    data: SkillMatrixCreateManyInput | SkillMatrixCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMatrixIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkillMatrix update
   */
  export type SkillMatrixUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMatrix
     */
    select?: SkillMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMatrixInclude<ExtArgs> | null
    /**
     * The data needed to update a SkillMatrix.
     */
    data: XOR<SkillMatrixUpdateInput, SkillMatrixUncheckedUpdateInput>
    /**
     * Choose, which SkillMatrix to update.
     */
    where: SkillMatrixWhereUniqueInput
  }

  /**
   * SkillMatrix updateMany
   */
  export type SkillMatrixUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SkillMatrices.
     */
    data: XOR<SkillMatrixUpdateManyMutationInput, SkillMatrixUncheckedUpdateManyInput>
    /**
     * Filter which SkillMatrices to update
     */
    where?: SkillMatrixWhereInput
  }

  /**
   * SkillMatrix upsert
   */
  export type SkillMatrixUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMatrix
     */
    select?: SkillMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMatrixInclude<ExtArgs> | null
    /**
     * The filter to search for the SkillMatrix to update in case it exists.
     */
    where: SkillMatrixWhereUniqueInput
    /**
     * In case the SkillMatrix found by the `where` argument doesn't exist, create a new SkillMatrix with this data.
     */
    create: XOR<SkillMatrixCreateInput, SkillMatrixUncheckedCreateInput>
    /**
     * In case the SkillMatrix was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillMatrixUpdateInput, SkillMatrixUncheckedUpdateInput>
  }

  /**
   * SkillMatrix delete
   */
  export type SkillMatrixDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMatrix
     */
    select?: SkillMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMatrixInclude<ExtArgs> | null
    /**
     * Filter which SkillMatrix to delete.
     */
    where: SkillMatrixWhereUniqueInput
  }

  /**
   * SkillMatrix deleteMany
   */
  export type SkillMatrixDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkillMatrices to delete
     */
    where?: SkillMatrixWhereInput
  }

  /**
   * SkillMatrix without action
   */
  export type SkillMatrixDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMatrix
     */
    select?: SkillMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMatrixInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const StaffScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    status: 'status',
    scheduleType: 'scheduleType',
    workDays: 'workDays',
    week1Days: 'week1Days',
    week2Days: 'week2Days',
    weekOffNum: 'weekOffNum',
    weekOffShiftType: 'weekOffShiftType',
    inactiveDate: 'inactiveDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StaffScalarFieldEnum = (typeof StaffScalarFieldEnum)[keyof typeof StaffScalarFieldEnum]


  export const RosterPeriodScalarFieldEnum: {
    id: 'id',
    startDate: 'startDate',
    endDate: 'endDate',
    weeks: 'weeks',
    weekMetadata: 'weekMetadata',
    staffSnapshot: 'staffSnapshot',
    stats: 'stats',
    generatedAt: 'generatedAt',
    generatedBy: 'generatedBy'
  };

  export type RosterPeriodScalarFieldEnum = (typeof RosterPeriodScalarFieldEnum)[keyof typeof RosterPeriodScalarFieldEnum]


  export const ShiftScalarFieldEnum: {
    id: 'id',
    periodId: 'periodId',
    staffId: 'staffId',
    week: 'week',
    day: 'day',
    shiftType: 'shiftType',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShiftScalarFieldEnum = (typeof ShiftScalarFieldEnum)[keyof typeof ShiftScalarFieldEnum]


  export const LeaveRequestScalarFieldEnum: {
    id: 'id',
    staffId: 'staffId',
    type: 'type',
    startDate: 'startDate',
    endDate: 'endDate',
    reason: 'reason',
    status: 'status',
    submittedAt: 'submittedAt',
    reviewedAt: 'reviewedAt',
    reviewedBy: 'reviewedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LeaveRequestScalarFieldEnum = (typeof LeaveRequestScalarFieldEnum)[keyof typeof LeaveRequestScalarFieldEnum]


  export const LeaveDayScalarFieldEnum: {
    id: 'id',
    staffId: 'staffId',
    date: 'date',
    reason: 'reason',
    createdAt: 'createdAt'
  };

  export type LeaveDayScalarFieldEnum = (typeof LeaveDayScalarFieldEnum)[keyof typeof LeaveDayScalarFieldEnum]


  export const LeavePeriodScalarFieldEnum: {
    id: 'id',
    staffId: 'staffId',
    startDate: 'startDate',
    endDate: 'endDate',
    reason: 'reason',
    createdAt: 'createdAt'
  };

  export type LeavePeriodScalarFieldEnum = (typeof LeavePeriodScalarFieldEnum)[keyof typeof LeavePeriodScalarFieldEnum]


  export const ShiftSwapScalarFieldEnum: {
    id: 'id',
    proposedShiftId: 'proposedShiftId',
    targetShiftId: 'targetShiftId',
    proposerId: 'proposerId',
    receiverId: 'receiverId',
    status: 'status',
    proposerNote: 'proposerNote',
    receiverNote: 'receiverNote',
    proposedAt: 'proposedAt',
    respondedAt: 'respondedAt',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShiftSwapScalarFieldEnum = (typeof ShiftSwapScalarFieldEnum)[keyof typeof ShiftSwapScalarFieldEnum]


  export const SkillScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    category: 'category',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SkillScalarFieldEnum = (typeof SkillScalarFieldEnum)[keyof typeof SkillScalarFieldEnum]


  export const SkillMatrixScalarFieldEnum: {
    id: 'id',
    staffId: 'staffId',
    skillId: 'skillId',
    level: 'level',
    certificationDate: 'certificationDate',
    expiryDate: 'expiryDate',
    lastAssessed: 'lastAssessed',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SkillMatrixScalarFieldEnum = (typeof SkillMatrixScalarFieldEnum)[keyof typeof SkillMatrixScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    staff?: XOR<StaffNullableRelationFilter, StaffWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    staff?: StaffOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    staff?: XOR<StaffNullableRelationFilter, StaffWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type StaffWhereInput = {
    AND?: StaffWhereInput | StaffWhereInput[]
    OR?: StaffWhereInput[]
    NOT?: StaffWhereInput | StaffWhereInput[]
    id?: StringFilter<"Staff"> | string
    userId?: StringFilter<"Staff"> | string
    name?: StringFilter<"Staff"> | string
    status?: StringFilter<"Staff"> | string
    scheduleType?: StringFilter<"Staff"> | string
    workDays?: StringNullableFilter<"Staff"> | string | null
    week1Days?: StringNullableFilter<"Staff"> | string | null
    week2Days?: StringNullableFilter<"Staff"> | string | null
    weekOffNum?: IntNullableFilter<"Staff"> | number | null
    weekOffShiftType?: StringNullableFilter<"Staff"> | string | null
    inactiveDate?: DateTimeNullableFilter<"Staff"> | Date | string | null
    createdAt?: DateTimeFilter<"Staff"> | Date | string
    updatedAt?: DateTimeFilter<"Staff"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    shifts?: ShiftListRelationFilter
    leaveRequests?: LeaveRequestListRelationFilter
    leaveDays?: LeaveDayListRelationFilter
    leavePeriods?: LeavePeriodListRelationFilter
    skillsMatrix?: SkillMatrixListRelationFilter
    swapsProposed?: ShiftSwapListRelationFilter
    swapsReceived?: ShiftSwapListRelationFilter
  }

  export type StaffOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    scheduleType?: SortOrder
    workDays?: SortOrderInput | SortOrder
    week1Days?: SortOrderInput | SortOrder
    week2Days?: SortOrderInput | SortOrder
    weekOffNum?: SortOrderInput | SortOrder
    weekOffShiftType?: SortOrderInput | SortOrder
    inactiveDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    shifts?: ShiftOrderByRelationAggregateInput
    leaveRequests?: LeaveRequestOrderByRelationAggregateInput
    leaveDays?: LeaveDayOrderByRelationAggregateInput
    leavePeriods?: LeavePeriodOrderByRelationAggregateInput
    skillsMatrix?: SkillMatrixOrderByRelationAggregateInput
    swapsProposed?: ShiftSwapOrderByRelationAggregateInput
    swapsReceived?: ShiftSwapOrderByRelationAggregateInput
  }

  export type StaffWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: StaffWhereInput | StaffWhereInput[]
    OR?: StaffWhereInput[]
    NOT?: StaffWhereInput | StaffWhereInput[]
    name?: StringFilter<"Staff"> | string
    status?: StringFilter<"Staff"> | string
    scheduleType?: StringFilter<"Staff"> | string
    workDays?: StringNullableFilter<"Staff"> | string | null
    week1Days?: StringNullableFilter<"Staff"> | string | null
    week2Days?: StringNullableFilter<"Staff"> | string | null
    weekOffNum?: IntNullableFilter<"Staff"> | number | null
    weekOffShiftType?: StringNullableFilter<"Staff"> | string | null
    inactiveDate?: DateTimeNullableFilter<"Staff"> | Date | string | null
    createdAt?: DateTimeFilter<"Staff"> | Date | string
    updatedAt?: DateTimeFilter<"Staff"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    shifts?: ShiftListRelationFilter
    leaveRequests?: LeaveRequestListRelationFilter
    leaveDays?: LeaveDayListRelationFilter
    leavePeriods?: LeavePeriodListRelationFilter
    skillsMatrix?: SkillMatrixListRelationFilter
    swapsProposed?: ShiftSwapListRelationFilter
    swapsReceived?: ShiftSwapListRelationFilter
  }, "id" | "userId">

  export type StaffOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    scheduleType?: SortOrder
    workDays?: SortOrderInput | SortOrder
    week1Days?: SortOrderInput | SortOrder
    week2Days?: SortOrderInput | SortOrder
    weekOffNum?: SortOrderInput | SortOrder
    weekOffShiftType?: SortOrderInput | SortOrder
    inactiveDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StaffCountOrderByAggregateInput
    _avg?: StaffAvgOrderByAggregateInput
    _max?: StaffMaxOrderByAggregateInput
    _min?: StaffMinOrderByAggregateInput
    _sum?: StaffSumOrderByAggregateInput
  }

  export type StaffScalarWhereWithAggregatesInput = {
    AND?: StaffScalarWhereWithAggregatesInput | StaffScalarWhereWithAggregatesInput[]
    OR?: StaffScalarWhereWithAggregatesInput[]
    NOT?: StaffScalarWhereWithAggregatesInput | StaffScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Staff"> | string
    userId?: StringWithAggregatesFilter<"Staff"> | string
    name?: StringWithAggregatesFilter<"Staff"> | string
    status?: StringWithAggregatesFilter<"Staff"> | string
    scheduleType?: StringWithAggregatesFilter<"Staff"> | string
    workDays?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    week1Days?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    week2Days?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    weekOffNum?: IntNullableWithAggregatesFilter<"Staff"> | number | null
    weekOffShiftType?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    inactiveDate?: DateTimeNullableWithAggregatesFilter<"Staff"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Staff"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Staff"> | Date | string
  }

  export type RosterPeriodWhereInput = {
    AND?: RosterPeriodWhereInput | RosterPeriodWhereInput[]
    OR?: RosterPeriodWhereInput[]
    NOT?: RosterPeriodWhereInput | RosterPeriodWhereInput[]
    id?: StringFilter<"RosterPeriod"> | string
    startDate?: DateTimeFilter<"RosterPeriod"> | Date | string
    endDate?: DateTimeFilter<"RosterPeriod"> | Date | string
    weeks?: IntFilter<"RosterPeriod"> | number
    weekMetadata?: StringFilter<"RosterPeriod"> | string
    staffSnapshot?: StringFilter<"RosterPeriod"> | string
    stats?: StringFilter<"RosterPeriod"> | string
    generatedAt?: DateTimeFilter<"RosterPeriod"> | Date | string
    generatedBy?: StringNullableFilter<"RosterPeriod"> | string | null
    shifts?: ShiftListRelationFilter
  }

  export type RosterPeriodOrderByWithRelationInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    weeks?: SortOrder
    weekMetadata?: SortOrder
    staffSnapshot?: SortOrder
    stats?: SortOrder
    generatedAt?: SortOrder
    generatedBy?: SortOrderInput | SortOrder
    shifts?: ShiftOrderByRelationAggregateInput
  }

  export type RosterPeriodWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RosterPeriodWhereInput | RosterPeriodWhereInput[]
    OR?: RosterPeriodWhereInput[]
    NOT?: RosterPeriodWhereInput | RosterPeriodWhereInput[]
    startDate?: DateTimeFilter<"RosterPeriod"> | Date | string
    endDate?: DateTimeFilter<"RosterPeriod"> | Date | string
    weeks?: IntFilter<"RosterPeriod"> | number
    weekMetadata?: StringFilter<"RosterPeriod"> | string
    staffSnapshot?: StringFilter<"RosterPeriod"> | string
    stats?: StringFilter<"RosterPeriod"> | string
    generatedAt?: DateTimeFilter<"RosterPeriod"> | Date | string
    generatedBy?: StringNullableFilter<"RosterPeriod"> | string | null
    shifts?: ShiftListRelationFilter
  }, "id">

  export type RosterPeriodOrderByWithAggregationInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    weeks?: SortOrder
    weekMetadata?: SortOrder
    staffSnapshot?: SortOrder
    stats?: SortOrder
    generatedAt?: SortOrder
    generatedBy?: SortOrderInput | SortOrder
    _count?: RosterPeriodCountOrderByAggregateInput
    _avg?: RosterPeriodAvgOrderByAggregateInput
    _max?: RosterPeriodMaxOrderByAggregateInput
    _min?: RosterPeriodMinOrderByAggregateInput
    _sum?: RosterPeriodSumOrderByAggregateInput
  }

  export type RosterPeriodScalarWhereWithAggregatesInput = {
    AND?: RosterPeriodScalarWhereWithAggregatesInput | RosterPeriodScalarWhereWithAggregatesInput[]
    OR?: RosterPeriodScalarWhereWithAggregatesInput[]
    NOT?: RosterPeriodScalarWhereWithAggregatesInput | RosterPeriodScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RosterPeriod"> | string
    startDate?: DateTimeWithAggregatesFilter<"RosterPeriod"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"RosterPeriod"> | Date | string
    weeks?: IntWithAggregatesFilter<"RosterPeriod"> | number
    weekMetadata?: StringWithAggregatesFilter<"RosterPeriod"> | string
    staffSnapshot?: StringWithAggregatesFilter<"RosterPeriod"> | string
    stats?: StringWithAggregatesFilter<"RosterPeriod"> | string
    generatedAt?: DateTimeWithAggregatesFilter<"RosterPeriod"> | Date | string
    generatedBy?: StringNullableWithAggregatesFilter<"RosterPeriod"> | string | null
  }

  export type ShiftWhereInput = {
    AND?: ShiftWhereInput | ShiftWhereInput[]
    OR?: ShiftWhereInput[]
    NOT?: ShiftWhereInput | ShiftWhereInput[]
    id?: StringFilter<"Shift"> | string
    periodId?: StringFilter<"Shift"> | string
    staffId?: StringFilter<"Shift"> | string
    week?: IntFilter<"Shift"> | number
    day?: StringFilter<"Shift"> | string
    shiftType?: StringFilter<"Shift"> | string
    status?: StringFilter<"Shift"> | string
    createdAt?: DateTimeFilter<"Shift"> | Date | string
    updatedAt?: DateTimeFilter<"Shift"> | Date | string
    period?: XOR<RosterPeriodRelationFilter, RosterPeriodWhereInput>
    staff?: XOR<StaffRelationFilter, StaffWhereInput>
    swaps?: ShiftSwapListRelationFilter
  }

  export type ShiftOrderByWithRelationInput = {
    id?: SortOrder
    periodId?: SortOrder
    staffId?: SortOrder
    week?: SortOrder
    day?: SortOrder
    shiftType?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    period?: RosterPeriodOrderByWithRelationInput
    staff?: StaffOrderByWithRelationInput
    swaps?: ShiftSwapOrderByRelationAggregateInput
  }

  export type ShiftWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ShiftWhereInput | ShiftWhereInput[]
    OR?: ShiftWhereInput[]
    NOT?: ShiftWhereInput | ShiftWhereInput[]
    periodId?: StringFilter<"Shift"> | string
    staffId?: StringFilter<"Shift"> | string
    week?: IntFilter<"Shift"> | number
    day?: StringFilter<"Shift"> | string
    shiftType?: StringFilter<"Shift"> | string
    status?: StringFilter<"Shift"> | string
    createdAt?: DateTimeFilter<"Shift"> | Date | string
    updatedAt?: DateTimeFilter<"Shift"> | Date | string
    period?: XOR<RosterPeriodRelationFilter, RosterPeriodWhereInput>
    staff?: XOR<StaffRelationFilter, StaffWhereInput>
    swaps?: ShiftSwapListRelationFilter
  }, "id">

  export type ShiftOrderByWithAggregationInput = {
    id?: SortOrder
    periodId?: SortOrder
    staffId?: SortOrder
    week?: SortOrder
    day?: SortOrder
    shiftType?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShiftCountOrderByAggregateInput
    _avg?: ShiftAvgOrderByAggregateInput
    _max?: ShiftMaxOrderByAggregateInput
    _min?: ShiftMinOrderByAggregateInput
    _sum?: ShiftSumOrderByAggregateInput
  }

  export type ShiftScalarWhereWithAggregatesInput = {
    AND?: ShiftScalarWhereWithAggregatesInput | ShiftScalarWhereWithAggregatesInput[]
    OR?: ShiftScalarWhereWithAggregatesInput[]
    NOT?: ShiftScalarWhereWithAggregatesInput | ShiftScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Shift"> | string
    periodId?: StringWithAggregatesFilter<"Shift"> | string
    staffId?: StringWithAggregatesFilter<"Shift"> | string
    week?: IntWithAggregatesFilter<"Shift"> | number
    day?: StringWithAggregatesFilter<"Shift"> | string
    shiftType?: StringWithAggregatesFilter<"Shift"> | string
    status?: StringWithAggregatesFilter<"Shift"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Shift"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Shift"> | Date | string
  }

  export type LeaveRequestWhereInput = {
    AND?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    OR?: LeaveRequestWhereInput[]
    NOT?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    id?: StringFilter<"LeaveRequest"> | string
    staffId?: StringFilter<"LeaveRequest"> | string
    type?: StringFilter<"LeaveRequest"> | string
    startDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    endDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    reason?: StringNullableFilter<"LeaveRequest"> | string | null
    status?: StringFilter<"LeaveRequest"> | string
    submittedAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    reviewedBy?: StringNullableFilter<"LeaveRequest"> | string | null
    createdAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    updatedAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    staff?: XOR<StaffRelationFilter, StaffWhereInput>
  }

  export type LeaveRequestOrderByWithRelationInput = {
    id?: SortOrder
    staffId?: SortOrder
    type?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrderInput | SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    staff?: StaffOrderByWithRelationInput
  }

  export type LeaveRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    OR?: LeaveRequestWhereInput[]
    NOT?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    staffId?: StringFilter<"LeaveRequest"> | string
    type?: StringFilter<"LeaveRequest"> | string
    startDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    endDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    reason?: StringNullableFilter<"LeaveRequest"> | string | null
    status?: StringFilter<"LeaveRequest"> | string
    submittedAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    reviewedBy?: StringNullableFilter<"LeaveRequest"> | string | null
    createdAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    updatedAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    staff?: XOR<StaffRelationFilter, StaffWhereInput>
  }, "id">

  export type LeaveRequestOrderByWithAggregationInput = {
    id?: SortOrder
    staffId?: SortOrder
    type?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrderInput | SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LeaveRequestCountOrderByAggregateInput
    _max?: LeaveRequestMaxOrderByAggregateInput
    _min?: LeaveRequestMinOrderByAggregateInput
  }

  export type LeaveRequestScalarWhereWithAggregatesInput = {
    AND?: LeaveRequestScalarWhereWithAggregatesInput | LeaveRequestScalarWhereWithAggregatesInput[]
    OR?: LeaveRequestScalarWhereWithAggregatesInput[]
    NOT?: LeaveRequestScalarWhereWithAggregatesInput | LeaveRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LeaveRequest"> | string
    staffId?: StringWithAggregatesFilter<"LeaveRequest"> | string
    type?: StringWithAggregatesFilter<"LeaveRequest"> | string
    startDate?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
    reason?: StringNullableWithAggregatesFilter<"LeaveRequest"> | string | null
    status?: StringWithAggregatesFilter<"LeaveRequest"> | string
    submittedAt?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
    reviewedAt?: DateTimeNullableWithAggregatesFilter<"LeaveRequest"> | Date | string | null
    reviewedBy?: StringNullableWithAggregatesFilter<"LeaveRequest"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
  }

  export type LeaveDayWhereInput = {
    AND?: LeaveDayWhereInput | LeaveDayWhereInput[]
    OR?: LeaveDayWhereInput[]
    NOT?: LeaveDayWhereInput | LeaveDayWhereInput[]
    id?: StringFilter<"LeaveDay"> | string
    staffId?: StringFilter<"LeaveDay"> | string
    date?: DateTimeFilter<"LeaveDay"> | Date | string
    reason?: StringNullableFilter<"LeaveDay"> | string | null
    createdAt?: DateTimeFilter<"LeaveDay"> | Date | string
    staff?: XOR<StaffRelationFilter, StaffWhereInput>
  }

  export type LeaveDayOrderByWithRelationInput = {
    id?: SortOrder
    staffId?: SortOrder
    date?: SortOrder
    reason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    staff?: StaffOrderByWithRelationInput
  }

  export type LeaveDayWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LeaveDayWhereInput | LeaveDayWhereInput[]
    OR?: LeaveDayWhereInput[]
    NOT?: LeaveDayWhereInput | LeaveDayWhereInput[]
    staffId?: StringFilter<"LeaveDay"> | string
    date?: DateTimeFilter<"LeaveDay"> | Date | string
    reason?: StringNullableFilter<"LeaveDay"> | string | null
    createdAt?: DateTimeFilter<"LeaveDay"> | Date | string
    staff?: XOR<StaffRelationFilter, StaffWhereInput>
  }, "id">

  export type LeaveDayOrderByWithAggregationInput = {
    id?: SortOrder
    staffId?: SortOrder
    date?: SortOrder
    reason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: LeaveDayCountOrderByAggregateInput
    _max?: LeaveDayMaxOrderByAggregateInput
    _min?: LeaveDayMinOrderByAggregateInput
  }

  export type LeaveDayScalarWhereWithAggregatesInput = {
    AND?: LeaveDayScalarWhereWithAggregatesInput | LeaveDayScalarWhereWithAggregatesInput[]
    OR?: LeaveDayScalarWhereWithAggregatesInput[]
    NOT?: LeaveDayScalarWhereWithAggregatesInput | LeaveDayScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LeaveDay"> | string
    staffId?: StringWithAggregatesFilter<"LeaveDay"> | string
    date?: DateTimeWithAggregatesFilter<"LeaveDay"> | Date | string
    reason?: StringNullableWithAggregatesFilter<"LeaveDay"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"LeaveDay"> | Date | string
  }

  export type LeavePeriodWhereInput = {
    AND?: LeavePeriodWhereInput | LeavePeriodWhereInput[]
    OR?: LeavePeriodWhereInput[]
    NOT?: LeavePeriodWhereInput | LeavePeriodWhereInput[]
    id?: StringFilter<"LeavePeriod"> | string
    staffId?: StringFilter<"LeavePeriod"> | string
    startDate?: DateTimeFilter<"LeavePeriod"> | Date | string
    endDate?: DateTimeFilter<"LeavePeriod"> | Date | string
    reason?: StringNullableFilter<"LeavePeriod"> | string | null
    createdAt?: DateTimeFilter<"LeavePeriod"> | Date | string
    staff?: XOR<StaffRelationFilter, StaffWhereInput>
  }

  export type LeavePeriodOrderByWithRelationInput = {
    id?: SortOrder
    staffId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    staff?: StaffOrderByWithRelationInput
  }

  export type LeavePeriodWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LeavePeriodWhereInput | LeavePeriodWhereInput[]
    OR?: LeavePeriodWhereInput[]
    NOT?: LeavePeriodWhereInput | LeavePeriodWhereInput[]
    staffId?: StringFilter<"LeavePeriod"> | string
    startDate?: DateTimeFilter<"LeavePeriod"> | Date | string
    endDate?: DateTimeFilter<"LeavePeriod"> | Date | string
    reason?: StringNullableFilter<"LeavePeriod"> | string | null
    createdAt?: DateTimeFilter<"LeavePeriod"> | Date | string
    staff?: XOR<StaffRelationFilter, StaffWhereInput>
  }, "id">

  export type LeavePeriodOrderByWithAggregationInput = {
    id?: SortOrder
    staffId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: LeavePeriodCountOrderByAggregateInput
    _max?: LeavePeriodMaxOrderByAggregateInput
    _min?: LeavePeriodMinOrderByAggregateInput
  }

  export type LeavePeriodScalarWhereWithAggregatesInput = {
    AND?: LeavePeriodScalarWhereWithAggregatesInput | LeavePeriodScalarWhereWithAggregatesInput[]
    OR?: LeavePeriodScalarWhereWithAggregatesInput[]
    NOT?: LeavePeriodScalarWhereWithAggregatesInput | LeavePeriodScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LeavePeriod"> | string
    staffId?: StringWithAggregatesFilter<"LeavePeriod"> | string
    startDate?: DateTimeWithAggregatesFilter<"LeavePeriod"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"LeavePeriod"> | Date | string
    reason?: StringNullableWithAggregatesFilter<"LeavePeriod"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"LeavePeriod"> | Date | string
  }

  export type ShiftSwapWhereInput = {
    AND?: ShiftSwapWhereInput | ShiftSwapWhereInput[]
    OR?: ShiftSwapWhereInput[]
    NOT?: ShiftSwapWhereInput | ShiftSwapWhereInput[]
    id?: StringFilter<"ShiftSwap"> | string
    proposedShiftId?: StringFilter<"ShiftSwap"> | string
    targetShiftId?: StringFilter<"ShiftSwap"> | string
    proposerId?: StringFilter<"ShiftSwap"> | string
    receiverId?: StringFilter<"ShiftSwap"> | string
    status?: StringFilter<"ShiftSwap"> | string
    proposerNote?: StringNullableFilter<"ShiftSwap"> | string | null
    receiverNote?: StringNullableFilter<"ShiftSwap"> | string | null
    proposedAt?: DateTimeFilter<"ShiftSwap"> | Date | string
    respondedAt?: DateTimeNullableFilter<"ShiftSwap"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ShiftSwap"> | Date | string | null
    createdAt?: DateTimeFilter<"ShiftSwap"> | Date | string
    updatedAt?: DateTimeFilter<"ShiftSwap"> | Date | string
    proposedShift?: XOR<ShiftRelationFilter, ShiftWhereInput>
    proposer?: XOR<StaffRelationFilter, StaffWhereInput>
    receiver?: XOR<StaffRelationFilter, StaffWhereInput>
  }

  export type ShiftSwapOrderByWithRelationInput = {
    id?: SortOrder
    proposedShiftId?: SortOrder
    targetShiftId?: SortOrder
    proposerId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    proposerNote?: SortOrderInput | SortOrder
    receiverNote?: SortOrderInput | SortOrder
    proposedAt?: SortOrder
    respondedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    proposedShift?: ShiftOrderByWithRelationInput
    proposer?: StaffOrderByWithRelationInput
    receiver?: StaffOrderByWithRelationInput
  }

  export type ShiftSwapWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ShiftSwapWhereInput | ShiftSwapWhereInput[]
    OR?: ShiftSwapWhereInput[]
    NOT?: ShiftSwapWhereInput | ShiftSwapWhereInput[]
    proposedShiftId?: StringFilter<"ShiftSwap"> | string
    targetShiftId?: StringFilter<"ShiftSwap"> | string
    proposerId?: StringFilter<"ShiftSwap"> | string
    receiverId?: StringFilter<"ShiftSwap"> | string
    status?: StringFilter<"ShiftSwap"> | string
    proposerNote?: StringNullableFilter<"ShiftSwap"> | string | null
    receiverNote?: StringNullableFilter<"ShiftSwap"> | string | null
    proposedAt?: DateTimeFilter<"ShiftSwap"> | Date | string
    respondedAt?: DateTimeNullableFilter<"ShiftSwap"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ShiftSwap"> | Date | string | null
    createdAt?: DateTimeFilter<"ShiftSwap"> | Date | string
    updatedAt?: DateTimeFilter<"ShiftSwap"> | Date | string
    proposedShift?: XOR<ShiftRelationFilter, ShiftWhereInput>
    proposer?: XOR<StaffRelationFilter, StaffWhereInput>
    receiver?: XOR<StaffRelationFilter, StaffWhereInput>
  }, "id">

  export type ShiftSwapOrderByWithAggregationInput = {
    id?: SortOrder
    proposedShiftId?: SortOrder
    targetShiftId?: SortOrder
    proposerId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    proposerNote?: SortOrderInput | SortOrder
    receiverNote?: SortOrderInput | SortOrder
    proposedAt?: SortOrder
    respondedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShiftSwapCountOrderByAggregateInput
    _max?: ShiftSwapMaxOrderByAggregateInput
    _min?: ShiftSwapMinOrderByAggregateInput
  }

  export type ShiftSwapScalarWhereWithAggregatesInput = {
    AND?: ShiftSwapScalarWhereWithAggregatesInput | ShiftSwapScalarWhereWithAggregatesInput[]
    OR?: ShiftSwapScalarWhereWithAggregatesInput[]
    NOT?: ShiftSwapScalarWhereWithAggregatesInput | ShiftSwapScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ShiftSwap"> | string
    proposedShiftId?: StringWithAggregatesFilter<"ShiftSwap"> | string
    targetShiftId?: StringWithAggregatesFilter<"ShiftSwap"> | string
    proposerId?: StringWithAggregatesFilter<"ShiftSwap"> | string
    receiverId?: StringWithAggregatesFilter<"ShiftSwap"> | string
    status?: StringWithAggregatesFilter<"ShiftSwap"> | string
    proposerNote?: StringNullableWithAggregatesFilter<"ShiftSwap"> | string | null
    receiverNote?: StringNullableWithAggregatesFilter<"ShiftSwap"> | string | null
    proposedAt?: DateTimeWithAggregatesFilter<"ShiftSwap"> | Date | string
    respondedAt?: DateTimeNullableWithAggregatesFilter<"ShiftSwap"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"ShiftSwap"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ShiftSwap"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ShiftSwap"> | Date | string
  }

  export type SkillWhereInput = {
    AND?: SkillWhereInput | SkillWhereInput[]
    OR?: SkillWhereInput[]
    NOT?: SkillWhereInput | SkillWhereInput[]
    id?: StringFilter<"Skill"> | string
    name?: StringFilter<"Skill"> | string
    description?: StringNullableFilter<"Skill"> | string | null
    category?: StringNullableFilter<"Skill"> | string | null
    createdAt?: DateTimeFilter<"Skill"> | Date | string
    updatedAt?: DateTimeFilter<"Skill"> | Date | string
    skillsMatrix?: SkillMatrixListRelationFilter
  }

  export type SkillOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    skillsMatrix?: SkillMatrixOrderByRelationAggregateInput
  }

  export type SkillWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: SkillWhereInput | SkillWhereInput[]
    OR?: SkillWhereInput[]
    NOT?: SkillWhereInput | SkillWhereInput[]
    description?: StringNullableFilter<"Skill"> | string | null
    category?: StringNullableFilter<"Skill"> | string | null
    createdAt?: DateTimeFilter<"Skill"> | Date | string
    updatedAt?: DateTimeFilter<"Skill"> | Date | string
    skillsMatrix?: SkillMatrixListRelationFilter
  }, "id" | "name">

  export type SkillOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SkillCountOrderByAggregateInput
    _max?: SkillMaxOrderByAggregateInput
    _min?: SkillMinOrderByAggregateInput
  }

  export type SkillScalarWhereWithAggregatesInput = {
    AND?: SkillScalarWhereWithAggregatesInput | SkillScalarWhereWithAggregatesInput[]
    OR?: SkillScalarWhereWithAggregatesInput[]
    NOT?: SkillScalarWhereWithAggregatesInput | SkillScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Skill"> | string
    name?: StringWithAggregatesFilter<"Skill"> | string
    description?: StringNullableWithAggregatesFilter<"Skill"> | string | null
    category?: StringNullableWithAggregatesFilter<"Skill"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Skill"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Skill"> | Date | string
  }

  export type SkillMatrixWhereInput = {
    AND?: SkillMatrixWhereInput | SkillMatrixWhereInput[]
    OR?: SkillMatrixWhereInput[]
    NOT?: SkillMatrixWhereInput | SkillMatrixWhereInput[]
    id?: StringFilter<"SkillMatrix"> | string
    staffId?: StringFilter<"SkillMatrix"> | string
    skillId?: StringFilter<"SkillMatrix"> | string
    level?: StringFilter<"SkillMatrix"> | string
    certificationDate?: DateTimeNullableFilter<"SkillMatrix"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"SkillMatrix"> | Date | string | null
    lastAssessed?: DateTimeNullableFilter<"SkillMatrix"> | Date | string | null
    notes?: StringNullableFilter<"SkillMatrix"> | string | null
    createdAt?: DateTimeFilter<"SkillMatrix"> | Date | string
    updatedAt?: DateTimeFilter<"SkillMatrix"> | Date | string
    staff?: XOR<StaffRelationFilter, StaffWhereInput>
    skill?: XOR<SkillRelationFilter, SkillWhereInput>
  }

  export type SkillMatrixOrderByWithRelationInput = {
    id?: SortOrder
    staffId?: SortOrder
    skillId?: SortOrder
    level?: SortOrder
    certificationDate?: SortOrderInput | SortOrder
    expiryDate?: SortOrderInput | SortOrder
    lastAssessed?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    staff?: StaffOrderByWithRelationInput
    skill?: SkillOrderByWithRelationInput
  }

  export type SkillMatrixWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    staffId_skillId?: SkillMatrixStaffIdSkillIdCompoundUniqueInput
    AND?: SkillMatrixWhereInput | SkillMatrixWhereInput[]
    OR?: SkillMatrixWhereInput[]
    NOT?: SkillMatrixWhereInput | SkillMatrixWhereInput[]
    staffId?: StringFilter<"SkillMatrix"> | string
    skillId?: StringFilter<"SkillMatrix"> | string
    level?: StringFilter<"SkillMatrix"> | string
    certificationDate?: DateTimeNullableFilter<"SkillMatrix"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"SkillMatrix"> | Date | string | null
    lastAssessed?: DateTimeNullableFilter<"SkillMatrix"> | Date | string | null
    notes?: StringNullableFilter<"SkillMatrix"> | string | null
    createdAt?: DateTimeFilter<"SkillMatrix"> | Date | string
    updatedAt?: DateTimeFilter<"SkillMatrix"> | Date | string
    staff?: XOR<StaffRelationFilter, StaffWhereInput>
    skill?: XOR<SkillRelationFilter, SkillWhereInput>
  }, "id" | "staffId_skillId">

  export type SkillMatrixOrderByWithAggregationInput = {
    id?: SortOrder
    staffId?: SortOrder
    skillId?: SortOrder
    level?: SortOrder
    certificationDate?: SortOrderInput | SortOrder
    expiryDate?: SortOrderInput | SortOrder
    lastAssessed?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SkillMatrixCountOrderByAggregateInput
    _max?: SkillMatrixMaxOrderByAggregateInput
    _min?: SkillMatrixMinOrderByAggregateInput
  }

  export type SkillMatrixScalarWhereWithAggregatesInput = {
    AND?: SkillMatrixScalarWhereWithAggregatesInput | SkillMatrixScalarWhereWithAggregatesInput[]
    OR?: SkillMatrixScalarWhereWithAggregatesInput[]
    NOT?: SkillMatrixScalarWhereWithAggregatesInput | SkillMatrixScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SkillMatrix"> | string
    staffId?: StringWithAggregatesFilter<"SkillMatrix"> | string
    skillId?: StringWithAggregatesFilter<"SkillMatrix"> | string
    level?: StringWithAggregatesFilter<"SkillMatrix"> | string
    certificationDate?: DateTimeNullableWithAggregatesFilter<"SkillMatrix"> | Date | string | null
    expiryDate?: DateTimeNullableWithAggregatesFilter<"SkillMatrix"> | Date | string | null
    lastAssessed?: DateTimeNullableWithAggregatesFilter<"SkillMatrix"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"SkillMatrix"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SkillMatrix"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SkillMatrix"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    staff?: StaffCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    staff?: StaffUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffCreateInput = {
    id?: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffInput
    shifts?: ShiftCreateNestedManyWithoutStaffInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStaffInput
    leaveDays?: LeaveDayCreateNestedManyWithoutStaffInput
    leavePeriods?: LeavePeriodCreateNestedManyWithoutStaffInput
    skillsMatrix?: SkillMatrixCreateNestedManyWithoutStaffInput
    swapsProposed?: ShiftSwapCreateNestedManyWithoutProposerInput
    swapsReceived?: ShiftSwapCreateNestedManyWithoutReceiverInput
  }

  export type StaffUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shifts?: ShiftUncheckedCreateNestedManyWithoutStaffInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStaffInput
    leaveDays?: LeaveDayUncheckedCreateNestedManyWithoutStaffInput
    leavePeriods?: LeavePeriodUncheckedCreateNestedManyWithoutStaffInput
    skillsMatrix?: SkillMatrixUncheckedCreateNestedManyWithoutStaffInput
    swapsProposed?: ShiftSwapUncheckedCreateNestedManyWithoutProposerInput
    swapsReceived?: ShiftSwapUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type StaffUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffNestedInput
    shifts?: ShiftUpdateManyWithoutStaffNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStaffNestedInput
    leaveDays?: LeaveDayUpdateManyWithoutStaffNestedInput
    leavePeriods?: LeavePeriodUpdateManyWithoutStaffNestedInput
    skillsMatrix?: SkillMatrixUpdateManyWithoutStaffNestedInput
    swapsProposed?: ShiftSwapUpdateManyWithoutProposerNestedInput
    swapsReceived?: ShiftSwapUpdateManyWithoutReceiverNestedInput
  }

  export type StaffUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shifts?: ShiftUncheckedUpdateManyWithoutStaffNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStaffNestedInput
    leaveDays?: LeaveDayUncheckedUpdateManyWithoutStaffNestedInput
    leavePeriods?: LeavePeriodUncheckedUpdateManyWithoutStaffNestedInput
    skillsMatrix?: SkillMatrixUncheckedUpdateManyWithoutStaffNestedInput
    swapsProposed?: ShiftSwapUncheckedUpdateManyWithoutProposerNestedInput
    swapsReceived?: ShiftSwapUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type StaffCreateManyInput = {
    id?: string
    userId: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RosterPeriodCreateInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    weeks: number
    weekMetadata: string
    staffSnapshot: string
    stats: string
    generatedAt?: Date | string
    generatedBy?: string | null
    shifts?: ShiftCreateNestedManyWithoutPeriodInput
  }

  export type RosterPeriodUncheckedCreateInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    weeks: number
    weekMetadata: string
    staffSnapshot: string
    stats: string
    generatedAt?: Date | string
    generatedBy?: string | null
    shifts?: ShiftUncheckedCreateNestedManyWithoutPeriodInput
  }

  export type RosterPeriodUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weeks?: IntFieldUpdateOperationsInput | number
    weekMetadata?: StringFieldUpdateOperationsInput | string
    staffSnapshot?: StringFieldUpdateOperationsInput | string
    stats?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    shifts?: ShiftUpdateManyWithoutPeriodNestedInput
  }

  export type RosterPeriodUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weeks?: IntFieldUpdateOperationsInput | number
    weekMetadata?: StringFieldUpdateOperationsInput | string
    staffSnapshot?: StringFieldUpdateOperationsInput | string
    stats?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    shifts?: ShiftUncheckedUpdateManyWithoutPeriodNestedInput
  }

  export type RosterPeriodCreateManyInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    weeks: number
    weekMetadata: string
    staffSnapshot: string
    stats: string
    generatedAt?: Date | string
    generatedBy?: string | null
  }

  export type RosterPeriodUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weeks?: IntFieldUpdateOperationsInput | number
    weekMetadata?: StringFieldUpdateOperationsInput | string
    staffSnapshot?: StringFieldUpdateOperationsInput | string
    stats?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RosterPeriodUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weeks?: IntFieldUpdateOperationsInput | number
    weekMetadata?: StringFieldUpdateOperationsInput | string
    staffSnapshot?: StringFieldUpdateOperationsInput | string
    stats?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShiftCreateInput = {
    id?: string
    week: number
    day: string
    shiftType: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    period: RosterPeriodCreateNestedOneWithoutShiftsInput
    staff: StaffCreateNestedOneWithoutShiftsInput
    swaps?: ShiftSwapCreateNestedManyWithoutProposedShiftInput
  }

  export type ShiftUncheckedCreateInput = {
    id?: string
    periodId: string
    staffId: string
    week: number
    day: string
    shiftType: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    swaps?: ShiftSwapUncheckedCreateNestedManyWithoutProposedShiftInput
  }

  export type ShiftUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    week?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    period?: RosterPeriodUpdateOneRequiredWithoutShiftsNestedInput
    staff?: StaffUpdateOneRequiredWithoutShiftsNestedInput
    swaps?: ShiftSwapUpdateManyWithoutProposedShiftNestedInput
  }

  export type ShiftUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    week?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    swaps?: ShiftSwapUncheckedUpdateManyWithoutProposedShiftNestedInput
  }

  export type ShiftCreateManyInput = {
    id?: string
    periodId: string
    staffId: string
    week: number
    day: string
    shiftType: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    week?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    week?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestCreateInput = {
    id?: string
    type: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    status?: string
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    staff: StaffCreateNestedOneWithoutLeaveRequestsInput
  }

  export type LeaveRequestUncheckedCreateInput = {
    id?: string
    staffId: string
    type: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    status?: string
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeaveRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneRequiredWithoutLeaveRequestsNestedInput
  }

  export type LeaveRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestCreateManyInput = {
    id?: string
    staffId: string
    type: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    status?: string
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeaveRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveDayCreateInput = {
    id?: string
    date: Date | string
    reason?: string | null
    createdAt?: Date | string
    staff: StaffCreateNestedOneWithoutLeaveDaysInput
  }

  export type LeaveDayUncheckedCreateInput = {
    id?: string
    staffId: string
    date: Date | string
    reason?: string | null
    createdAt?: Date | string
  }

  export type LeaveDayUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneRequiredWithoutLeaveDaysNestedInput
  }

  export type LeaveDayUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveDayCreateManyInput = {
    id?: string
    staffId: string
    date: Date | string
    reason?: string | null
    createdAt?: Date | string
  }

  export type LeaveDayUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveDayUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeavePeriodCreateInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    createdAt?: Date | string
    staff: StaffCreateNestedOneWithoutLeavePeriodsInput
  }

  export type LeavePeriodUncheckedCreateInput = {
    id?: string
    staffId: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    createdAt?: Date | string
  }

  export type LeavePeriodUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneRequiredWithoutLeavePeriodsNestedInput
  }

  export type LeavePeriodUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeavePeriodCreateManyInput = {
    id?: string
    staffId: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    createdAt?: Date | string
  }

  export type LeavePeriodUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeavePeriodUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftSwapCreateInput = {
    id?: string
    targetShiftId: string
    status?: string
    proposerNote?: string | null
    receiverNote?: string | null
    proposedAt?: Date | string
    respondedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposedShift: ShiftCreateNestedOneWithoutSwapsInput
    proposer: StaffCreateNestedOneWithoutSwapsProposedInput
    receiver: StaffCreateNestedOneWithoutSwapsReceivedInput
  }

  export type ShiftSwapUncheckedCreateInput = {
    id?: string
    proposedShiftId: string
    targetShiftId: string
    proposerId: string
    receiverId: string
    status?: string
    proposerNote?: string | null
    receiverNote?: string | null
    proposedAt?: Date | string
    respondedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftSwapUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetShiftId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    proposerNote?: NullableStringFieldUpdateOperationsInput | string | null
    receiverNote?: NullableStringFieldUpdateOperationsInput | string | null
    proposedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedShift?: ShiftUpdateOneRequiredWithoutSwapsNestedInput
    proposer?: StaffUpdateOneRequiredWithoutSwapsProposedNestedInput
    receiver?: StaffUpdateOneRequiredWithoutSwapsReceivedNestedInput
  }

  export type ShiftSwapUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    proposedShiftId?: StringFieldUpdateOperationsInput | string
    targetShiftId?: StringFieldUpdateOperationsInput | string
    proposerId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    proposerNote?: NullableStringFieldUpdateOperationsInput | string | null
    receiverNote?: NullableStringFieldUpdateOperationsInput | string | null
    proposedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftSwapCreateManyInput = {
    id?: string
    proposedShiftId: string
    targetShiftId: string
    proposerId: string
    receiverId: string
    status?: string
    proposerNote?: string | null
    receiverNote?: string | null
    proposedAt?: Date | string
    respondedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftSwapUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetShiftId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    proposerNote?: NullableStringFieldUpdateOperationsInput | string | null
    receiverNote?: NullableStringFieldUpdateOperationsInput | string | null
    proposedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftSwapUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    proposedShiftId?: StringFieldUpdateOperationsInput | string
    targetShiftId?: StringFieldUpdateOperationsInput | string
    proposerId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    proposerNote?: NullableStringFieldUpdateOperationsInput | string | null
    receiverNote?: NullableStringFieldUpdateOperationsInput | string | null
    proposedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillCreateInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsMatrix?: SkillMatrixCreateNestedManyWithoutSkillInput
  }

  export type SkillUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skillsMatrix?: SkillMatrixUncheckedCreateNestedManyWithoutSkillInput
  }

  export type SkillUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsMatrix?: SkillMatrixUpdateManyWithoutSkillNestedInput
  }

  export type SkillUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillsMatrix?: SkillMatrixUncheckedUpdateManyWithoutSkillNestedInput
  }

  export type SkillCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkillUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillMatrixCreateInput = {
    id?: string
    level: string
    certificationDate?: Date | string | null
    expiryDate?: Date | string | null
    lastAssessed?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    staff: StaffCreateNestedOneWithoutSkillsMatrixInput
    skill: SkillCreateNestedOneWithoutSkillsMatrixInput
  }

  export type SkillMatrixUncheckedCreateInput = {
    id?: string
    staffId: string
    skillId: string
    level: string
    certificationDate?: Date | string | null
    expiryDate?: Date | string | null
    lastAssessed?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkillMatrixUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAssessed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneRequiredWithoutSkillsMatrixNestedInput
    skill?: SkillUpdateOneRequiredWithoutSkillsMatrixNestedInput
  }

  export type SkillMatrixUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    skillId?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAssessed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillMatrixCreateManyInput = {
    id?: string
    staffId: string
    skillId: string
    level: string
    certificationDate?: Date | string | null
    expiryDate?: Date | string | null
    lastAssessed?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkillMatrixUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAssessed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillMatrixUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    skillId?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAssessed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StaffNullableRelationFilter = {
    is?: StaffWhereInput | null
    isNot?: StaffWhereInput | null
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ShiftListRelationFilter = {
    every?: ShiftWhereInput
    some?: ShiftWhereInput
    none?: ShiftWhereInput
  }

  export type LeaveRequestListRelationFilter = {
    every?: LeaveRequestWhereInput
    some?: LeaveRequestWhereInput
    none?: LeaveRequestWhereInput
  }

  export type LeaveDayListRelationFilter = {
    every?: LeaveDayWhereInput
    some?: LeaveDayWhereInput
    none?: LeaveDayWhereInput
  }

  export type LeavePeriodListRelationFilter = {
    every?: LeavePeriodWhereInput
    some?: LeavePeriodWhereInput
    none?: LeavePeriodWhereInput
  }

  export type SkillMatrixListRelationFilter = {
    every?: SkillMatrixWhereInput
    some?: SkillMatrixWhereInput
    none?: SkillMatrixWhereInput
  }

  export type ShiftSwapListRelationFilter = {
    every?: ShiftSwapWhereInput
    some?: ShiftSwapWhereInput
    none?: ShiftSwapWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ShiftOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeaveRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeaveDayOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeavePeriodOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkillMatrixOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShiftSwapOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaffCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    scheduleType?: SortOrder
    workDays?: SortOrder
    week1Days?: SortOrder
    week2Days?: SortOrder
    weekOffNum?: SortOrder
    weekOffShiftType?: SortOrder
    inactiveDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffAvgOrderByAggregateInput = {
    weekOffNum?: SortOrder
  }

  export type StaffMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    scheduleType?: SortOrder
    workDays?: SortOrder
    week1Days?: SortOrder
    week2Days?: SortOrder
    weekOffNum?: SortOrder
    weekOffShiftType?: SortOrder
    inactiveDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    scheduleType?: SortOrder
    workDays?: SortOrder
    week1Days?: SortOrder
    week2Days?: SortOrder
    weekOffNum?: SortOrder
    weekOffShiftType?: SortOrder
    inactiveDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffSumOrderByAggregateInput = {
    weekOffNum?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type RosterPeriodCountOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    weeks?: SortOrder
    weekMetadata?: SortOrder
    staffSnapshot?: SortOrder
    stats?: SortOrder
    generatedAt?: SortOrder
    generatedBy?: SortOrder
  }

  export type RosterPeriodAvgOrderByAggregateInput = {
    weeks?: SortOrder
  }

  export type RosterPeriodMaxOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    weeks?: SortOrder
    weekMetadata?: SortOrder
    staffSnapshot?: SortOrder
    stats?: SortOrder
    generatedAt?: SortOrder
    generatedBy?: SortOrder
  }

  export type RosterPeriodMinOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    weeks?: SortOrder
    weekMetadata?: SortOrder
    staffSnapshot?: SortOrder
    stats?: SortOrder
    generatedAt?: SortOrder
    generatedBy?: SortOrder
  }

  export type RosterPeriodSumOrderByAggregateInput = {
    weeks?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type RosterPeriodRelationFilter = {
    is?: RosterPeriodWhereInput
    isNot?: RosterPeriodWhereInput
  }

  export type StaffRelationFilter = {
    is?: StaffWhereInput
    isNot?: StaffWhereInput
  }

  export type ShiftCountOrderByAggregateInput = {
    id?: SortOrder
    periodId?: SortOrder
    staffId?: SortOrder
    week?: SortOrder
    day?: SortOrder
    shiftType?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShiftAvgOrderByAggregateInput = {
    week?: SortOrder
  }

  export type ShiftMaxOrderByAggregateInput = {
    id?: SortOrder
    periodId?: SortOrder
    staffId?: SortOrder
    week?: SortOrder
    day?: SortOrder
    shiftType?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShiftMinOrderByAggregateInput = {
    id?: SortOrder
    periodId?: SortOrder
    staffId?: SortOrder
    week?: SortOrder
    day?: SortOrder
    shiftType?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShiftSumOrderByAggregateInput = {
    week?: SortOrder
  }

  export type LeaveRequestCountOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    type?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LeaveRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    type?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LeaveRequestMinOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    type?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LeaveDayCountOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type LeaveDayMaxOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type LeaveDayMinOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type LeavePeriodCountOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type LeavePeriodMaxOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type LeavePeriodMinOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type ShiftRelationFilter = {
    is?: ShiftWhereInput
    isNot?: ShiftWhereInput
  }

  export type ShiftSwapCountOrderByAggregateInput = {
    id?: SortOrder
    proposedShiftId?: SortOrder
    targetShiftId?: SortOrder
    proposerId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    proposerNote?: SortOrder
    receiverNote?: SortOrder
    proposedAt?: SortOrder
    respondedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShiftSwapMaxOrderByAggregateInput = {
    id?: SortOrder
    proposedShiftId?: SortOrder
    targetShiftId?: SortOrder
    proposerId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    proposerNote?: SortOrder
    receiverNote?: SortOrder
    proposedAt?: SortOrder
    respondedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShiftSwapMinOrderByAggregateInput = {
    id?: SortOrder
    proposedShiftId?: SortOrder
    targetShiftId?: SortOrder
    proposerId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    proposerNote?: SortOrder
    receiverNote?: SortOrder
    proposedAt?: SortOrder
    respondedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkillCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkillMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkillMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkillRelationFilter = {
    is?: SkillWhereInput
    isNot?: SkillWhereInput
  }

  export type SkillMatrixStaffIdSkillIdCompoundUniqueInput = {
    staffId: string
    skillId: string
  }

  export type SkillMatrixCountOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    skillId?: SortOrder
    level?: SortOrder
    certificationDate?: SortOrder
    expiryDate?: SortOrder
    lastAssessed?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkillMatrixMaxOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    skillId?: SortOrder
    level?: SortOrder
    certificationDate?: SortOrder
    expiryDate?: SortOrder
    lastAssessed?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkillMatrixMinOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    skillId?: SortOrder
    level?: SortOrder
    certificationDate?: SortOrder
    expiryDate?: SortOrder
    lastAssessed?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffCreateNestedOneWithoutUserInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput
    connect?: StaffWhereUniqueInput
  }

  export type StaffUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput
    connect?: StaffWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StaffUpdateOneWithoutUserNestedInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput
    upsert?: StaffUpsertWithoutUserInput
    disconnect?: StaffWhereInput | boolean
    delete?: StaffWhereInput | boolean
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutUserInput, StaffUpdateWithoutUserInput>, StaffUncheckedUpdateWithoutUserInput>
  }

  export type StaffUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput
    upsert?: StaffUpsertWithoutUserInput
    disconnect?: StaffWhereInput | boolean
    delete?: StaffWhereInput | boolean
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutUserInput, StaffUpdateWithoutUserInput>, StaffUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutStaffInput = {
    create?: XOR<UserCreateWithoutStaffInput, UserUncheckedCreateWithoutStaffInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffInput
    connect?: UserWhereUniqueInput
  }

  export type ShiftCreateNestedManyWithoutStaffInput = {
    create?: XOR<ShiftCreateWithoutStaffInput, ShiftUncheckedCreateWithoutStaffInput> | ShiftCreateWithoutStaffInput[] | ShiftUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: ShiftCreateOrConnectWithoutStaffInput | ShiftCreateOrConnectWithoutStaffInput[]
    createMany?: ShiftCreateManyStaffInputEnvelope
    connect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
  }

  export type LeaveRequestCreateNestedManyWithoutStaffInput = {
    create?: XOR<LeaveRequestCreateWithoutStaffInput, LeaveRequestUncheckedCreateWithoutStaffInput> | LeaveRequestCreateWithoutStaffInput[] | LeaveRequestUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutStaffInput | LeaveRequestCreateOrConnectWithoutStaffInput[]
    createMany?: LeaveRequestCreateManyStaffInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type LeaveDayCreateNestedManyWithoutStaffInput = {
    create?: XOR<LeaveDayCreateWithoutStaffInput, LeaveDayUncheckedCreateWithoutStaffInput> | LeaveDayCreateWithoutStaffInput[] | LeaveDayUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: LeaveDayCreateOrConnectWithoutStaffInput | LeaveDayCreateOrConnectWithoutStaffInput[]
    createMany?: LeaveDayCreateManyStaffInputEnvelope
    connect?: LeaveDayWhereUniqueInput | LeaveDayWhereUniqueInput[]
  }

  export type LeavePeriodCreateNestedManyWithoutStaffInput = {
    create?: XOR<LeavePeriodCreateWithoutStaffInput, LeavePeriodUncheckedCreateWithoutStaffInput> | LeavePeriodCreateWithoutStaffInput[] | LeavePeriodUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: LeavePeriodCreateOrConnectWithoutStaffInput | LeavePeriodCreateOrConnectWithoutStaffInput[]
    createMany?: LeavePeriodCreateManyStaffInputEnvelope
    connect?: LeavePeriodWhereUniqueInput | LeavePeriodWhereUniqueInput[]
  }

  export type SkillMatrixCreateNestedManyWithoutStaffInput = {
    create?: XOR<SkillMatrixCreateWithoutStaffInput, SkillMatrixUncheckedCreateWithoutStaffInput> | SkillMatrixCreateWithoutStaffInput[] | SkillMatrixUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: SkillMatrixCreateOrConnectWithoutStaffInput | SkillMatrixCreateOrConnectWithoutStaffInput[]
    createMany?: SkillMatrixCreateManyStaffInputEnvelope
    connect?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
  }

  export type ShiftSwapCreateNestedManyWithoutProposerInput = {
    create?: XOR<ShiftSwapCreateWithoutProposerInput, ShiftSwapUncheckedCreateWithoutProposerInput> | ShiftSwapCreateWithoutProposerInput[] | ShiftSwapUncheckedCreateWithoutProposerInput[]
    connectOrCreate?: ShiftSwapCreateOrConnectWithoutProposerInput | ShiftSwapCreateOrConnectWithoutProposerInput[]
    createMany?: ShiftSwapCreateManyProposerInputEnvelope
    connect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
  }

  export type ShiftSwapCreateNestedManyWithoutReceiverInput = {
    create?: XOR<ShiftSwapCreateWithoutReceiverInput, ShiftSwapUncheckedCreateWithoutReceiverInput> | ShiftSwapCreateWithoutReceiverInput[] | ShiftSwapUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: ShiftSwapCreateOrConnectWithoutReceiverInput | ShiftSwapCreateOrConnectWithoutReceiverInput[]
    createMany?: ShiftSwapCreateManyReceiverInputEnvelope
    connect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
  }

  export type ShiftUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<ShiftCreateWithoutStaffInput, ShiftUncheckedCreateWithoutStaffInput> | ShiftCreateWithoutStaffInput[] | ShiftUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: ShiftCreateOrConnectWithoutStaffInput | ShiftCreateOrConnectWithoutStaffInput[]
    createMany?: ShiftCreateManyStaffInputEnvelope
    connect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
  }

  export type LeaveRequestUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<LeaveRequestCreateWithoutStaffInput, LeaveRequestUncheckedCreateWithoutStaffInput> | LeaveRequestCreateWithoutStaffInput[] | LeaveRequestUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutStaffInput | LeaveRequestCreateOrConnectWithoutStaffInput[]
    createMany?: LeaveRequestCreateManyStaffInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type LeaveDayUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<LeaveDayCreateWithoutStaffInput, LeaveDayUncheckedCreateWithoutStaffInput> | LeaveDayCreateWithoutStaffInput[] | LeaveDayUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: LeaveDayCreateOrConnectWithoutStaffInput | LeaveDayCreateOrConnectWithoutStaffInput[]
    createMany?: LeaveDayCreateManyStaffInputEnvelope
    connect?: LeaveDayWhereUniqueInput | LeaveDayWhereUniqueInput[]
  }

  export type LeavePeriodUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<LeavePeriodCreateWithoutStaffInput, LeavePeriodUncheckedCreateWithoutStaffInput> | LeavePeriodCreateWithoutStaffInput[] | LeavePeriodUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: LeavePeriodCreateOrConnectWithoutStaffInput | LeavePeriodCreateOrConnectWithoutStaffInput[]
    createMany?: LeavePeriodCreateManyStaffInputEnvelope
    connect?: LeavePeriodWhereUniqueInput | LeavePeriodWhereUniqueInput[]
  }

  export type SkillMatrixUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<SkillMatrixCreateWithoutStaffInput, SkillMatrixUncheckedCreateWithoutStaffInput> | SkillMatrixCreateWithoutStaffInput[] | SkillMatrixUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: SkillMatrixCreateOrConnectWithoutStaffInput | SkillMatrixCreateOrConnectWithoutStaffInput[]
    createMany?: SkillMatrixCreateManyStaffInputEnvelope
    connect?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
  }

  export type ShiftSwapUncheckedCreateNestedManyWithoutProposerInput = {
    create?: XOR<ShiftSwapCreateWithoutProposerInput, ShiftSwapUncheckedCreateWithoutProposerInput> | ShiftSwapCreateWithoutProposerInput[] | ShiftSwapUncheckedCreateWithoutProposerInput[]
    connectOrCreate?: ShiftSwapCreateOrConnectWithoutProposerInput | ShiftSwapCreateOrConnectWithoutProposerInput[]
    createMany?: ShiftSwapCreateManyProposerInputEnvelope
    connect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
  }

  export type ShiftSwapUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<ShiftSwapCreateWithoutReceiverInput, ShiftSwapUncheckedCreateWithoutReceiverInput> | ShiftSwapCreateWithoutReceiverInput[] | ShiftSwapUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: ShiftSwapCreateOrConnectWithoutReceiverInput | ShiftSwapCreateOrConnectWithoutReceiverInput[]
    createMany?: ShiftSwapCreateManyReceiverInputEnvelope
    connect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutStaffNestedInput = {
    create?: XOR<UserCreateWithoutStaffInput, UserUncheckedCreateWithoutStaffInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffInput
    upsert?: UserUpsertWithoutStaffInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStaffInput, UserUpdateWithoutStaffInput>, UserUncheckedUpdateWithoutStaffInput>
  }

  export type ShiftUpdateManyWithoutStaffNestedInput = {
    create?: XOR<ShiftCreateWithoutStaffInput, ShiftUncheckedCreateWithoutStaffInput> | ShiftCreateWithoutStaffInput[] | ShiftUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: ShiftCreateOrConnectWithoutStaffInput | ShiftCreateOrConnectWithoutStaffInput[]
    upsert?: ShiftUpsertWithWhereUniqueWithoutStaffInput | ShiftUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: ShiftCreateManyStaffInputEnvelope
    set?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    disconnect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    delete?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    connect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    update?: ShiftUpdateWithWhereUniqueWithoutStaffInput | ShiftUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: ShiftUpdateManyWithWhereWithoutStaffInput | ShiftUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: ShiftScalarWhereInput | ShiftScalarWhereInput[]
  }

  export type LeaveRequestUpdateManyWithoutStaffNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutStaffInput, LeaveRequestUncheckedCreateWithoutStaffInput> | LeaveRequestCreateWithoutStaffInput[] | LeaveRequestUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutStaffInput | LeaveRequestCreateOrConnectWithoutStaffInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutStaffInput | LeaveRequestUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: LeaveRequestCreateManyStaffInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutStaffInput | LeaveRequestUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutStaffInput | LeaveRequestUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type LeaveDayUpdateManyWithoutStaffNestedInput = {
    create?: XOR<LeaveDayCreateWithoutStaffInput, LeaveDayUncheckedCreateWithoutStaffInput> | LeaveDayCreateWithoutStaffInput[] | LeaveDayUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: LeaveDayCreateOrConnectWithoutStaffInput | LeaveDayCreateOrConnectWithoutStaffInput[]
    upsert?: LeaveDayUpsertWithWhereUniqueWithoutStaffInput | LeaveDayUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: LeaveDayCreateManyStaffInputEnvelope
    set?: LeaveDayWhereUniqueInput | LeaveDayWhereUniqueInput[]
    disconnect?: LeaveDayWhereUniqueInput | LeaveDayWhereUniqueInput[]
    delete?: LeaveDayWhereUniqueInput | LeaveDayWhereUniqueInput[]
    connect?: LeaveDayWhereUniqueInput | LeaveDayWhereUniqueInput[]
    update?: LeaveDayUpdateWithWhereUniqueWithoutStaffInput | LeaveDayUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: LeaveDayUpdateManyWithWhereWithoutStaffInput | LeaveDayUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: LeaveDayScalarWhereInput | LeaveDayScalarWhereInput[]
  }

  export type LeavePeriodUpdateManyWithoutStaffNestedInput = {
    create?: XOR<LeavePeriodCreateWithoutStaffInput, LeavePeriodUncheckedCreateWithoutStaffInput> | LeavePeriodCreateWithoutStaffInput[] | LeavePeriodUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: LeavePeriodCreateOrConnectWithoutStaffInput | LeavePeriodCreateOrConnectWithoutStaffInput[]
    upsert?: LeavePeriodUpsertWithWhereUniqueWithoutStaffInput | LeavePeriodUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: LeavePeriodCreateManyStaffInputEnvelope
    set?: LeavePeriodWhereUniqueInput | LeavePeriodWhereUniqueInput[]
    disconnect?: LeavePeriodWhereUniqueInput | LeavePeriodWhereUniqueInput[]
    delete?: LeavePeriodWhereUniqueInput | LeavePeriodWhereUniqueInput[]
    connect?: LeavePeriodWhereUniqueInput | LeavePeriodWhereUniqueInput[]
    update?: LeavePeriodUpdateWithWhereUniqueWithoutStaffInput | LeavePeriodUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: LeavePeriodUpdateManyWithWhereWithoutStaffInput | LeavePeriodUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: LeavePeriodScalarWhereInput | LeavePeriodScalarWhereInput[]
  }

  export type SkillMatrixUpdateManyWithoutStaffNestedInput = {
    create?: XOR<SkillMatrixCreateWithoutStaffInput, SkillMatrixUncheckedCreateWithoutStaffInput> | SkillMatrixCreateWithoutStaffInput[] | SkillMatrixUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: SkillMatrixCreateOrConnectWithoutStaffInput | SkillMatrixCreateOrConnectWithoutStaffInput[]
    upsert?: SkillMatrixUpsertWithWhereUniqueWithoutStaffInput | SkillMatrixUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: SkillMatrixCreateManyStaffInputEnvelope
    set?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
    disconnect?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
    delete?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
    connect?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
    update?: SkillMatrixUpdateWithWhereUniqueWithoutStaffInput | SkillMatrixUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: SkillMatrixUpdateManyWithWhereWithoutStaffInput | SkillMatrixUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: SkillMatrixScalarWhereInput | SkillMatrixScalarWhereInput[]
  }

  export type ShiftSwapUpdateManyWithoutProposerNestedInput = {
    create?: XOR<ShiftSwapCreateWithoutProposerInput, ShiftSwapUncheckedCreateWithoutProposerInput> | ShiftSwapCreateWithoutProposerInput[] | ShiftSwapUncheckedCreateWithoutProposerInput[]
    connectOrCreate?: ShiftSwapCreateOrConnectWithoutProposerInput | ShiftSwapCreateOrConnectWithoutProposerInput[]
    upsert?: ShiftSwapUpsertWithWhereUniqueWithoutProposerInput | ShiftSwapUpsertWithWhereUniqueWithoutProposerInput[]
    createMany?: ShiftSwapCreateManyProposerInputEnvelope
    set?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    disconnect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    delete?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    connect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    update?: ShiftSwapUpdateWithWhereUniqueWithoutProposerInput | ShiftSwapUpdateWithWhereUniqueWithoutProposerInput[]
    updateMany?: ShiftSwapUpdateManyWithWhereWithoutProposerInput | ShiftSwapUpdateManyWithWhereWithoutProposerInput[]
    deleteMany?: ShiftSwapScalarWhereInput | ShiftSwapScalarWhereInput[]
  }

  export type ShiftSwapUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<ShiftSwapCreateWithoutReceiverInput, ShiftSwapUncheckedCreateWithoutReceiverInput> | ShiftSwapCreateWithoutReceiverInput[] | ShiftSwapUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: ShiftSwapCreateOrConnectWithoutReceiverInput | ShiftSwapCreateOrConnectWithoutReceiverInput[]
    upsert?: ShiftSwapUpsertWithWhereUniqueWithoutReceiverInput | ShiftSwapUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: ShiftSwapCreateManyReceiverInputEnvelope
    set?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    disconnect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    delete?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    connect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    update?: ShiftSwapUpdateWithWhereUniqueWithoutReceiverInput | ShiftSwapUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: ShiftSwapUpdateManyWithWhereWithoutReceiverInput | ShiftSwapUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: ShiftSwapScalarWhereInput | ShiftSwapScalarWhereInput[]
  }

  export type ShiftUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<ShiftCreateWithoutStaffInput, ShiftUncheckedCreateWithoutStaffInput> | ShiftCreateWithoutStaffInput[] | ShiftUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: ShiftCreateOrConnectWithoutStaffInput | ShiftCreateOrConnectWithoutStaffInput[]
    upsert?: ShiftUpsertWithWhereUniqueWithoutStaffInput | ShiftUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: ShiftCreateManyStaffInputEnvelope
    set?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    disconnect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    delete?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    connect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    update?: ShiftUpdateWithWhereUniqueWithoutStaffInput | ShiftUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: ShiftUpdateManyWithWhereWithoutStaffInput | ShiftUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: ShiftScalarWhereInput | ShiftScalarWhereInput[]
  }

  export type LeaveRequestUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutStaffInput, LeaveRequestUncheckedCreateWithoutStaffInput> | LeaveRequestCreateWithoutStaffInput[] | LeaveRequestUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutStaffInput | LeaveRequestCreateOrConnectWithoutStaffInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutStaffInput | LeaveRequestUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: LeaveRequestCreateManyStaffInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutStaffInput | LeaveRequestUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutStaffInput | LeaveRequestUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type LeaveDayUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<LeaveDayCreateWithoutStaffInput, LeaveDayUncheckedCreateWithoutStaffInput> | LeaveDayCreateWithoutStaffInput[] | LeaveDayUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: LeaveDayCreateOrConnectWithoutStaffInput | LeaveDayCreateOrConnectWithoutStaffInput[]
    upsert?: LeaveDayUpsertWithWhereUniqueWithoutStaffInput | LeaveDayUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: LeaveDayCreateManyStaffInputEnvelope
    set?: LeaveDayWhereUniqueInput | LeaveDayWhereUniqueInput[]
    disconnect?: LeaveDayWhereUniqueInput | LeaveDayWhereUniqueInput[]
    delete?: LeaveDayWhereUniqueInput | LeaveDayWhereUniqueInput[]
    connect?: LeaveDayWhereUniqueInput | LeaveDayWhereUniqueInput[]
    update?: LeaveDayUpdateWithWhereUniqueWithoutStaffInput | LeaveDayUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: LeaveDayUpdateManyWithWhereWithoutStaffInput | LeaveDayUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: LeaveDayScalarWhereInput | LeaveDayScalarWhereInput[]
  }

  export type LeavePeriodUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<LeavePeriodCreateWithoutStaffInput, LeavePeriodUncheckedCreateWithoutStaffInput> | LeavePeriodCreateWithoutStaffInput[] | LeavePeriodUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: LeavePeriodCreateOrConnectWithoutStaffInput | LeavePeriodCreateOrConnectWithoutStaffInput[]
    upsert?: LeavePeriodUpsertWithWhereUniqueWithoutStaffInput | LeavePeriodUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: LeavePeriodCreateManyStaffInputEnvelope
    set?: LeavePeriodWhereUniqueInput | LeavePeriodWhereUniqueInput[]
    disconnect?: LeavePeriodWhereUniqueInput | LeavePeriodWhereUniqueInput[]
    delete?: LeavePeriodWhereUniqueInput | LeavePeriodWhereUniqueInput[]
    connect?: LeavePeriodWhereUniqueInput | LeavePeriodWhereUniqueInput[]
    update?: LeavePeriodUpdateWithWhereUniqueWithoutStaffInput | LeavePeriodUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: LeavePeriodUpdateManyWithWhereWithoutStaffInput | LeavePeriodUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: LeavePeriodScalarWhereInput | LeavePeriodScalarWhereInput[]
  }

  export type SkillMatrixUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<SkillMatrixCreateWithoutStaffInput, SkillMatrixUncheckedCreateWithoutStaffInput> | SkillMatrixCreateWithoutStaffInput[] | SkillMatrixUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: SkillMatrixCreateOrConnectWithoutStaffInput | SkillMatrixCreateOrConnectWithoutStaffInput[]
    upsert?: SkillMatrixUpsertWithWhereUniqueWithoutStaffInput | SkillMatrixUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: SkillMatrixCreateManyStaffInputEnvelope
    set?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
    disconnect?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
    delete?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
    connect?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
    update?: SkillMatrixUpdateWithWhereUniqueWithoutStaffInput | SkillMatrixUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: SkillMatrixUpdateManyWithWhereWithoutStaffInput | SkillMatrixUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: SkillMatrixScalarWhereInput | SkillMatrixScalarWhereInput[]
  }

  export type ShiftSwapUncheckedUpdateManyWithoutProposerNestedInput = {
    create?: XOR<ShiftSwapCreateWithoutProposerInput, ShiftSwapUncheckedCreateWithoutProposerInput> | ShiftSwapCreateWithoutProposerInput[] | ShiftSwapUncheckedCreateWithoutProposerInput[]
    connectOrCreate?: ShiftSwapCreateOrConnectWithoutProposerInput | ShiftSwapCreateOrConnectWithoutProposerInput[]
    upsert?: ShiftSwapUpsertWithWhereUniqueWithoutProposerInput | ShiftSwapUpsertWithWhereUniqueWithoutProposerInput[]
    createMany?: ShiftSwapCreateManyProposerInputEnvelope
    set?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    disconnect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    delete?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    connect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    update?: ShiftSwapUpdateWithWhereUniqueWithoutProposerInput | ShiftSwapUpdateWithWhereUniqueWithoutProposerInput[]
    updateMany?: ShiftSwapUpdateManyWithWhereWithoutProposerInput | ShiftSwapUpdateManyWithWhereWithoutProposerInput[]
    deleteMany?: ShiftSwapScalarWhereInput | ShiftSwapScalarWhereInput[]
  }

  export type ShiftSwapUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<ShiftSwapCreateWithoutReceiverInput, ShiftSwapUncheckedCreateWithoutReceiverInput> | ShiftSwapCreateWithoutReceiverInput[] | ShiftSwapUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: ShiftSwapCreateOrConnectWithoutReceiverInput | ShiftSwapCreateOrConnectWithoutReceiverInput[]
    upsert?: ShiftSwapUpsertWithWhereUniqueWithoutReceiverInput | ShiftSwapUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: ShiftSwapCreateManyReceiverInputEnvelope
    set?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    disconnect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    delete?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    connect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    update?: ShiftSwapUpdateWithWhereUniqueWithoutReceiverInput | ShiftSwapUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: ShiftSwapUpdateManyWithWhereWithoutReceiverInput | ShiftSwapUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: ShiftSwapScalarWhereInput | ShiftSwapScalarWhereInput[]
  }

  export type ShiftCreateNestedManyWithoutPeriodInput = {
    create?: XOR<ShiftCreateWithoutPeriodInput, ShiftUncheckedCreateWithoutPeriodInput> | ShiftCreateWithoutPeriodInput[] | ShiftUncheckedCreateWithoutPeriodInput[]
    connectOrCreate?: ShiftCreateOrConnectWithoutPeriodInput | ShiftCreateOrConnectWithoutPeriodInput[]
    createMany?: ShiftCreateManyPeriodInputEnvelope
    connect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
  }

  export type ShiftUncheckedCreateNestedManyWithoutPeriodInput = {
    create?: XOR<ShiftCreateWithoutPeriodInput, ShiftUncheckedCreateWithoutPeriodInput> | ShiftCreateWithoutPeriodInput[] | ShiftUncheckedCreateWithoutPeriodInput[]
    connectOrCreate?: ShiftCreateOrConnectWithoutPeriodInput | ShiftCreateOrConnectWithoutPeriodInput[]
    createMany?: ShiftCreateManyPeriodInputEnvelope
    connect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ShiftUpdateManyWithoutPeriodNestedInput = {
    create?: XOR<ShiftCreateWithoutPeriodInput, ShiftUncheckedCreateWithoutPeriodInput> | ShiftCreateWithoutPeriodInput[] | ShiftUncheckedCreateWithoutPeriodInput[]
    connectOrCreate?: ShiftCreateOrConnectWithoutPeriodInput | ShiftCreateOrConnectWithoutPeriodInput[]
    upsert?: ShiftUpsertWithWhereUniqueWithoutPeriodInput | ShiftUpsertWithWhereUniqueWithoutPeriodInput[]
    createMany?: ShiftCreateManyPeriodInputEnvelope
    set?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    disconnect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    delete?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    connect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    update?: ShiftUpdateWithWhereUniqueWithoutPeriodInput | ShiftUpdateWithWhereUniqueWithoutPeriodInput[]
    updateMany?: ShiftUpdateManyWithWhereWithoutPeriodInput | ShiftUpdateManyWithWhereWithoutPeriodInput[]
    deleteMany?: ShiftScalarWhereInput | ShiftScalarWhereInput[]
  }

  export type ShiftUncheckedUpdateManyWithoutPeriodNestedInput = {
    create?: XOR<ShiftCreateWithoutPeriodInput, ShiftUncheckedCreateWithoutPeriodInput> | ShiftCreateWithoutPeriodInput[] | ShiftUncheckedCreateWithoutPeriodInput[]
    connectOrCreate?: ShiftCreateOrConnectWithoutPeriodInput | ShiftCreateOrConnectWithoutPeriodInput[]
    upsert?: ShiftUpsertWithWhereUniqueWithoutPeriodInput | ShiftUpsertWithWhereUniqueWithoutPeriodInput[]
    createMany?: ShiftCreateManyPeriodInputEnvelope
    set?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    disconnect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    delete?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    connect?: ShiftWhereUniqueInput | ShiftWhereUniqueInput[]
    update?: ShiftUpdateWithWhereUniqueWithoutPeriodInput | ShiftUpdateWithWhereUniqueWithoutPeriodInput[]
    updateMany?: ShiftUpdateManyWithWhereWithoutPeriodInput | ShiftUpdateManyWithWhereWithoutPeriodInput[]
    deleteMany?: ShiftScalarWhereInput | ShiftScalarWhereInput[]
  }

  export type RosterPeriodCreateNestedOneWithoutShiftsInput = {
    create?: XOR<RosterPeriodCreateWithoutShiftsInput, RosterPeriodUncheckedCreateWithoutShiftsInput>
    connectOrCreate?: RosterPeriodCreateOrConnectWithoutShiftsInput
    connect?: RosterPeriodWhereUniqueInput
  }

  export type StaffCreateNestedOneWithoutShiftsInput = {
    create?: XOR<StaffCreateWithoutShiftsInput, StaffUncheckedCreateWithoutShiftsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutShiftsInput
    connect?: StaffWhereUniqueInput
  }

  export type ShiftSwapCreateNestedManyWithoutProposedShiftInput = {
    create?: XOR<ShiftSwapCreateWithoutProposedShiftInput, ShiftSwapUncheckedCreateWithoutProposedShiftInput> | ShiftSwapCreateWithoutProposedShiftInput[] | ShiftSwapUncheckedCreateWithoutProposedShiftInput[]
    connectOrCreate?: ShiftSwapCreateOrConnectWithoutProposedShiftInput | ShiftSwapCreateOrConnectWithoutProposedShiftInput[]
    createMany?: ShiftSwapCreateManyProposedShiftInputEnvelope
    connect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
  }

  export type ShiftSwapUncheckedCreateNestedManyWithoutProposedShiftInput = {
    create?: XOR<ShiftSwapCreateWithoutProposedShiftInput, ShiftSwapUncheckedCreateWithoutProposedShiftInput> | ShiftSwapCreateWithoutProposedShiftInput[] | ShiftSwapUncheckedCreateWithoutProposedShiftInput[]
    connectOrCreate?: ShiftSwapCreateOrConnectWithoutProposedShiftInput | ShiftSwapCreateOrConnectWithoutProposedShiftInput[]
    createMany?: ShiftSwapCreateManyProposedShiftInputEnvelope
    connect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
  }

  export type RosterPeriodUpdateOneRequiredWithoutShiftsNestedInput = {
    create?: XOR<RosterPeriodCreateWithoutShiftsInput, RosterPeriodUncheckedCreateWithoutShiftsInput>
    connectOrCreate?: RosterPeriodCreateOrConnectWithoutShiftsInput
    upsert?: RosterPeriodUpsertWithoutShiftsInput
    connect?: RosterPeriodWhereUniqueInput
    update?: XOR<XOR<RosterPeriodUpdateToOneWithWhereWithoutShiftsInput, RosterPeriodUpdateWithoutShiftsInput>, RosterPeriodUncheckedUpdateWithoutShiftsInput>
  }

  export type StaffUpdateOneRequiredWithoutShiftsNestedInput = {
    create?: XOR<StaffCreateWithoutShiftsInput, StaffUncheckedCreateWithoutShiftsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutShiftsInput
    upsert?: StaffUpsertWithoutShiftsInput
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutShiftsInput, StaffUpdateWithoutShiftsInput>, StaffUncheckedUpdateWithoutShiftsInput>
  }

  export type ShiftSwapUpdateManyWithoutProposedShiftNestedInput = {
    create?: XOR<ShiftSwapCreateWithoutProposedShiftInput, ShiftSwapUncheckedCreateWithoutProposedShiftInput> | ShiftSwapCreateWithoutProposedShiftInput[] | ShiftSwapUncheckedCreateWithoutProposedShiftInput[]
    connectOrCreate?: ShiftSwapCreateOrConnectWithoutProposedShiftInput | ShiftSwapCreateOrConnectWithoutProposedShiftInput[]
    upsert?: ShiftSwapUpsertWithWhereUniqueWithoutProposedShiftInput | ShiftSwapUpsertWithWhereUniqueWithoutProposedShiftInput[]
    createMany?: ShiftSwapCreateManyProposedShiftInputEnvelope
    set?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    disconnect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    delete?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    connect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    update?: ShiftSwapUpdateWithWhereUniqueWithoutProposedShiftInput | ShiftSwapUpdateWithWhereUniqueWithoutProposedShiftInput[]
    updateMany?: ShiftSwapUpdateManyWithWhereWithoutProposedShiftInput | ShiftSwapUpdateManyWithWhereWithoutProposedShiftInput[]
    deleteMany?: ShiftSwapScalarWhereInput | ShiftSwapScalarWhereInput[]
  }

  export type ShiftSwapUncheckedUpdateManyWithoutProposedShiftNestedInput = {
    create?: XOR<ShiftSwapCreateWithoutProposedShiftInput, ShiftSwapUncheckedCreateWithoutProposedShiftInput> | ShiftSwapCreateWithoutProposedShiftInput[] | ShiftSwapUncheckedCreateWithoutProposedShiftInput[]
    connectOrCreate?: ShiftSwapCreateOrConnectWithoutProposedShiftInput | ShiftSwapCreateOrConnectWithoutProposedShiftInput[]
    upsert?: ShiftSwapUpsertWithWhereUniqueWithoutProposedShiftInput | ShiftSwapUpsertWithWhereUniqueWithoutProposedShiftInput[]
    createMany?: ShiftSwapCreateManyProposedShiftInputEnvelope
    set?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    disconnect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    delete?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    connect?: ShiftSwapWhereUniqueInput | ShiftSwapWhereUniqueInput[]
    update?: ShiftSwapUpdateWithWhereUniqueWithoutProposedShiftInput | ShiftSwapUpdateWithWhereUniqueWithoutProposedShiftInput[]
    updateMany?: ShiftSwapUpdateManyWithWhereWithoutProposedShiftInput | ShiftSwapUpdateManyWithWhereWithoutProposedShiftInput[]
    deleteMany?: ShiftSwapScalarWhereInput | ShiftSwapScalarWhereInput[]
  }

  export type StaffCreateNestedOneWithoutLeaveRequestsInput = {
    create?: XOR<StaffCreateWithoutLeaveRequestsInput, StaffUncheckedCreateWithoutLeaveRequestsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutLeaveRequestsInput
    connect?: StaffWhereUniqueInput
  }

  export type StaffUpdateOneRequiredWithoutLeaveRequestsNestedInput = {
    create?: XOR<StaffCreateWithoutLeaveRequestsInput, StaffUncheckedCreateWithoutLeaveRequestsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutLeaveRequestsInput
    upsert?: StaffUpsertWithoutLeaveRequestsInput
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutLeaveRequestsInput, StaffUpdateWithoutLeaveRequestsInput>, StaffUncheckedUpdateWithoutLeaveRequestsInput>
  }

  export type StaffCreateNestedOneWithoutLeaveDaysInput = {
    create?: XOR<StaffCreateWithoutLeaveDaysInput, StaffUncheckedCreateWithoutLeaveDaysInput>
    connectOrCreate?: StaffCreateOrConnectWithoutLeaveDaysInput
    connect?: StaffWhereUniqueInput
  }

  export type StaffUpdateOneRequiredWithoutLeaveDaysNestedInput = {
    create?: XOR<StaffCreateWithoutLeaveDaysInput, StaffUncheckedCreateWithoutLeaveDaysInput>
    connectOrCreate?: StaffCreateOrConnectWithoutLeaveDaysInput
    upsert?: StaffUpsertWithoutLeaveDaysInput
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutLeaveDaysInput, StaffUpdateWithoutLeaveDaysInput>, StaffUncheckedUpdateWithoutLeaveDaysInput>
  }

  export type StaffCreateNestedOneWithoutLeavePeriodsInput = {
    create?: XOR<StaffCreateWithoutLeavePeriodsInput, StaffUncheckedCreateWithoutLeavePeriodsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutLeavePeriodsInput
    connect?: StaffWhereUniqueInput
  }

  export type StaffUpdateOneRequiredWithoutLeavePeriodsNestedInput = {
    create?: XOR<StaffCreateWithoutLeavePeriodsInput, StaffUncheckedCreateWithoutLeavePeriodsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutLeavePeriodsInput
    upsert?: StaffUpsertWithoutLeavePeriodsInput
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutLeavePeriodsInput, StaffUpdateWithoutLeavePeriodsInput>, StaffUncheckedUpdateWithoutLeavePeriodsInput>
  }

  export type ShiftCreateNestedOneWithoutSwapsInput = {
    create?: XOR<ShiftCreateWithoutSwapsInput, ShiftUncheckedCreateWithoutSwapsInput>
    connectOrCreate?: ShiftCreateOrConnectWithoutSwapsInput
    connect?: ShiftWhereUniqueInput
  }

  export type StaffCreateNestedOneWithoutSwapsProposedInput = {
    create?: XOR<StaffCreateWithoutSwapsProposedInput, StaffUncheckedCreateWithoutSwapsProposedInput>
    connectOrCreate?: StaffCreateOrConnectWithoutSwapsProposedInput
    connect?: StaffWhereUniqueInput
  }

  export type StaffCreateNestedOneWithoutSwapsReceivedInput = {
    create?: XOR<StaffCreateWithoutSwapsReceivedInput, StaffUncheckedCreateWithoutSwapsReceivedInput>
    connectOrCreate?: StaffCreateOrConnectWithoutSwapsReceivedInput
    connect?: StaffWhereUniqueInput
  }

  export type ShiftUpdateOneRequiredWithoutSwapsNestedInput = {
    create?: XOR<ShiftCreateWithoutSwapsInput, ShiftUncheckedCreateWithoutSwapsInput>
    connectOrCreate?: ShiftCreateOrConnectWithoutSwapsInput
    upsert?: ShiftUpsertWithoutSwapsInput
    connect?: ShiftWhereUniqueInput
    update?: XOR<XOR<ShiftUpdateToOneWithWhereWithoutSwapsInput, ShiftUpdateWithoutSwapsInput>, ShiftUncheckedUpdateWithoutSwapsInput>
  }

  export type StaffUpdateOneRequiredWithoutSwapsProposedNestedInput = {
    create?: XOR<StaffCreateWithoutSwapsProposedInput, StaffUncheckedCreateWithoutSwapsProposedInput>
    connectOrCreate?: StaffCreateOrConnectWithoutSwapsProposedInput
    upsert?: StaffUpsertWithoutSwapsProposedInput
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutSwapsProposedInput, StaffUpdateWithoutSwapsProposedInput>, StaffUncheckedUpdateWithoutSwapsProposedInput>
  }

  export type StaffUpdateOneRequiredWithoutSwapsReceivedNestedInput = {
    create?: XOR<StaffCreateWithoutSwapsReceivedInput, StaffUncheckedCreateWithoutSwapsReceivedInput>
    connectOrCreate?: StaffCreateOrConnectWithoutSwapsReceivedInput
    upsert?: StaffUpsertWithoutSwapsReceivedInput
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutSwapsReceivedInput, StaffUpdateWithoutSwapsReceivedInput>, StaffUncheckedUpdateWithoutSwapsReceivedInput>
  }

  export type SkillMatrixCreateNestedManyWithoutSkillInput = {
    create?: XOR<SkillMatrixCreateWithoutSkillInput, SkillMatrixUncheckedCreateWithoutSkillInput> | SkillMatrixCreateWithoutSkillInput[] | SkillMatrixUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: SkillMatrixCreateOrConnectWithoutSkillInput | SkillMatrixCreateOrConnectWithoutSkillInput[]
    createMany?: SkillMatrixCreateManySkillInputEnvelope
    connect?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
  }

  export type SkillMatrixUncheckedCreateNestedManyWithoutSkillInput = {
    create?: XOR<SkillMatrixCreateWithoutSkillInput, SkillMatrixUncheckedCreateWithoutSkillInput> | SkillMatrixCreateWithoutSkillInput[] | SkillMatrixUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: SkillMatrixCreateOrConnectWithoutSkillInput | SkillMatrixCreateOrConnectWithoutSkillInput[]
    createMany?: SkillMatrixCreateManySkillInputEnvelope
    connect?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
  }

  export type SkillMatrixUpdateManyWithoutSkillNestedInput = {
    create?: XOR<SkillMatrixCreateWithoutSkillInput, SkillMatrixUncheckedCreateWithoutSkillInput> | SkillMatrixCreateWithoutSkillInput[] | SkillMatrixUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: SkillMatrixCreateOrConnectWithoutSkillInput | SkillMatrixCreateOrConnectWithoutSkillInput[]
    upsert?: SkillMatrixUpsertWithWhereUniqueWithoutSkillInput | SkillMatrixUpsertWithWhereUniqueWithoutSkillInput[]
    createMany?: SkillMatrixCreateManySkillInputEnvelope
    set?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
    disconnect?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
    delete?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
    connect?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
    update?: SkillMatrixUpdateWithWhereUniqueWithoutSkillInput | SkillMatrixUpdateWithWhereUniqueWithoutSkillInput[]
    updateMany?: SkillMatrixUpdateManyWithWhereWithoutSkillInput | SkillMatrixUpdateManyWithWhereWithoutSkillInput[]
    deleteMany?: SkillMatrixScalarWhereInput | SkillMatrixScalarWhereInput[]
  }

  export type SkillMatrixUncheckedUpdateManyWithoutSkillNestedInput = {
    create?: XOR<SkillMatrixCreateWithoutSkillInput, SkillMatrixUncheckedCreateWithoutSkillInput> | SkillMatrixCreateWithoutSkillInput[] | SkillMatrixUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: SkillMatrixCreateOrConnectWithoutSkillInput | SkillMatrixCreateOrConnectWithoutSkillInput[]
    upsert?: SkillMatrixUpsertWithWhereUniqueWithoutSkillInput | SkillMatrixUpsertWithWhereUniqueWithoutSkillInput[]
    createMany?: SkillMatrixCreateManySkillInputEnvelope
    set?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
    disconnect?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
    delete?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
    connect?: SkillMatrixWhereUniqueInput | SkillMatrixWhereUniqueInput[]
    update?: SkillMatrixUpdateWithWhereUniqueWithoutSkillInput | SkillMatrixUpdateWithWhereUniqueWithoutSkillInput[]
    updateMany?: SkillMatrixUpdateManyWithWhereWithoutSkillInput | SkillMatrixUpdateManyWithWhereWithoutSkillInput[]
    deleteMany?: SkillMatrixScalarWhereInput | SkillMatrixScalarWhereInput[]
  }

  export type StaffCreateNestedOneWithoutSkillsMatrixInput = {
    create?: XOR<StaffCreateWithoutSkillsMatrixInput, StaffUncheckedCreateWithoutSkillsMatrixInput>
    connectOrCreate?: StaffCreateOrConnectWithoutSkillsMatrixInput
    connect?: StaffWhereUniqueInput
  }

  export type SkillCreateNestedOneWithoutSkillsMatrixInput = {
    create?: XOR<SkillCreateWithoutSkillsMatrixInput, SkillUncheckedCreateWithoutSkillsMatrixInput>
    connectOrCreate?: SkillCreateOrConnectWithoutSkillsMatrixInput
    connect?: SkillWhereUniqueInput
  }

  export type StaffUpdateOneRequiredWithoutSkillsMatrixNestedInput = {
    create?: XOR<StaffCreateWithoutSkillsMatrixInput, StaffUncheckedCreateWithoutSkillsMatrixInput>
    connectOrCreate?: StaffCreateOrConnectWithoutSkillsMatrixInput
    upsert?: StaffUpsertWithoutSkillsMatrixInput
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutSkillsMatrixInput, StaffUpdateWithoutSkillsMatrixInput>, StaffUncheckedUpdateWithoutSkillsMatrixInput>
  }

  export type SkillUpdateOneRequiredWithoutSkillsMatrixNestedInput = {
    create?: XOR<SkillCreateWithoutSkillsMatrixInput, SkillUncheckedCreateWithoutSkillsMatrixInput>
    connectOrCreate?: SkillCreateOrConnectWithoutSkillsMatrixInput
    upsert?: SkillUpsertWithoutSkillsMatrixInput
    connect?: SkillWhereUniqueInput
    update?: XOR<XOR<SkillUpdateToOneWithWhereWithoutSkillsMatrixInput, SkillUpdateWithoutSkillsMatrixInput>, SkillUncheckedUpdateWithoutSkillsMatrixInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StaffCreateWithoutUserInput = {
    id?: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shifts?: ShiftCreateNestedManyWithoutStaffInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStaffInput
    leaveDays?: LeaveDayCreateNestedManyWithoutStaffInput
    leavePeriods?: LeavePeriodCreateNestedManyWithoutStaffInput
    skillsMatrix?: SkillMatrixCreateNestedManyWithoutStaffInput
    swapsProposed?: ShiftSwapCreateNestedManyWithoutProposerInput
    swapsReceived?: ShiftSwapCreateNestedManyWithoutReceiverInput
  }

  export type StaffUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shifts?: ShiftUncheckedCreateNestedManyWithoutStaffInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStaffInput
    leaveDays?: LeaveDayUncheckedCreateNestedManyWithoutStaffInput
    leavePeriods?: LeavePeriodUncheckedCreateNestedManyWithoutStaffInput
    skillsMatrix?: SkillMatrixUncheckedCreateNestedManyWithoutStaffInput
    swapsProposed?: ShiftSwapUncheckedCreateNestedManyWithoutProposerInput
    swapsReceived?: ShiftSwapUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type StaffCreateOrConnectWithoutUserInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
  }

  export type StaffUpsertWithoutUserInput = {
    update: XOR<StaffUpdateWithoutUserInput, StaffUncheckedUpdateWithoutUserInput>
    create: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutUserInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutUserInput, StaffUncheckedUpdateWithoutUserInput>
  }

  export type StaffUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shifts?: ShiftUpdateManyWithoutStaffNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStaffNestedInput
    leaveDays?: LeaveDayUpdateManyWithoutStaffNestedInput
    leavePeriods?: LeavePeriodUpdateManyWithoutStaffNestedInput
    skillsMatrix?: SkillMatrixUpdateManyWithoutStaffNestedInput
    swapsProposed?: ShiftSwapUpdateManyWithoutProposerNestedInput
    swapsReceived?: ShiftSwapUpdateManyWithoutReceiverNestedInput
  }

  export type StaffUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shifts?: ShiftUncheckedUpdateManyWithoutStaffNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStaffNestedInput
    leaveDays?: LeaveDayUncheckedUpdateManyWithoutStaffNestedInput
    leavePeriods?: LeavePeriodUncheckedUpdateManyWithoutStaffNestedInput
    skillsMatrix?: SkillMatrixUncheckedUpdateManyWithoutStaffNestedInput
    swapsProposed?: ShiftSwapUncheckedUpdateManyWithoutProposerNestedInput
    swapsReceived?: ShiftSwapUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutStaffInput = {
    id?: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutStaffInput = {
    id?: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutStaffInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStaffInput, UserUncheckedCreateWithoutStaffInput>
  }

  export type ShiftCreateWithoutStaffInput = {
    id?: string
    week: number
    day: string
    shiftType: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    period: RosterPeriodCreateNestedOneWithoutShiftsInput
    swaps?: ShiftSwapCreateNestedManyWithoutProposedShiftInput
  }

  export type ShiftUncheckedCreateWithoutStaffInput = {
    id?: string
    periodId: string
    week: number
    day: string
    shiftType: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    swaps?: ShiftSwapUncheckedCreateNestedManyWithoutProposedShiftInput
  }

  export type ShiftCreateOrConnectWithoutStaffInput = {
    where: ShiftWhereUniqueInput
    create: XOR<ShiftCreateWithoutStaffInput, ShiftUncheckedCreateWithoutStaffInput>
  }

  export type ShiftCreateManyStaffInputEnvelope = {
    data: ShiftCreateManyStaffInput | ShiftCreateManyStaffInput[]
  }

  export type LeaveRequestCreateWithoutStaffInput = {
    id?: string
    type: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    status?: string
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeaveRequestUncheckedCreateWithoutStaffInput = {
    id?: string
    type: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    status?: string
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeaveRequestCreateOrConnectWithoutStaffInput = {
    where: LeaveRequestWhereUniqueInput
    create: XOR<LeaveRequestCreateWithoutStaffInput, LeaveRequestUncheckedCreateWithoutStaffInput>
  }

  export type LeaveRequestCreateManyStaffInputEnvelope = {
    data: LeaveRequestCreateManyStaffInput | LeaveRequestCreateManyStaffInput[]
  }

  export type LeaveDayCreateWithoutStaffInput = {
    id?: string
    date: Date | string
    reason?: string | null
    createdAt?: Date | string
  }

  export type LeaveDayUncheckedCreateWithoutStaffInput = {
    id?: string
    date: Date | string
    reason?: string | null
    createdAt?: Date | string
  }

  export type LeaveDayCreateOrConnectWithoutStaffInput = {
    where: LeaveDayWhereUniqueInput
    create: XOR<LeaveDayCreateWithoutStaffInput, LeaveDayUncheckedCreateWithoutStaffInput>
  }

  export type LeaveDayCreateManyStaffInputEnvelope = {
    data: LeaveDayCreateManyStaffInput | LeaveDayCreateManyStaffInput[]
  }

  export type LeavePeriodCreateWithoutStaffInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    createdAt?: Date | string
  }

  export type LeavePeriodUncheckedCreateWithoutStaffInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    createdAt?: Date | string
  }

  export type LeavePeriodCreateOrConnectWithoutStaffInput = {
    where: LeavePeriodWhereUniqueInput
    create: XOR<LeavePeriodCreateWithoutStaffInput, LeavePeriodUncheckedCreateWithoutStaffInput>
  }

  export type LeavePeriodCreateManyStaffInputEnvelope = {
    data: LeavePeriodCreateManyStaffInput | LeavePeriodCreateManyStaffInput[]
  }

  export type SkillMatrixCreateWithoutStaffInput = {
    id?: string
    level: string
    certificationDate?: Date | string | null
    expiryDate?: Date | string | null
    lastAssessed?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skill: SkillCreateNestedOneWithoutSkillsMatrixInput
  }

  export type SkillMatrixUncheckedCreateWithoutStaffInput = {
    id?: string
    skillId: string
    level: string
    certificationDate?: Date | string | null
    expiryDate?: Date | string | null
    lastAssessed?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkillMatrixCreateOrConnectWithoutStaffInput = {
    where: SkillMatrixWhereUniqueInput
    create: XOR<SkillMatrixCreateWithoutStaffInput, SkillMatrixUncheckedCreateWithoutStaffInput>
  }

  export type SkillMatrixCreateManyStaffInputEnvelope = {
    data: SkillMatrixCreateManyStaffInput | SkillMatrixCreateManyStaffInput[]
  }

  export type ShiftSwapCreateWithoutProposerInput = {
    id?: string
    targetShiftId: string
    status?: string
    proposerNote?: string | null
    receiverNote?: string | null
    proposedAt?: Date | string
    respondedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposedShift: ShiftCreateNestedOneWithoutSwapsInput
    receiver: StaffCreateNestedOneWithoutSwapsReceivedInput
  }

  export type ShiftSwapUncheckedCreateWithoutProposerInput = {
    id?: string
    proposedShiftId: string
    targetShiftId: string
    receiverId: string
    status?: string
    proposerNote?: string | null
    receiverNote?: string | null
    proposedAt?: Date | string
    respondedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftSwapCreateOrConnectWithoutProposerInput = {
    where: ShiftSwapWhereUniqueInput
    create: XOR<ShiftSwapCreateWithoutProposerInput, ShiftSwapUncheckedCreateWithoutProposerInput>
  }

  export type ShiftSwapCreateManyProposerInputEnvelope = {
    data: ShiftSwapCreateManyProposerInput | ShiftSwapCreateManyProposerInput[]
  }

  export type ShiftSwapCreateWithoutReceiverInput = {
    id?: string
    targetShiftId: string
    status?: string
    proposerNote?: string | null
    receiverNote?: string | null
    proposedAt?: Date | string
    respondedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposedShift: ShiftCreateNestedOneWithoutSwapsInput
    proposer: StaffCreateNestedOneWithoutSwapsProposedInput
  }

  export type ShiftSwapUncheckedCreateWithoutReceiverInput = {
    id?: string
    proposedShiftId: string
    targetShiftId: string
    proposerId: string
    status?: string
    proposerNote?: string | null
    receiverNote?: string | null
    proposedAt?: Date | string
    respondedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftSwapCreateOrConnectWithoutReceiverInput = {
    where: ShiftSwapWhereUniqueInput
    create: XOR<ShiftSwapCreateWithoutReceiverInput, ShiftSwapUncheckedCreateWithoutReceiverInput>
  }

  export type ShiftSwapCreateManyReceiverInputEnvelope = {
    data: ShiftSwapCreateManyReceiverInput | ShiftSwapCreateManyReceiverInput[]
  }

  export type UserUpsertWithoutStaffInput = {
    update: XOR<UserUpdateWithoutStaffInput, UserUncheckedUpdateWithoutStaffInput>
    create: XOR<UserCreateWithoutStaffInput, UserUncheckedCreateWithoutStaffInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStaffInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStaffInput, UserUncheckedUpdateWithoutStaffInput>
  }

  export type UserUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftUpsertWithWhereUniqueWithoutStaffInput = {
    where: ShiftWhereUniqueInput
    update: XOR<ShiftUpdateWithoutStaffInput, ShiftUncheckedUpdateWithoutStaffInput>
    create: XOR<ShiftCreateWithoutStaffInput, ShiftUncheckedCreateWithoutStaffInput>
  }

  export type ShiftUpdateWithWhereUniqueWithoutStaffInput = {
    where: ShiftWhereUniqueInput
    data: XOR<ShiftUpdateWithoutStaffInput, ShiftUncheckedUpdateWithoutStaffInput>
  }

  export type ShiftUpdateManyWithWhereWithoutStaffInput = {
    where: ShiftScalarWhereInput
    data: XOR<ShiftUpdateManyMutationInput, ShiftUncheckedUpdateManyWithoutStaffInput>
  }

  export type ShiftScalarWhereInput = {
    AND?: ShiftScalarWhereInput | ShiftScalarWhereInput[]
    OR?: ShiftScalarWhereInput[]
    NOT?: ShiftScalarWhereInput | ShiftScalarWhereInput[]
    id?: StringFilter<"Shift"> | string
    periodId?: StringFilter<"Shift"> | string
    staffId?: StringFilter<"Shift"> | string
    week?: IntFilter<"Shift"> | number
    day?: StringFilter<"Shift"> | string
    shiftType?: StringFilter<"Shift"> | string
    status?: StringFilter<"Shift"> | string
    createdAt?: DateTimeFilter<"Shift"> | Date | string
    updatedAt?: DateTimeFilter<"Shift"> | Date | string
  }

  export type LeaveRequestUpsertWithWhereUniqueWithoutStaffInput = {
    where: LeaveRequestWhereUniqueInput
    update: XOR<LeaveRequestUpdateWithoutStaffInput, LeaveRequestUncheckedUpdateWithoutStaffInput>
    create: XOR<LeaveRequestCreateWithoutStaffInput, LeaveRequestUncheckedCreateWithoutStaffInput>
  }

  export type LeaveRequestUpdateWithWhereUniqueWithoutStaffInput = {
    where: LeaveRequestWhereUniqueInput
    data: XOR<LeaveRequestUpdateWithoutStaffInput, LeaveRequestUncheckedUpdateWithoutStaffInput>
  }

  export type LeaveRequestUpdateManyWithWhereWithoutStaffInput = {
    where: LeaveRequestScalarWhereInput
    data: XOR<LeaveRequestUpdateManyMutationInput, LeaveRequestUncheckedUpdateManyWithoutStaffInput>
  }

  export type LeaveRequestScalarWhereInput = {
    AND?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
    OR?: LeaveRequestScalarWhereInput[]
    NOT?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
    id?: StringFilter<"LeaveRequest"> | string
    staffId?: StringFilter<"LeaveRequest"> | string
    type?: StringFilter<"LeaveRequest"> | string
    startDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    endDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    reason?: StringNullableFilter<"LeaveRequest"> | string | null
    status?: StringFilter<"LeaveRequest"> | string
    submittedAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    reviewedBy?: StringNullableFilter<"LeaveRequest"> | string | null
    createdAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    updatedAt?: DateTimeFilter<"LeaveRequest"> | Date | string
  }

  export type LeaveDayUpsertWithWhereUniqueWithoutStaffInput = {
    where: LeaveDayWhereUniqueInput
    update: XOR<LeaveDayUpdateWithoutStaffInput, LeaveDayUncheckedUpdateWithoutStaffInput>
    create: XOR<LeaveDayCreateWithoutStaffInput, LeaveDayUncheckedCreateWithoutStaffInput>
  }

  export type LeaveDayUpdateWithWhereUniqueWithoutStaffInput = {
    where: LeaveDayWhereUniqueInput
    data: XOR<LeaveDayUpdateWithoutStaffInput, LeaveDayUncheckedUpdateWithoutStaffInput>
  }

  export type LeaveDayUpdateManyWithWhereWithoutStaffInput = {
    where: LeaveDayScalarWhereInput
    data: XOR<LeaveDayUpdateManyMutationInput, LeaveDayUncheckedUpdateManyWithoutStaffInput>
  }

  export type LeaveDayScalarWhereInput = {
    AND?: LeaveDayScalarWhereInput | LeaveDayScalarWhereInput[]
    OR?: LeaveDayScalarWhereInput[]
    NOT?: LeaveDayScalarWhereInput | LeaveDayScalarWhereInput[]
    id?: StringFilter<"LeaveDay"> | string
    staffId?: StringFilter<"LeaveDay"> | string
    date?: DateTimeFilter<"LeaveDay"> | Date | string
    reason?: StringNullableFilter<"LeaveDay"> | string | null
    createdAt?: DateTimeFilter<"LeaveDay"> | Date | string
  }

  export type LeavePeriodUpsertWithWhereUniqueWithoutStaffInput = {
    where: LeavePeriodWhereUniqueInput
    update: XOR<LeavePeriodUpdateWithoutStaffInput, LeavePeriodUncheckedUpdateWithoutStaffInput>
    create: XOR<LeavePeriodCreateWithoutStaffInput, LeavePeriodUncheckedCreateWithoutStaffInput>
  }

  export type LeavePeriodUpdateWithWhereUniqueWithoutStaffInput = {
    where: LeavePeriodWhereUniqueInput
    data: XOR<LeavePeriodUpdateWithoutStaffInput, LeavePeriodUncheckedUpdateWithoutStaffInput>
  }

  export type LeavePeriodUpdateManyWithWhereWithoutStaffInput = {
    where: LeavePeriodScalarWhereInput
    data: XOR<LeavePeriodUpdateManyMutationInput, LeavePeriodUncheckedUpdateManyWithoutStaffInput>
  }

  export type LeavePeriodScalarWhereInput = {
    AND?: LeavePeriodScalarWhereInput | LeavePeriodScalarWhereInput[]
    OR?: LeavePeriodScalarWhereInput[]
    NOT?: LeavePeriodScalarWhereInput | LeavePeriodScalarWhereInput[]
    id?: StringFilter<"LeavePeriod"> | string
    staffId?: StringFilter<"LeavePeriod"> | string
    startDate?: DateTimeFilter<"LeavePeriod"> | Date | string
    endDate?: DateTimeFilter<"LeavePeriod"> | Date | string
    reason?: StringNullableFilter<"LeavePeriod"> | string | null
    createdAt?: DateTimeFilter<"LeavePeriod"> | Date | string
  }

  export type SkillMatrixUpsertWithWhereUniqueWithoutStaffInput = {
    where: SkillMatrixWhereUniqueInput
    update: XOR<SkillMatrixUpdateWithoutStaffInput, SkillMatrixUncheckedUpdateWithoutStaffInput>
    create: XOR<SkillMatrixCreateWithoutStaffInput, SkillMatrixUncheckedCreateWithoutStaffInput>
  }

  export type SkillMatrixUpdateWithWhereUniqueWithoutStaffInput = {
    where: SkillMatrixWhereUniqueInput
    data: XOR<SkillMatrixUpdateWithoutStaffInput, SkillMatrixUncheckedUpdateWithoutStaffInput>
  }

  export type SkillMatrixUpdateManyWithWhereWithoutStaffInput = {
    where: SkillMatrixScalarWhereInput
    data: XOR<SkillMatrixUpdateManyMutationInput, SkillMatrixUncheckedUpdateManyWithoutStaffInput>
  }

  export type SkillMatrixScalarWhereInput = {
    AND?: SkillMatrixScalarWhereInput | SkillMatrixScalarWhereInput[]
    OR?: SkillMatrixScalarWhereInput[]
    NOT?: SkillMatrixScalarWhereInput | SkillMatrixScalarWhereInput[]
    id?: StringFilter<"SkillMatrix"> | string
    staffId?: StringFilter<"SkillMatrix"> | string
    skillId?: StringFilter<"SkillMatrix"> | string
    level?: StringFilter<"SkillMatrix"> | string
    certificationDate?: DateTimeNullableFilter<"SkillMatrix"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"SkillMatrix"> | Date | string | null
    lastAssessed?: DateTimeNullableFilter<"SkillMatrix"> | Date | string | null
    notes?: StringNullableFilter<"SkillMatrix"> | string | null
    createdAt?: DateTimeFilter<"SkillMatrix"> | Date | string
    updatedAt?: DateTimeFilter<"SkillMatrix"> | Date | string
  }

  export type ShiftSwapUpsertWithWhereUniqueWithoutProposerInput = {
    where: ShiftSwapWhereUniqueInput
    update: XOR<ShiftSwapUpdateWithoutProposerInput, ShiftSwapUncheckedUpdateWithoutProposerInput>
    create: XOR<ShiftSwapCreateWithoutProposerInput, ShiftSwapUncheckedCreateWithoutProposerInput>
  }

  export type ShiftSwapUpdateWithWhereUniqueWithoutProposerInput = {
    where: ShiftSwapWhereUniqueInput
    data: XOR<ShiftSwapUpdateWithoutProposerInput, ShiftSwapUncheckedUpdateWithoutProposerInput>
  }

  export type ShiftSwapUpdateManyWithWhereWithoutProposerInput = {
    where: ShiftSwapScalarWhereInput
    data: XOR<ShiftSwapUpdateManyMutationInput, ShiftSwapUncheckedUpdateManyWithoutProposerInput>
  }

  export type ShiftSwapScalarWhereInput = {
    AND?: ShiftSwapScalarWhereInput | ShiftSwapScalarWhereInput[]
    OR?: ShiftSwapScalarWhereInput[]
    NOT?: ShiftSwapScalarWhereInput | ShiftSwapScalarWhereInput[]
    id?: StringFilter<"ShiftSwap"> | string
    proposedShiftId?: StringFilter<"ShiftSwap"> | string
    targetShiftId?: StringFilter<"ShiftSwap"> | string
    proposerId?: StringFilter<"ShiftSwap"> | string
    receiverId?: StringFilter<"ShiftSwap"> | string
    status?: StringFilter<"ShiftSwap"> | string
    proposerNote?: StringNullableFilter<"ShiftSwap"> | string | null
    receiverNote?: StringNullableFilter<"ShiftSwap"> | string | null
    proposedAt?: DateTimeFilter<"ShiftSwap"> | Date | string
    respondedAt?: DateTimeNullableFilter<"ShiftSwap"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ShiftSwap"> | Date | string | null
    createdAt?: DateTimeFilter<"ShiftSwap"> | Date | string
    updatedAt?: DateTimeFilter<"ShiftSwap"> | Date | string
  }

  export type ShiftSwapUpsertWithWhereUniqueWithoutReceiverInput = {
    where: ShiftSwapWhereUniqueInput
    update: XOR<ShiftSwapUpdateWithoutReceiverInput, ShiftSwapUncheckedUpdateWithoutReceiverInput>
    create: XOR<ShiftSwapCreateWithoutReceiverInput, ShiftSwapUncheckedCreateWithoutReceiverInput>
  }

  export type ShiftSwapUpdateWithWhereUniqueWithoutReceiverInput = {
    where: ShiftSwapWhereUniqueInput
    data: XOR<ShiftSwapUpdateWithoutReceiverInput, ShiftSwapUncheckedUpdateWithoutReceiverInput>
  }

  export type ShiftSwapUpdateManyWithWhereWithoutReceiverInput = {
    where: ShiftSwapScalarWhereInput
    data: XOR<ShiftSwapUpdateManyMutationInput, ShiftSwapUncheckedUpdateManyWithoutReceiverInput>
  }

  export type ShiftCreateWithoutPeriodInput = {
    id?: string
    week: number
    day: string
    shiftType: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    staff: StaffCreateNestedOneWithoutShiftsInput
    swaps?: ShiftSwapCreateNestedManyWithoutProposedShiftInput
  }

  export type ShiftUncheckedCreateWithoutPeriodInput = {
    id?: string
    staffId: string
    week: number
    day: string
    shiftType: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    swaps?: ShiftSwapUncheckedCreateNestedManyWithoutProposedShiftInput
  }

  export type ShiftCreateOrConnectWithoutPeriodInput = {
    where: ShiftWhereUniqueInput
    create: XOR<ShiftCreateWithoutPeriodInput, ShiftUncheckedCreateWithoutPeriodInput>
  }

  export type ShiftCreateManyPeriodInputEnvelope = {
    data: ShiftCreateManyPeriodInput | ShiftCreateManyPeriodInput[]
  }

  export type ShiftUpsertWithWhereUniqueWithoutPeriodInput = {
    where: ShiftWhereUniqueInput
    update: XOR<ShiftUpdateWithoutPeriodInput, ShiftUncheckedUpdateWithoutPeriodInput>
    create: XOR<ShiftCreateWithoutPeriodInput, ShiftUncheckedCreateWithoutPeriodInput>
  }

  export type ShiftUpdateWithWhereUniqueWithoutPeriodInput = {
    where: ShiftWhereUniqueInput
    data: XOR<ShiftUpdateWithoutPeriodInput, ShiftUncheckedUpdateWithoutPeriodInput>
  }

  export type ShiftUpdateManyWithWhereWithoutPeriodInput = {
    where: ShiftScalarWhereInput
    data: XOR<ShiftUpdateManyMutationInput, ShiftUncheckedUpdateManyWithoutPeriodInput>
  }

  export type RosterPeriodCreateWithoutShiftsInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    weeks: number
    weekMetadata: string
    staffSnapshot: string
    stats: string
    generatedAt?: Date | string
    generatedBy?: string | null
  }

  export type RosterPeriodUncheckedCreateWithoutShiftsInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    weeks: number
    weekMetadata: string
    staffSnapshot: string
    stats: string
    generatedAt?: Date | string
    generatedBy?: string | null
  }

  export type RosterPeriodCreateOrConnectWithoutShiftsInput = {
    where: RosterPeriodWhereUniqueInput
    create: XOR<RosterPeriodCreateWithoutShiftsInput, RosterPeriodUncheckedCreateWithoutShiftsInput>
  }

  export type StaffCreateWithoutShiftsInput = {
    id?: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStaffInput
    leaveDays?: LeaveDayCreateNestedManyWithoutStaffInput
    leavePeriods?: LeavePeriodCreateNestedManyWithoutStaffInput
    skillsMatrix?: SkillMatrixCreateNestedManyWithoutStaffInput
    swapsProposed?: ShiftSwapCreateNestedManyWithoutProposerInput
    swapsReceived?: ShiftSwapCreateNestedManyWithoutReceiverInput
  }

  export type StaffUncheckedCreateWithoutShiftsInput = {
    id?: string
    userId: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStaffInput
    leaveDays?: LeaveDayUncheckedCreateNestedManyWithoutStaffInput
    leavePeriods?: LeavePeriodUncheckedCreateNestedManyWithoutStaffInput
    skillsMatrix?: SkillMatrixUncheckedCreateNestedManyWithoutStaffInput
    swapsProposed?: ShiftSwapUncheckedCreateNestedManyWithoutProposerInput
    swapsReceived?: ShiftSwapUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type StaffCreateOrConnectWithoutShiftsInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutShiftsInput, StaffUncheckedCreateWithoutShiftsInput>
  }

  export type ShiftSwapCreateWithoutProposedShiftInput = {
    id?: string
    targetShiftId: string
    status?: string
    proposerNote?: string | null
    receiverNote?: string | null
    proposedAt?: Date | string
    respondedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposer: StaffCreateNestedOneWithoutSwapsProposedInput
    receiver: StaffCreateNestedOneWithoutSwapsReceivedInput
  }

  export type ShiftSwapUncheckedCreateWithoutProposedShiftInput = {
    id?: string
    targetShiftId: string
    proposerId: string
    receiverId: string
    status?: string
    proposerNote?: string | null
    receiverNote?: string | null
    proposedAt?: Date | string
    respondedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftSwapCreateOrConnectWithoutProposedShiftInput = {
    where: ShiftSwapWhereUniqueInput
    create: XOR<ShiftSwapCreateWithoutProposedShiftInput, ShiftSwapUncheckedCreateWithoutProposedShiftInput>
  }

  export type ShiftSwapCreateManyProposedShiftInputEnvelope = {
    data: ShiftSwapCreateManyProposedShiftInput | ShiftSwapCreateManyProposedShiftInput[]
  }

  export type RosterPeriodUpsertWithoutShiftsInput = {
    update: XOR<RosterPeriodUpdateWithoutShiftsInput, RosterPeriodUncheckedUpdateWithoutShiftsInput>
    create: XOR<RosterPeriodCreateWithoutShiftsInput, RosterPeriodUncheckedCreateWithoutShiftsInput>
    where?: RosterPeriodWhereInput
  }

  export type RosterPeriodUpdateToOneWithWhereWithoutShiftsInput = {
    where?: RosterPeriodWhereInput
    data: XOR<RosterPeriodUpdateWithoutShiftsInput, RosterPeriodUncheckedUpdateWithoutShiftsInput>
  }

  export type RosterPeriodUpdateWithoutShiftsInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weeks?: IntFieldUpdateOperationsInput | number
    weekMetadata?: StringFieldUpdateOperationsInput | string
    staffSnapshot?: StringFieldUpdateOperationsInput | string
    stats?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RosterPeriodUncheckedUpdateWithoutShiftsInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weeks?: IntFieldUpdateOperationsInput | number
    weekMetadata?: StringFieldUpdateOperationsInput | string
    staffSnapshot?: StringFieldUpdateOperationsInput | string
    stats?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StaffUpsertWithoutShiftsInput = {
    update: XOR<StaffUpdateWithoutShiftsInput, StaffUncheckedUpdateWithoutShiftsInput>
    create: XOR<StaffCreateWithoutShiftsInput, StaffUncheckedCreateWithoutShiftsInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutShiftsInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutShiftsInput, StaffUncheckedUpdateWithoutShiftsInput>
  }

  export type StaffUpdateWithoutShiftsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStaffNestedInput
    leaveDays?: LeaveDayUpdateManyWithoutStaffNestedInput
    leavePeriods?: LeavePeriodUpdateManyWithoutStaffNestedInput
    skillsMatrix?: SkillMatrixUpdateManyWithoutStaffNestedInput
    swapsProposed?: ShiftSwapUpdateManyWithoutProposerNestedInput
    swapsReceived?: ShiftSwapUpdateManyWithoutReceiverNestedInput
  }

  export type StaffUncheckedUpdateWithoutShiftsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStaffNestedInput
    leaveDays?: LeaveDayUncheckedUpdateManyWithoutStaffNestedInput
    leavePeriods?: LeavePeriodUncheckedUpdateManyWithoutStaffNestedInput
    skillsMatrix?: SkillMatrixUncheckedUpdateManyWithoutStaffNestedInput
    swapsProposed?: ShiftSwapUncheckedUpdateManyWithoutProposerNestedInput
    swapsReceived?: ShiftSwapUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type ShiftSwapUpsertWithWhereUniqueWithoutProposedShiftInput = {
    where: ShiftSwapWhereUniqueInput
    update: XOR<ShiftSwapUpdateWithoutProposedShiftInput, ShiftSwapUncheckedUpdateWithoutProposedShiftInput>
    create: XOR<ShiftSwapCreateWithoutProposedShiftInput, ShiftSwapUncheckedCreateWithoutProposedShiftInput>
  }

  export type ShiftSwapUpdateWithWhereUniqueWithoutProposedShiftInput = {
    where: ShiftSwapWhereUniqueInput
    data: XOR<ShiftSwapUpdateWithoutProposedShiftInput, ShiftSwapUncheckedUpdateWithoutProposedShiftInput>
  }

  export type ShiftSwapUpdateManyWithWhereWithoutProposedShiftInput = {
    where: ShiftSwapScalarWhereInput
    data: XOR<ShiftSwapUpdateManyMutationInput, ShiftSwapUncheckedUpdateManyWithoutProposedShiftInput>
  }

  export type StaffCreateWithoutLeaveRequestsInput = {
    id?: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffInput
    shifts?: ShiftCreateNestedManyWithoutStaffInput
    leaveDays?: LeaveDayCreateNestedManyWithoutStaffInput
    leavePeriods?: LeavePeriodCreateNestedManyWithoutStaffInput
    skillsMatrix?: SkillMatrixCreateNestedManyWithoutStaffInput
    swapsProposed?: ShiftSwapCreateNestedManyWithoutProposerInput
    swapsReceived?: ShiftSwapCreateNestedManyWithoutReceiverInput
  }

  export type StaffUncheckedCreateWithoutLeaveRequestsInput = {
    id?: string
    userId: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shifts?: ShiftUncheckedCreateNestedManyWithoutStaffInput
    leaveDays?: LeaveDayUncheckedCreateNestedManyWithoutStaffInput
    leavePeriods?: LeavePeriodUncheckedCreateNestedManyWithoutStaffInput
    skillsMatrix?: SkillMatrixUncheckedCreateNestedManyWithoutStaffInput
    swapsProposed?: ShiftSwapUncheckedCreateNestedManyWithoutProposerInput
    swapsReceived?: ShiftSwapUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type StaffCreateOrConnectWithoutLeaveRequestsInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutLeaveRequestsInput, StaffUncheckedCreateWithoutLeaveRequestsInput>
  }

  export type StaffUpsertWithoutLeaveRequestsInput = {
    update: XOR<StaffUpdateWithoutLeaveRequestsInput, StaffUncheckedUpdateWithoutLeaveRequestsInput>
    create: XOR<StaffCreateWithoutLeaveRequestsInput, StaffUncheckedCreateWithoutLeaveRequestsInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutLeaveRequestsInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutLeaveRequestsInput, StaffUncheckedUpdateWithoutLeaveRequestsInput>
  }

  export type StaffUpdateWithoutLeaveRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffNestedInput
    shifts?: ShiftUpdateManyWithoutStaffNestedInput
    leaveDays?: LeaveDayUpdateManyWithoutStaffNestedInput
    leavePeriods?: LeavePeriodUpdateManyWithoutStaffNestedInput
    skillsMatrix?: SkillMatrixUpdateManyWithoutStaffNestedInput
    swapsProposed?: ShiftSwapUpdateManyWithoutProposerNestedInput
    swapsReceived?: ShiftSwapUpdateManyWithoutReceiverNestedInput
  }

  export type StaffUncheckedUpdateWithoutLeaveRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shifts?: ShiftUncheckedUpdateManyWithoutStaffNestedInput
    leaveDays?: LeaveDayUncheckedUpdateManyWithoutStaffNestedInput
    leavePeriods?: LeavePeriodUncheckedUpdateManyWithoutStaffNestedInput
    skillsMatrix?: SkillMatrixUncheckedUpdateManyWithoutStaffNestedInput
    swapsProposed?: ShiftSwapUncheckedUpdateManyWithoutProposerNestedInput
    swapsReceived?: ShiftSwapUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type StaffCreateWithoutLeaveDaysInput = {
    id?: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffInput
    shifts?: ShiftCreateNestedManyWithoutStaffInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStaffInput
    leavePeriods?: LeavePeriodCreateNestedManyWithoutStaffInput
    skillsMatrix?: SkillMatrixCreateNestedManyWithoutStaffInput
    swapsProposed?: ShiftSwapCreateNestedManyWithoutProposerInput
    swapsReceived?: ShiftSwapCreateNestedManyWithoutReceiverInput
  }

  export type StaffUncheckedCreateWithoutLeaveDaysInput = {
    id?: string
    userId: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shifts?: ShiftUncheckedCreateNestedManyWithoutStaffInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStaffInput
    leavePeriods?: LeavePeriodUncheckedCreateNestedManyWithoutStaffInput
    skillsMatrix?: SkillMatrixUncheckedCreateNestedManyWithoutStaffInput
    swapsProposed?: ShiftSwapUncheckedCreateNestedManyWithoutProposerInput
    swapsReceived?: ShiftSwapUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type StaffCreateOrConnectWithoutLeaveDaysInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutLeaveDaysInput, StaffUncheckedCreateWithoutLeaveDaysInput>
  }

  export type StaffUpsertWithoutLeaveDaysInput = {
    update: XOR<StaffUpdateWithoutLeaveDaysInput, StaffUncheckedUpdateWithoutLeaveDaysInput>
    create: XOR<StaffCreateWithoutLeaveDaysInput, StaffUncheckedCreateWithoutLeaveDaysInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutLeaveDaysInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutLeaveDaysInput, StaffUncheckedUpdateWithoutLeaveDaysInput>
  }

  export type StaffUpdateWithoutLeaveDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffNestedInput
    shifts?: ShiftUpdateManyWithoutStaffNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStaffNestedInput
    leavePeriods?: LeavePeriodUpdateManyWithoutStaffNestedInput
    skillsMatrix?: SkillMatrixUpdateManyWithoutStaffNestedInput
    swapsProposed?: ShiftSwapUpdateManyWithoutProposerNestedInput
    swapsReceived?: ShiftSwapUpdateManyWithoutReceiverNestedInput
  }

  export type StaffUncheckedUpdateWithoutLeaveDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shifts?: ShiftUncheckedUpdateManyWithoutStaffNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStaffNestedInput
    leavePeriods?: LeavePeriodUncheckedUpdateManyWithoutStaffNestedInput
    skillsMatrix?: SkillMatrixUncheckedUpdateManyWithoutStaffNestedInput
    swapsProposed?: ShiftSwapUncheckedUpdateManyWithoutProposerNestedInput
    swapsReceived?: ShiftSwapUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type StaffCreateWithoutLeavePeriodsInput = {
    id?: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffInput
    shifts?: ShiftCreateNestedManyWithoutStaffInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStaffInput
    leaveDays?: LeaveDayCreateNestedManyWithoutStaffInput
    skillsMatrix?: SkillMatrixCreateNestedManyWithoutStaffInput
    swapsProposed?: ShiftSwapCreateNestedManyWithoutProposerInput
    swapsReceived?: ShiftSwapCreateNestedManyWithoutReceiverInput
  }

  export type StaffUncheckedCreateWithoutLeavePeriodsInput = {
    id?: string
    userId: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shifts?: ShiftUncheckedCreateNestedManyWithoutStaffInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStaffInput
    leaveDays?: LeaveDayUncheckedCreateNestedManyWithoutStaffInput
    skillsMatrix?: SkillMatrixUncheckedCreateNestedManyWithoutStaffInput
    swapsProposed?: ShiftSwapUncheckedCreateNestedManyWithoutProposerInput
    swapsReceived?: ShiftSwapUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type StaffCreateOrConnectWithoutLeavePeriodsInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutLeavePeriodsInput, StaffUncheckedCreateWithoutLeavePeriodsInput>
  }

  export type StaffUpsertWithoutLeavePeriodsInput = {
    update: XOR<StaffUpdateWithoutLeavePeriodsInput, StaffUncheckedUpdateWithoutLeavePeriodsInput>
    create: XOR<StaffCreateWithoutLeavePeriodsInput, StaffUncheckedCreateWithoutLeavePeriodsInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutLeavePeriodsInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutLeavePeriodsInput, StaffUncheckedUpdateWithoutLeavePeriodsInput>
  }

  export type StaffUpdateWithoutLeavePeriodsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffNestedInput
    shifts?: ShiftUpdateManyWithoutStaffNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStaffNestedInput
    leaveDays?: LeaveDayUpdateManyWithoutStaffNestedInput
    skillsMatrix?: SkillMatrixUpdateManyWithoutStaffNestedInput
    swapsProposed?: ShiftSwapUpdateManyWithoutProposerNestedInput
    swapsReceived?: ShiftSwapUpdateManyWithoutReceiverNestedInput
  }

  export type StaffUncheckedUpdateWithoutLeavePeriodsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shifts?: ShiftUncheckedUpdateManyWithoutStaffNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStaffNestedInput
    leaveDays?: LeaveDayUncheckedUpdateManyWithoutStaffNestedInput
    skillsMatrix?: SkillMatrixUncheckedUpdateManyWithoutStaffNestedInput
    swapsProposed?: ShiftSwapUncheckedUpdateManyWithoutProposerNestedInput
    swapsReceived?: ShiftSwapUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type ShiftCreateWithoutSwapsInput = {
    id?: string
    week: number
    day: string
    shiftType: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    period: RosterPeriodCreateNestedOneWithoutShiftsInput
    staff: StaffCreateNestedOneWithoutShiftsInput
  }

  export type ShiftUncheckedCreateWithoutSwapsInput = {
    id?: string
    periodId: string
    staffId: string
    week: number
    day: string
    shiftType: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftCreateOrConnectWithoutSwapsInput = {
    where: ShiftWhereUniqueInput
    create: XOR<ShiftCreateWithoutSwapsInput, ShiftUncheckedCreateWithoutSwapsInput>
  }

  export type StaffCreateWithoutSwapsProposedInput = {
    id?: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffInput
    shifts?: ShiftCreateNestedManyWithoutStaffInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStaffInput
    leaveDays?: LeaveDayCreateNestedManyWithoutStaffInput
    leavePeriods?: LeavePeriodCreateNestedManyWithoutStaffInput
    skillsMatrix?: SkillMatrixCreateNestedManyWithoutStaffInput
    swapsReceived?: ShiftSwapCreateNestedManyWithoutReceiverInput
  }

  export type StaffUncheckedCreateWithoutSwapsProposedInput = {
    id?: string
    userId: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shifts?: ShiftUncheckedCreateNestedManyWithoutStaffInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStaffInput
    leaveDays?: LeaveDayUncheckedCreateNestedManyWithoutStaffInput
    leavePeriods?: LeavePeriodUncheckedCreateNestedManyWithoutStaffInput
    skillsMatrix?: SkillMatrixUncheckedCreateNestedManyWithoutStaffInput
    swapsReceived?: ShiftSwapUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type StaffCreateOrConnectWithoutSwapsProposedInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutSwapsProposedInput, StaffUncheckedCreateWithoutSwapsProposedInput>
  }

  export type StaffCreateWithoutSwapsReceivedInput = {
    id?: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffInput
    shifts?: ShiftCreateNestedManyWithoutStaffInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStaffInput
    leaveDays?: LeaveDayCreateNestedManyWithoutStaffInput
    leavePeriods?: LeavePeriodCreateNestedManyWithoutStaffInput
    skillsMatrix?: SkillMatrixCreateNestedManyWithoutStaffInput
    swapsProposed?: ShiftSwapCreateNestedManyWithoutProposerInput
  }

  export type StaffUncheckedCreateWithoutSwapsReceivedInput = {
    id?: string
    userId: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shifts?: ShiftUncheckedCreateNestedManyWithoutStaffInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStaffInput
    leaveDays?: LeaveDayUncheckedCreateNestedManyWithoutStaffInput
    leavePeriods?: LeavePeriodUncheckedCreateNestedManyWithoutStaffInput
    skillsMatrix?: SkillMatrixUncheckedCreateNestedManyWithoutStaffInput
    swapsProposed?: ShiftSwapUncheckedCreateNestedManyWithoutProposerInput
  }

  export type StaffCreateOrConnectWithoutSwapsReceivedInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutSwapsReceivedInput, StaffUncheckedCreateWithoutSwapsReceivedInput>
  }

  export type ShiftUpsertWithoutSwapsInput = {
    update: XOR<ShiftUpdateWithoutSwapsInput, ShiftUncheckedUpdateWithoutSwapsInput>
    create: XOR<ShiftCreateWithoutSwapsInput, ShiftUncheckedCreateWithoutSwapsInput>
    where?: ShiftWhereInput
  }

  export type ShiftUpdateToOneWithWhereWithoutSwapsInput = {
    where?: ShiftWhereInput
    data: XOR<ShiftUpdateWithoutSwapsInput, ShiftUncheckedUpdateWithoutSwapsInput>
  }

  export type ShiftUpdateWithoutSwapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    week?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    period?: RosterPeriodUpdateOneRequiredWithoutShiftsNestedInput
    staff?: StaffUpdateOneRequiredWithoutShiftsNestedInput
  }

  export type ShiftUncheckedUpdateWithoutSwapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    week?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffUpsertWithoutSwapsProposedInput = {
    update: XOR<StaffUpdateWithoutSwapsProposedInput, StaffUncheckedUpdateWithoutSwapsProposedInput>
    create: XOR<StaffCreateWithoutSwapsProposedInput, StaffUncheckedCreateWithoutSwapsProposedInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutSwapsProposedInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutSwapsProposedInput, StaffUncheckedUpdateWithoutSwapsProposedInput>
  }

  export type StaffUpdateWithoutSwapsProposedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffNestedInput
    shifts?: ShiftUpdateManyWithoutStaffNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStaffNestedInput
    leaveDays?: LeaveDayUpdateManyWithoutStaffNestedInput
    leavePeriods?: LeavePeriodUpdateManyWithoutStaffNestedInput
    skillsMatrix?: SkillMatrixUpdateManyWithoutStaffNestedInput
    swapsReceived?: ShiftSwapUpdateManyWithoutReceiverNestedInput
  }

  export type StaffUncheckedUpdateWithoutSwapsProposedInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shifts?: ShiftUncheckedUpdateManyWithoutStaffNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStaffNestedInput
    leaveDays?: LeaveDayUncheckedUpdateManyWithoutStaffNestedInput
    leavePeriods?: LeavePeriodUncheckedUpdateManyWithoutStaffNestedInput
    skillsMatrix?: SkillMatrixUncheckedUpdateManyWithoutStaffNestedInput
    swapsReceived?: ShiftSwapUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type StaffUpsertWithoutSwapsReceivedInput = {
    update: XOR<StaffUpdateWithoutSwapsReceivedInput, StaffUncheckedUpdateWithoutSwapsReceivedInput>
    create: XOR<StaffCreateWithoutSwapsReceivedInput, StaffUncheckedCreateWithoutSwapsReceivedInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutSwapsReceivedInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutSwapsReceivedInput, StaffUncheckedUpdateWithoutSwapsReceivedInput>
  }

  export type StaffUpdateWithoutSwapsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffNestedInput
    shifts?: ShiftUpdateManyWithoutStaffNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStaffNestedInput
    leaveDays?: LeaveDayUpdateManyWithoutStaffNestedInput
    leavePeriods?: LeavePeriodUpdateManyWithoutStaffNestedInput
    skillsMatrix?: SkillMatrixUpdateManyWithoutStaffNestedInput
    swapsProposed?: ShiftSwapUpdateManyWithoutProposerNestedInput
  }

  export type StaffUncheckedUpdateWithoutSwapsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shifts?: ShiftUncheckedUpdateManyWithoutStaffNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStaffNestedInput
    leaveDays?: LeaveDayUncheckedUpdateManyWithoutStaffNestedInput
    leavePeriods?: LeavePeriodUncheckedUpdateManyWithoutStaffNestedInput
    skillsMatrix?: SkillMatrixUncheckedUpdateManyWithoutStaffNestedInput
    swapsProposed?: ShiftSwapUncheckedUpdateManyWithoutProposerNestedInput
  }

  export type SkillMatrixCreateWithoutSkillInput = {
    id?: string
    level: string
    certificationDate?: Date | string | null
    expiryDate?: Date | string | null
    lastAssessed?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    staff: StaffCreateNestedOneWithoutSkillsMatrixInput
  }

  export type SkillMatrixUncheckedCreateWithoutSkillInput = {
    id?: string
    staffId: string
    level: string
    certificationDate?: Date | string | null
    expiryDate?: Date | string | null
    lastAssessed?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkillMatrixCreateOrConnectWithoutSkillInput = {
    where: SkillMatrixWhereUniqueInput
    create: XOR<SkillMatrixCreateWithoutSkillInput, SkillMatrixUncheckedCreateWithoutSkillInput>
  }

  export type SkillMatrixCreateManySkillInputEnvelope = {
    data: SkillMatrixCreateManySkillInput | SkillMatrixCreateManySkillInput[]
  }

  export type SkillMatrixUpsertWithWhereUniqueWithoutSkillInput = {
    where: SkillMatrixWhereUniqueInput
    update: XOR<SkillMatrixUpdateWithoutSkillInput, SkillMatrixUncheckedUpdateWithoutSkillInput>
    create: XOR<SkillMatrixCreateWithoutSkillInput, SkillMatrixUncheckedCreateWithoutSkillInput>
  }

  export type SkillMatrixUpdateWithWhereUniqueWithoutSkillInput = {
    where: SkillMatrixWhereUniqueInput
    data: XOR<SkillMatrixUpdateWithoutSkillInput, SkillMatrixUncheckedUpdateWithoutSkillInput>
  }

  export type SkillMatrixUpdateManyWithWhereWithoutSkillInput = {
    where: SkillMatrixScalarWhereInput
    data: XOR<SkillMatrixUpdateManyMutationInput, SkillMatrixUncheckedUpdateManyWithoutSkillInput>
  }

  export type StaffCreateWithoutSkillsMatrixInput = {
    id?: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffInput
    shifts?: ShiftCreateNestedManyWithoutStaffInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStaffInput
    leaveDays?: LeaveDayCreateNestedManyWithoutStaffInput
    leavePeriods?: LeavePeriodCreateNestedManyWithoutStaffInput
    swapsProposed?: ShiftSwapCreateNestedManyWithoutProposerInput
    swapsReceived?: ShiftSwapCreateNestedManyWithoutReceiverInput
  }

  export type StaffUncheckedCreateWithoutSkillsMatrixInput = {
    id?: string
    userId: string
    name: string
    status?: string
    scheduleType?: string
    workDays?: string | null
    week1Days?: string | null
    week2Days?: string | null
    weekOffNum?: number | null
    weekOffShiftType?: string | null
    inactiveDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shifts?: ShiftUncheckedCreateNestedManyWithoutStaffInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStaffInput
    leaveDays?: LeaveDayUncheckedCreateNestedManyWithoutStaffInput
    leavePeriods?: LeavePeriodUncheckedCreateNestedManyWithoutStaffInput
    swapsProposed?: ShiftSwapUncheckedCreateNestedManyWithoutProposerInput
    swapsReceived?: ShiftSwapUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type StaffCreateOrConnectWithoutSkillsMatrixInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutSkillsMatrixInput, StaffUncheckedCreateWithoutSkillsMatrixInput>
  }

  export type SkillCreateWithoutSkillsMatrixInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkillUncheckedCreateWithoutSkillsMatrixInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkillCreateOrConnectWithoutSkillsMatrixInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutSkillsMatrixInput, SkillUncheckedCreateWithoutSkillsMatrixInput>
  }

  export type StaffUpsertWithoutSkillsMatrixInput = {
    update: XOR<StaffUpdateWithoutSkillsMatrixInput, StaffUncheckedUpdateWithoutSkillsMatrixInput>
    create: XOR<StaffCreateWithoutSkillsMatrixInput, StaffUncheckedCreateWithoutSkillsMatrixInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutSkillsMatrixInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutSkillsMatrixInput, StaffUncheckedUpdateWithoutSkillsMatrixInput>
  }

  export type StaffUpdateWithoutSkillsMatrixInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffNestedInput
    shifts?: ShiftUpdateManyWithoutStaffNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStaffNestedInput
    leaveDays?: LeaveDayUpdateManyWithoutStaffNestedInput
    leavePeriods?: LeavePeriodUpdateManyWithoutStaffNestedInput
    swapsProposed?: ShiftSwapUpdateManyWithoutProposerNestedInput
    swapsReceived?: ShiftSwapUpdateManyWithoutReceiverNestedInput
  }

  export type StaffUncheckedUpdateWithoutSkillsMatrixInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    scheduleType?: StringFieldUpdateOperationsInput | string
    workDays?: NullableStringFieldUpdateOperationsInput | string | null
    week1Days?: NullableStringFieldUpdateOperationsInput | string | null
    week2Days?: NullableStringFieldUpdateOperationsInput | string | null
    weekOffNum?: NullableIntFieldUpdateOperationsInput | number | null
    weekOffShiftType?: NullableStringFieldUpdateOperationsInput | string | null
    inactiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shifts?: ShiftUncheckedUpdateManyWithoutStaffNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStaffNestedInput
    leaveDays?: LeaveDayUncheckedUpdateManyWithoutStaffNestedInput
    leavePeriods?: LeavePeriodUncheckedUpdateManyWithoutStaffNestedInput
    swapsProposed?: ShiftSwapUncheckedUpdateManyWithoutProposerNestedInput
    swapsReceived?: ShiftSwapUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type SkillUpsertWithoutSkillsMatrixInput = {
    update: XOR<SkillUpdateWithoutSkillsMatrixInput, SkillUncheckedUpdateWithoutSkillsMatrixInput>
    create: XOR<SkillCreateWithoutSkillsMatrixInput, SkillUncheckedCreateWithoutSkillsMatrixInput>
    where?: SkillWhereInput
  }

  export type SkillUpdateToOneWithWhereWithoutSkillsMatrixInput = {
    where?: SkillWhereInput
    data: XOR<SkillUpdateWithoutSkillsMatrixInput, SkillUncheckedUpdateWithoutSkillsMatrixInput>
  }

  export type SkillUpdateWithoutSkillsMatrixInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillUncheckedUpdateWithoutSkillsMatrixInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftCreateManyStaffInput = {
    id?: string
    periodId: string
    week: number
    day: string
    shiftType: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeaveRequestCreateManyStaffInput = {
    id?: string
    type: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    status?: string
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeaveDayCreateManyStaffInput = {
    id?: string
    date: Date | string
    reason?: string | null
    createdAt?: Date | string
  }

  export type LeavePeriodCreateManyStaffInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    createdAt?: Date | string
  }

  export type SkillMatrixCreateManyStaffInput = {
    id?: string
    skillId: string
    level: string
    certificationDate?: Date | string | null
    expiryDate?: Date | string | null
    lastAssessed?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftSwapCreateManyProposerInput = {
    id?: string
    proposedShiftId: string
    targetShiftId: string
    receiverId: string
    status?: string
    proposerNote?: string | null
    receiverNote?: string | null
    proposedAt?: Date | string
    respondedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftSwapCreateManyReceiverInput = {
    id?: string
    proposedShiftId: string
    targetShiftId: string
    proposerId: string
    status?: string
    proposerNote?: string | null
    receiverNote?: string | null
    proposedAt?: Date | string
    respondedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    week?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    period?: RosterPeriodUpdateOneRequiredWithoutShiftsNestedInput
    swaps?: ShiftSwapUpdateManyWithoutProposedShiftNestedInput
  }

  export type ShiftUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodId?: StringFieldUpdateOperationsInput | string
    week?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    swaps?: ShiftSwapUncheckedUpdateManyWithoutProposedShiftNestedInput
  }

  export type ShiftUncheckedUpdateManyWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodId?: StringFieldUpdateOperationsInput | string
    week?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestUncheckedUpdateManyWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveDayUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveDayUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveDayUncheckedUpdateManyWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeavePeriodUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeavePeriodUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeavePeriodUncheckedUpdateManyWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillMatrixUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAssessed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skill?: SkillUpdateOneRequiredWithoutSkillsMatrixNestedInput
  }

  export type SkillMatrixUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    skillId?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAssessed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillMatrixUncheckedUpdateManyWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    skillId?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAssessed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftSwapUpdateWithoutProposerInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetShiftId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    proposerNote?: NullableStringFieldUpdateOperationsInput | string | null
    receiverNote?: NullableStringFieldUpdateOperationsInput | string | null
    proposedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedShift?: ShiftUpdateOneRequiredWithoutSwapsNestedInput
    receiver?: StaffUpdateOneRequiredWithoutSwapsReceivedNestedInput
  }

  export type ShiftSwapUncheckedUpdateWithoutProposerInput = {
    id?: StringFieldUpdateOperationsInput | string
    proposedShiftId?: StringFieldUpdateOperationsInput | string
    targetShiftId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    proposerNote?: NullableStringFieldUpdateOperationsInput | string | null
    receiverNote?: NullableStringFieldUpdateOperationsInput | string | null
    proposedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftSwapUncheckedUpdateManyWithoutProposerInput = {
    id?: StringFieldUpdateOperationsInput | string
    proposedShiftId?: StringFieldUpdateOperationsInput | string
    targetShiftId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    proposerNote?: NullableStringFieldUpdateOperationsInput | string | null
    receiverNote?: NullableStringFieldUpdateOperationsInput | string | null
    proposedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftSwapUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetShiftId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    proposerNote?: NullableStringFieldUpdateOperationsInput | string | null
    receiverNote?: NullableStringFieldUpdateOperationsInput | string | null
    proposedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedShift?: ShiftUpdateOneRequiredWithoutSwapsNestedInput
    proposer?: StaffUpdateOneRequiredWithoutSwapsProposedNestedInput
  }

  export type ShiftSwapUncheckedUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    proposedShiftId?: StringFieldUpdateOperationsInput | string
    targetShiftId?: StringFieldUpdateOperationsInput | string
    proposerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    proposerNote?: NullableStringFieldUpdateOperationsInput | string | null
    receiverNote?: NullableStringFieldUpdateOperationsInput | string | null
    proposedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftSwapUncheckedUpdateManyWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    proposedShiftId?: StringFieldUpdateOperationsInput | string
    targetShiftId?: StringFieldUpdateOperationsInput | string
    proposerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    proposerNote?: NullableStringFieldUpdateOperationsInput | string | null
    receiverNote?: NullableStringFieldUpdateOperationsInput | string | null
    proposedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftCreateManyPeriodInput = {
    id?: string
    staffId: string
    week: number
    day: string
    shiftType: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftUpdateWithoutPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    week?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneRequiredWithoutShiftsNestedInput
    swaps?: ShiftSwapUpdateManyWithoutProposedShiftNestedInput
  }

  export type ShiftUncheckedUpdateWithoutPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    week?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    swaps?: ShiftSwapUncheckedUpdateManyWithoutProposedShiftNestedInput
  }

  export type ShiftUncheckedUpdateManyWithoutPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    week?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftSwapCreateManyProposedShiftInput = {
    id?: string
    targetShiftId: string
    proposerId: string
    receiverId: string
    status?: string
    proposerNote?: string | null
    receiverNote?: string | null
    proposedAt?: Date | string
    respondedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftSwapUpdateWithoutProposedShiftInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetShiftId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    proposerNote?: NullableStringFieldUpdateOperationsInput | string | null
    receiverNote?: NullableStringFieldUpdateOperationsInput | string | null
    proposedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposer?: StaffUpdateOneRequiredWithoutSwapsProposedNestedInput
    receiver?: StaffUpdateOneRequiredWithoutSwapsReceivedNestedInput
  }

  export type ShiftSwapUncheckedUpdateWithoutProposedShiftInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetShiftId?: StringFieldUpdateOperationsInput | string
    proposerId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    proposerNote?: NullableStringFieldUpdateOperationsInput | string | null
    receiverNote?: NullableStringFieldUpdateOperationsInput | string | null
    proposedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftSwapUncheckedUpdateManyWithoutProposedShiftInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetShiftId?: StringFieldUpdateOperationsInput | string
    proposerId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    proposerNote?: NullableStringFieldUpdateOperationsInput | string | null
    receiverNote?: NullableStringFieldUpdateOperationsInput | string | null
    proposedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillMatrixCreateManySkillInput = {
    id?: string
    staffId: string
    level: string
    certificationDate?: Date | string | null
    expiryDate?: Date | string | null
    lastAssessed?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkillMatrixUpdateWithoutSkillInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAssessed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneRequiredWithoutSkillsMatrixNestedInput
  }

  export type SkillMatrixUncheckedUpdateWithoutSkillInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAssessed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillMatrixUncheckedUpdateManyWithoutSkillInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAssessed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use StaffCountOutputTypeDefaultArgs instead
     */
    export type StaffCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StaffCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RosterPeriodCountOutputTypeDefaultArgs instead
     */
    export type RosterPeriodCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RosterPeriodCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShiftCountOutputTypeDefaultArgs instead
     */
    export type ShiftCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShiftCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SkillCountOutputTypeDefaultArgs instead
     */
    export type SkillCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SkillCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StaffDefaultArgs instead
     */
    export type StaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StaffDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RosterPeriodDefaultArgs instead
     */
    export type RosterPeriodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RosterPeriodDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShiftDefaultArgs instead
     */
    export type ShiftArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShiftDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeaveRequestDefaultArgs instead
     */
    export type LeaveRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeaveRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeaveDayDefaultArgs instead
     */
    export type LeaveDayArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeaveDayDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeavePeriodDefaultArgs instead
     */
    export type LeavePeriodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeavePeriodDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShiftSwapDefaultArgs instead
     */
    export type ShiftSwapArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShiftSwapDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SkillDefaultArgs instead
     */
    export type SkillArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SkillDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SkillMatrixDefaultArgs instead
     */
    export type SkillMatrixArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SkillMatrixDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}