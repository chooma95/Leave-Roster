// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER AUTHENTICATION
// ============================================================================

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String // bcrypt hashed
  role      String   @default("STAFF") // STAFF, MANAGER, ADMIN
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  staff Staff?

  @@map("users")
}

// ============================================================================
// STAFF MANAGEMENT
// ============================================================================

model Staff {
  id           String @id @default(uuid())
  userId       String @unique
  name         String
  status       String @default("ACTIVE") // ACTIVE, LEAVE, INACTIVE
  scheduleType String @default("FIXED") // FIXED, ALTERNATING

  // Fixed schedule (JSON array of day names)
  workDays String? // JSON: ["monday", "tuesday", ...]

  // Alternating schedule
  week1Days String? // JSON: ["monday", "wednesday", ...]
  week2Days String? // JSON: ["tuesday", "thursday", ...]

  // Week-off settings (optional)
  weekOffNum       Int?
  weekOffShiftType String? // "early" or "late"

  // Inactive tracking
  inactiveDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  shifts        Shift[]
  leaveRequests LeaveRequest[]
  leaveDays     LeaveDay[]
  leavePeriods  LeavePeriod[]
  skillsMatrix  SkillMatrix[]
  swapsProposed ShiftSwap[]    @relation("ProposedSwaps")
  swapsReceived ShiftSwap[]    @relation("ReceivedSwaps")

  @@map("staff")
}

// ============================================================================
// ROSTER & SHIFTS
// ============================================================================

model RosterPeriod {
  id        String   @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  weeks     Int

  // Snapshot data (JSON)
  weekMetadata  String // JSON: { "1": { startDate, endDate, globalWeek, ... }, ... }
  staffSnapshot String // JSON: { "id": "name", ... }
  stats         String // JSON: { "staffId": { totalShifts, earlyCount, ... }, ... }

  generatedAt DateTime @default(now())
  generatedBy String? // userId who generated

  // Relations
  shifts Shift[]

  @@map("roster_periods")
}

model Shift {
  id        String @id @default(uuid())
  periodId  String
  staffId   String
  week      Int
  day       String // "monday", "tuesday", ...
  shiftType String // "early" or "late"
  status    String @default("SCHEDULED") // SCHEDULED, COMPLETED, SWAPPED, CANCELLED

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  period RosterPeriod @relation(fields: [periodId], references: [id], onDelete: Cascade)
  staff  Staff        @relation(fields: [staffId], references: [id])
  swaps  ShiftSwap[]

  @@index([periodId, week, day])
  @@index([staffId])
  @@map("shifts")
}

// ============================================================================
// LEAVE MANAGEMENT
// ============================================================================

model LeaveRequest {
  id        String   @id @default(uuid())
  staffId   String
  type      String // ANNUAL, SICK, PERSONAL, UNPAID, OTHER
  startDate DateTime
  endDate   DateTime
  reason    String?
  status    String   @default("PENDING") // PENDING, APPROVED, REJECTED, CANCELLED

  submittedAt DateTime  @default(now())
  reviewedAt  DateTime?
  reviewedBy  String? // userId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  staff Staff @relation(fields: [staffId], references: [id])

  @@index([staffId])
  @@index([status])
  @@map("leave_requests")
}

// Individual leave days (for granular tracking)
model LeaveDay {
  id      String   @id @default(uuid())
  staffId String
  date    DateTime
  reason  String?

  createdAt DateTime @default(now())

  // Relations
  staff Staff @relation(fields: [staffId], references: [id])

  @@index([staffId, date])
  @@map("leave_days")
}

// Leave periods (for longer absences)
model LeavePeriod {
  id        String   @id @default(uuid())
  staffId   String
  startDate DateTime
  endDate   DateTime
  reason    String?

  createdAt DateTime @default(now())

  // Relations
  staff Staff @relation(fields: [staffId], references: [id])

  @@index([staffId])
  @@map("leave_periods")
}

// ============================================================================
// SHIFT SWAPS (Peer-to-peer, NO admin approval)
// ============================================================================

model ShiftSwap {
  id              String @id @default(uuid())
  proposedShiftId String
  targetShiftId   String
  proposerId      String
  receiverId      String
  status          String @default("PENDING") // PENDING, ACCEPTED, REJECTED, CANCELLED

  // Messages/notes
  proposerNote String?
  receiverNote String?

  proposedAt  DateTime  @default(now())
  respondedAt DateTime?
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  proposedShift Shift @relation(fields: [proposedShiftId], references: [id])
  proposer      Staff @relation("ProposedSwaps", fields: [proposerId], references: [id])
  receiver      Staff @relation("ReceivedSwaps", fields: [receiverId], references: [id])

  @@index([proposerId])
  @@index([receiverId])
  @@index([status])
  @@map("shift_swaps")
}

// ============================================================================
// SKILLS MATRIX
// ============================================================================

model Skill {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  category    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  skillsMatrix SkillMatrix[]

  @@map("skills")
}

model SkillMatrix {
  id      String @id @default(uuid())
  staffId String
  skillId String
  level   String // TRAINING, PROFICIENT, EXPERT

  // Certification tracking
  certificationDate DateTime?
  expiryDate        DateTime?
  lastAssessed      DateTime?

  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id])

  @@unique([staffId, skillId])
  @@index([staffId])
  @@index([skillId])
  @@map("skills_matrix")
}
